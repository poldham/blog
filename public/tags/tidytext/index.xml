<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidytext on Paul Oldham&#39;s Analytics Blog</title>
    <link>/tags/tidytext/</link>
    <description>Recent content in Tidytext on Paul Oldham&#39;s Analytics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright @ Paul Oldham 2017-2018</copyright>
    <lastBuildDate>Wed, 10 Jan 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/tidytext/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tidy text mining in parallel</title>
      <link>/tidy-text-mining-in-parallel/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/tidy-text-mining-in-parallel/</guid>
      <description>&lt;p&gt;I have been involved with text mining for quite a few years and I am a big fan of tidy text mining in R as popularised by Julia Silge and Daniel Robinson in &lt;a href=&#34;https://www.tidytextmining.com/&#34;&gt;Text Mining in R: A Tidy Approach&lt;/a&gt;. What I really like about tidy text mining is that we can keep track of the files where a word, a sentence or paragraph come from. This really matters when we want to join the results of tidy text mining to other data such as taxonomic information on species or to maps, or both. The transparency of the tidytext approach, when compared for example with machine learning approaches, also really appeals to me in terms of reproducibility and understandibility.&lt;/p&gt;
&lt;p&gt;One of the big constraints with text mining in R (or Python) is that everything runs on a single core. This can result in long waits or crashes when working at the scale of a few thousand documents or more. So, I have been investigating possible solutions for text mining in parallel in R.&lt;/p&gt;
&lt;p&gt;The story so far. I will try and highlight some useful tutorials that you may want to follow up on.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doParallel &lt;a href=&#34;http://blog.aicry.com/r-parallel-computing-in-5-minutes/&#34;&gt;walk through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;parallel&lt;/li&gt;
&lt;li&gt;partools &lt;a href=&#34;https://matloff.wordpress.com/2015/08/05/partools-a-sensible-r-package-for-large-data-sets/&#34;&gt;walk through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vertica/DistributedR&#34;&gt;distributedR&lt;/a&gt; from Vertica Analytics&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;li&gt;sparklyr &lt;a href=&#34;https://spark.rstudio.com/guides/textmining/&#34;&gt;walk through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;multidplyr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post I’m going to use Hadley Wickham’s &lt;a href=&#34;https://github.com/hadley/multidplyr&#34;&gt;multidplyr&lt;/a&gt; package for parallesing tidyverse code… since its a tidy approach that I am looking for. In exploring the options for parallelising text mining I’ve also found that this is an easy way in to exploring the issues and it works.&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hadley/multidplyr&#34;&gt;multidplyr&lt;/a&gt; has not received a lot of attention compared with other tidyverse related packages and the last commit on Github was a year ago. This raises the question of whether HW is adopting an “if it ain’t broke don’t fix it” approach or whether it is unlikely to go further. Only Hadley can answer that question.&lt;/p&gt;
&lt;p&gt;multidplyr is not on CRAN so we need to install from github&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;hadley/multidplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also be needing some other packages&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidytext&amp;quot;)
install.packages(&amp;quot;tidyverse&amp;quot;)
install.packages(&amp;quot;readtext&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(multidplyr)
library(tidytext)
library(tidyverse)
library(readtext)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s work with some actual texts to illustrate. One challenge with R can be finding an easy way to read in texts… in this case a zipped file with a bunch of text files without unzipping the file first (as it may be huge). We can do this easily with &lt;a href=&#34;https://github.com/quanteda/readtext&#34;&gt;&lt;code&gt;readtext&lt;/code&gt;&lt;/a&gt; by Kenneth Benoit at my alma mater, the LSE.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readtext::readtext()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you receive an error through mixed encoding in the files the encoding argument will frequently address problems e.g encoding = “UTF8” and display a helpful message for the problem files. We are using text files here but the function also handles xml, pdf and word documents and is a good allround function.&lt;/p&gt;
&lt;div id=&#34;a-cluster-in-one-line&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A cluster in one line&lt;/h3&gt;
&lt;p&gt;Multidplyr involves setting up a cluster and partitioning a data.frame into a &lt;code&gt;party_df&lt;/code&gt; before assigning packages, values and expressions to the nodes.&lt;/p&gt;
&lt;p&gt;The first part of this process can be handled in one line with a set of inbuilt defaults,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(multidplyr)
test &amp;lt;- partition(full_texts)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now take a look at test2 we find that it is a &lt;code&gt;party_df&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Behind the scenes the call to partition creates a default cluster (7 nodes) and randomly assigns the rows to groups across the nodes in the cluster. The code below shows the default arguments with the call to cluster generating a default cluster with 7 nodes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;partition(.data, ..., cluster = get_default_cluster())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step involves assigning packages to the cluster and values or expressions. We can do this using the pipe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- partition(full_texts) %&amp;gt;%
  cluster_library(c(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidytext&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, to get started with multidplyr we simply need the following lines of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, it is remarkably easy to set up. Next we need something to text mine the texts for. Here we will use a vector of country names.&lt;/p&gt;
&lt;p&gt;THERE IS SOMETHING WRONG WITH THIS AS ONLY SHOWING 422 results suggesting it is only finding the first of the terms not all of them&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;country &amp;lt;- c(&amp;quot;brunei|cambodia|burma|indonesia|laos|lao|malaysia|philippines|singapore|thailand|vietnam&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now pass this object to the nodes using &lt;code&gt;cluster_assign_value&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- partition(full_texts) %&amp;gt;%
  cluster_library(c(&amp;quot;tidyverse&amp;quot;, &amp;quot;tidytext&amp;quot;)) %&amp;gt;%
  cluster_assign_value(&amp;quot;country&amp;quot;, country)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now do a quick bit of text mining on the cluster. The question we will ask here is which of the documents contain one of our country names. We will use &lt;code&gt;str_detect&lt;/code&gt; from &lt;code&gt;stringr&lt;/code&gt; which will return a logical value that we will place in a new column called country. At the end of the process we will collect the results into a new data frame.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;start &amp;lt;- proc.time() # start timer
test2 &amp;lt;- test %&amp;gt;%
  mutate(text, country = str_detect(text, country)) %&amp;gt;% 
  collect()
time_taken &amp;lt;- proc.time() - start # calculate time
time_taken&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Having loaded in our sample texts we will want to set up our local cluster. There are a number of steps to this and I am following this really useful post by &lt;a href=&#34;http://www.business-science.io/code-tools/2016/12/18/multidplyr.html&#34;&gt;Matt Dancho&lt;/a&gt; as the most useful of the walkthroughs I have found so far. You might also find this blog post by &lt;a href=&#34;http://blog.aicry.com/multidplyr-dplyr-meets-parallel-processing/index.html&#34;&gt;Adam Harasimowicz&lt;/a&gt; useful.&lt;/p&gt;
&lt;p&gt;As explained in Matt Dancho’s post and the package vignette the basic steps are&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Find out how many cores you have on your machine&lt;/li&gt;
&lt;li&gt;Set up a local cluster&lt;/li&gt;
&lt;li&gt;Partitition your data frame onto the cluster (a grouped_df)&lt;/li&gt;
&lt;li&gt;Assign packages, functions, values and expressions to the nodes in the cluster&lt;/li&gt;
&lt;li&gt;Run your code and collect the data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 1: How many cores&lt;/p&gt;
&lt;p&gt;Step 2: Set up a local cluster&lt;/p&gt;
&lt;p&gt;You can use as many cores as you have available. But if you use all of them bear in mind that the machine may grind to a halt.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cluster &amp;lt;- multidplyr::create_cluster(cores = 6)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Step 3: Partition your data frame&lt;/p&gt;
&lt;p&gt;Step 4: Assign Packages, Functions, Values and Expressions&lt;/p&gt;
&lt;p&gt;You can chain the assignments together here we will break them up a bit&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;groupeddf %&amp;gt;%
    multidplyr::cluster_library(&amp;quot;tidyverse&amp;quot;) %&amp;gt;%
    multidplyr::cluster_library(&amp;quot;tidytext&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is often helpful to assign values to the nodes on the cluster&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; groupeddf %&amp;gt;%
    multidplyr::cluster_assign_value(value, as.name(value))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;a-simpler-approach&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A simpler approach&lt;/h3&gt;
&lt;p&gt;In practice &lt;code&gt;multidplyr&lt;/code&gt; has some sensible defaults that makes using it more accessible.&lt;/p&gt;
&lt;p&gt;We can combine the partition step and the cluster step into one line as follows. Note here that behind the scenes the call to partition will randomly partition the rows across nodes after creating a default cluster with 7 nodes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- partition(full_texts, cluster = get_default_cluster())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
