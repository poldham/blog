<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Paul Oldham&#39;s Analytics Blog</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Paul Oldham&#39;s Analytics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright @ Paul Oldham 2017-2018</copyright>
    <lastBuildDate>Fri, 13 Jul 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction to ORCID Researcher Identifiers in R with rorcid</title>
      <link>/introduction-to-orcid-with-rorcid/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/introduction-to-orcid-with-rorcid/</guid>
      <description>&lt;p&gt;This article provides a practical introduction to the &lt;code&gt;rorcid&lt;/code&gt; package from &lt;a href=&#34;https://ropensci.org/&#34;&gt;ROpenSci&lt;/a&gt; to access the &lt;a href=&#34;https://orcid.org/organizations/integrators/API&#34;&gt;ORCID researcher ID API&lt;/a&gt;. ORCID stands for Open Researcher or Contributor ID &lt;span class=&#34;citation&#34;&gt;(Haak et al. 2012; Meadows 2016; Youtie et al. 2017)&lt;/span&gt;. ORCID is a non-profit organisation that provides researchers with a free unique researcher identifier and a profile. To date over 5 million ORCID IDs have been issued.&lt;/p&gt;
&lt;p&gt;An ORCID ID provides a researcher with a unique identifier and a single place where where they can gather together details on their career, funding, publications, patents and datasets. The ORCID profile is under the researcher’s control and they can decide what to make public or to keep private. An important feature of the ORCID system is that it integrates with services such as Crossref and so can automate updates of researcher publications. ORCID is also important to research funding organisations, employers and publishers. A growing number of funding organisations, such as Research Councils UK, now keep track of research investments and outcomes using ORCID.&lt;/p&gt;
&lt;p&gt;The key idea behind ORCID is researcher name disambiguation. There are two main problems here that can be described in terms of lumps and splits &lt;span class=&#34;citation&#34;&gt;(Fegley and Torvik 2013)&lt;/span&gt;. The main problem here is lumps. The scientific literature is rife with people who share the same name but are distinct persons. In English a classic example would be John Smith while in Spanish it would be Carlos Garcia or Wei Wang in East Asia. This presents the problem of how to distinguish between distinct persons. The second problem arises from splits or variations in the same persons name. This can be described as the James T Kirk or Captain Kirk problem because this name might be represented as JT Kirk, James Tiberius Kirk or Kirk T James and so on with punctuation throwing additional confusion into the mayhem.&lt;/p&gt;
&lt;p&gt;ORCID contributes to solving this problem through the use of unique identifiers. It is not the only researcher identifier system out there but it has the huge advantage of being free and open access while ORCID profiles are controlled by researchers themselves.&lt;/p&gt;
&lt;p&gt;Scott Chamberlain from ROpenSci has developed the &lt;code&gt;rorcid&lt;/code&gt; package to access the ORCID API in R. &lt;code&gt;rorcid&lt;/code&gt; is well written and documented with plenty of examples. This article provides an introduction to &lt;code&gt;rorcid&lt;/code&gt; focusing on common tasks you are likely to want to use ORCID for and how to deal with processing the return from the API in R in a way that produces useful data. Please feel welcome to suggest improvements!&lt;/p&gt;
&lt;p&gt;When working with ORCID we commonly start from two different positions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;We have the name of a researcher and possibly other information about them such as their organisation. We want to look up their ORCID profile.&lt;/li&gt;
&lt;li&gt;We have an ORCID identifier and we want to retrieve information such as publications or funding information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will deal with each of these in turn.&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;We need to install the &lt;code&gt;rorcid&lt;/code&gt; package. We will also install some helper packages. You will probably already have the tidyverse (we’ll mainly use &lt;code&gt;purrr&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt; and the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;) and we’ll use &lt;code&gt;janitor&lt;/code&gt; to consistently clean up column names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;rorcid&amp;quot;)
install.packages(&amp;quot;tidyverse&amp;quot;)
install.packages(&amp;quot;janitor&amp;quot;)
install.packages(&amp;quot;usethis&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rorcid)
library(tidyverse)
library(janitor)
library(usethis)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ORCID requires us to authenticate with an ORCID API Key to use the public API. There are two ways to do this. The easiest way to get started is simply to run &lt;code&gt;orcid_auth()&lt;/code&gt; which will open a browser window and invite you to login (you will of course need to sign up to login). You will then be asked to close the browser and you will be good to go. A token will be cached locally in your working directory.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;orcid_auth()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second way, which works better for regular use, is to copy the API key displayed by &lt;code&gt;orcid_auth&lt;/code&gt; minus the Bearer. Then call &lt;code&gt;usethis&lt;/code&gt; to open up the Renviron file and enter and save the key as as ORCID_TOKEN=“yourkey”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;usethis::edit_r_environ()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to restart the R session for the key to take effect the first time you do this and reload any libraries. You should now be able to call the key with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.getenv(&amp;quot;ORCID_TOKEN&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;looking-up-researchers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Looking up Researchers&lt;/h2&gt;
&lt;p&gt;We have two main choices when we want to look up researchers with ORCID&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We use the most exact search criteria that we can (such as name, country, organisation, keywords)&lt;/li&gt;
&lt;li&gt;We cast the net wide and then narrow the potential results down.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The choice you make will partly depend on the information that you have at hand. However, in reality you will often end up using the second option for reasons we will explore below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-searching&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Searching&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rorcid&lt;/code&gt; divides calls to the API up into a range of functions providing access to distinct chunks of data. We will start with a simple query using &lt;code&gt;orcid()&lt;/code&gt;. If we use a simple open query we will get a lot of results back (up to the default maximum of 100).&lt;/p&gt;
&lt;p&gt;One tip when exploring ORCID is to use yourself as the example… because you should know what the right answer is. You can also use the fictitious, but incomplete, ORCID profile for Josiah Carberry, a specialist in psychoceramics, at &lt;a href=&#34;https://orcid.org/0000-0002-1825-0097&#34; class=&#34;uri&#34;&gt;https://orcid.org/0000-0002-1825-0097&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll just run a simple open search.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham &amp;lt;- orcid(query = &amp;quot;paul oldham&amp;quot;)
oldham&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 100 x 3
##    `orcid-identifier.uri`                `orcid-identifi… `orcid-identifi…
##  * &amp;lt;chr&amp;gt;                                 &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;           
##  1 https://orcid.org/0000-0002-0628-5540 0000-0002-0628-… orcid.org       
##  2 https://orcid.org/0000-0002-1013-4390 0000-0002-1013-… orcid.org       
##  3 https://orcid.org/0000-0003-1938-0798 0000-0003-1938-… orcid.org       
##  4 https://orcid.org/0000-0002-4058-1490 0000-0002-4058-… orcid.org       
##  5 https://orcid.org/0000-0001-5920-3804 0000-0001-5920-… orcid.org       
##  6 https://orcid.org/0000-0002-2440-8444 0000-0002-2440-… orcid.org       
##  7 https://orcid.org/0000-0001-5141-827X 0000-0001-5141-… orcid.org       
##  8 https://orcid.org/0000-0002-1800-0530 0000-0002-1800-… orcid.org       
##  9 https://orcid.org/0000-0003-2915-3169 0000-0003-2915-… orcid.org       
## 10 https://orcid.org/0000-0002-4243-8807 0000-0002-4243-… orcid.org       
## # ... with 90 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ORCID will return a default of 100 results for searches. Note that we only receive three fields back, the url, the orcid identifier in path and the host.&lt;/p&gt;
&lt;p&gt;This is not really what we want because the query is looking for Paul OR Oldham. We can get closer by being more specific using the basic guide to search syntax &lt;a href=&#34;https://members.orcid.org/api/tutorial/search-orcid-registry&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham_gen &amp;lt;- orcid(query = &amp;quot;given-names:paul AND family-name:oldham&amp;quot;) %&amp;gt;% 
  janitor::clean_names() 
oldham_gen&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 3
##   orcid_identifier_uri                  orcid_identifier… orcid_identifie…
## * &amp;lt;chr&amp;gt;                                 &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;           
## 1 https://orcid.org/0000-0002-0628-5540 0000-0002-0628-5… orcid.org       
## 2 https://orcid.org/0000-0002-1013-4390 0000-0002-1013-4… orcid.org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;janitor::clean_names&lt;/code&gt; in this code to convert awkward punctuation in column names to underscores. This makes life easier because we don’t have to play with names like &lt;code&gt;orcid-identifier.uri&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The search returns 2 people who share this name. We only have orcid identifiers at the moment but we can use the very useful browse function to view the data in a browser. Normally you will use this with a single ORCID at a time. This call will trigger a browser window.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rorcid::browse(as.orcid(oldham$orcid_identifier_path[[1]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But of course you can always browse multiple ORCIDs if you want to courtesy of &lt;code&gt;purrr&lt;/code&gt;. This will open multiple tabs containing the ORCID profiles in your browser. Use this with caution if you have lots and lots of ORCID ids or you will live in interesting times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purrr::map(oldham_gen$orcid_identifier_path, rorcid::browse)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point you probably want to start exploring other search options to make the search more accurate. As Scott explains in the &lt;code&gt;orcid()&lt;/code&gt; documentation you can use &lt;a href=&#34;https://cwiki.apache.org/confluence/display/solr/The+Standard+Query+Parser&#34;&gt;SOLR 3.6&lt;/a&gt;) including Lucene with &lt;a href=&#34;https://wiki.apache.org/solr/DisMax&#34;&gt;DisMax&lt;/a&gt; and &lt;a href=&#34;http://wiki.apache.org/solr/ExtendedDisMax&#34;&gt;Extended Dismax&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we have more information available we might want to try something like this. In this case the query include the researchers previous affiliations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham &amp;lt;- orcid(query = &amp;quot;given-names:paul AND family-name:oldham AND 
                affiliation-org-name:London School of Economics&amp;quot;) %&amp;gt;% 
  janitor::clean_names()
oldham&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 3
##   orcid_identifier_uri                  orcid_identifier… orcid_identifie…
## * &amp;lt;chr&amp;gt;                                 &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;           
## 1 https://orcid.org/0000-0002-1013-4390 0000-0002-1013-4… orcid.org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A table of fields is available in this &lt;a href=&#34;https://members.orcid.org/api/tutorial/search-orcid-registry&#34;&gt;SOLR tutorial&lt;/a&gt; and there are also quite a number of examples in the &lt;code&gt;rorcid&lt;/code&gt; function documentation to experiment with. The following query searches for the author name and the word patents across all text fields. Other useful fields to try with AND/OR are &lt;code&gt;other-names&lt;/code&gt;, &lt;code&gt;keyword&lt;/code&gt;, &lt;code&gt;work-titles&lt;/code&gt;, and &lt;code&gt;digital-object-ids&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham &amp;lt;- orcid(query = &amp;quot;given-names:paul AND family-name:oldham AND
                text:patents&amp;quot;) %&amp;gt;% 
  janitor::clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dealing-with-nosiy-names&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dealing with Nosiy Names&lt;/h2&gt;
&lt;p&gt;ORCID is intended to help address the problem of name disambiguation (same name but different persons or variants of names) but we still confront the problem of how much information we have in the first place. We are also presented with the problem of variations in the form of the same information (e.g. the London School of Economics or LSE or the London School of Economics and Political Science). The challenge with using precise match criteria at the outset is that we might miss valid variants of our terms. This means that we will often want to start by capturing the universe of things that need to be captured and then filter the data to arrive at the information we are looking for.&lt;/p&gt;
&lt;p&gt;To illustrate, let’s pull back some information on the common name John Smith.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smith &amp;lt;- orcid(query = &amp;quot;given-names:john AND family-name:smith&amp;quot;) %&amp;gt;% 
  janitor::clean_names() %&amp;gt;% 
  mutate(source_source_orcid_path = orcid_identifier_path)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end of this code we have added a call to &lt;code&gt;dplyr::mutate&lt;/code&gt; that copies the &lt;code&gt;orcid_identifier_path&lt;/code&gt; to &lt;code&gt;source_source_orcid_path&lt;/code&gt;. The reason for this is that when we send the &lt;code&gt;orcid_identifier_path&lt;/code&gt; to other functions it comes back called &lt;code&gt;source_source_orcid_path&lt;/code&gt;. To enable joins to input tables we simply add this column.&lt;/p&gt;
&lt;p&gt;We have pulled back 81 identifiers for john smith. If you would like to pull back all data beyond the default maximum of 100 results (the first page) try using &lt;code&gt;recursive = TRUE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All we have to go on at present is the ORCID id. To pull back other information we will need to pass the orcid IDs to other &lt;code&gt;rorcid&lt;/code&gt; functions. Here we will use &lt;code&gt;orcid_address&lt;/code&gt; to retrieve the address data and then restrict the data to the UK (“GB”).&lt;/p&gt;
&lt;p&gt;Many &lt;code&gt;rorcid&lt;/code&gt; functions return a list containing one or more data frames so we will use &lt;code&gt;purrr&lt;/code&gt; to extract the data frames. When using &lt;code&gt;map_df&lt;/code&gt; from &lt;code&gt;purrr&lt;/code&gt; note that NULLs and NAs can lead to errors. One tip when exploring list data for the first time is to use &lt;code&gt;purr::map&lt;/code&gt; at first to inspect the data because it always returns a list and then experiment with &lt;code&gt;map_df&lt;/code&gt; (see also &lt;code&gt;safely&lt;/code&gt; and &lt;code&gt;possibly&lt;/code&gt;). Also note that we use back ticks and not quotes around &lt;code&gt;[[&lt;/code&gt; to subset into the list.&lt;/p&gt;
&lt;p&gt;We will then filter the data on the &lt;code&gt;country_value&lt;/code&gt; field. In this case we will find John Smiths in the UK (GB).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smith_country &amp;lt;- orcid_address(smith$orcid_identifier_path) %&amp;gt;% 
  purrr::map_df(., `[[`, 2) %&amp;gt;% # access address level
  janitor::clean_names()
  
smith_country %&amp;gt;% 
  filter(country_value == &amp;quot;GB&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 12
##   visibility path                 put_code display_index created_date_val…
##   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                   &amp;lt;int&amp;gt;         &amp;lt;int&amp;gt;             &amp;lt;dbl&amp;gt;
## 1 PUBLIC     /0000-0002-7709-550…   648480             1     1488985416579
## 2 PUBLIC     /0000-0002-1963-409…   167571             0     1453659484730
## 3 PUBLIC     /0000-0003-0079-969…   921160             1     1520958186511
## 4 PUBLIC     /0000-0003-2119-855…   590213             1     1481331153320
## 5 PUBLIC     /0000-0003-1184-791…   631888             1     1487068984706
## # ... with 7 more variables: last_modified_date_value &amp;lt;dbl&amp;gt;,
## #   source_source_client_id &amp;lt;lgl&amp;gt;, source_source_orcid_uri &amp;lt;chr&amp;gt;,
## #   source_source_orcid_path &amp;lt;chr&amp;gt;, source_source_orcid_host &amp;lt;chr&amp;gt;,
## #   source_source_name_value &amp;lt;chr&amp;gt;, country_value &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We still have five results and not much more to go on. So the next step is to retrieve information about employment, education and keywords for the IDs. We will start with the raw oldham sets to get a feel for it. We use &lt;code&gt;orcid_employments()&lt;/code&gt; to pull back the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham_employ &amp;lt;- rorcid::orcid_employments(oldham_gen$orcid_identifier_path) %&amp;gt;% 
  map_df(., `[[`, &amp;quot;employment-summary&amp;quot;) %&amp;gt;% 
  janitor::clean_names()

oldham_employ %&amp;gt;% 
  select(1:2) %&amp;gt;% 
  knitr::kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;department_name&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;role_title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;UniSA College&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Course Coordinator/Lecturer/Tutor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DIrector&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;ESRC Centre for Economic and Social Aspects of Genomics&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Research Fellow, Senior Research Associate, Research Associate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Lecturer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The employment records may be of different lengths. For example one oldham above has one entry and another has three. The &lt;code&gt;source_source_orcid_path&lt;/code&gt; column is the key field foir identifying which oldham the records belong to.&lt;/p&gt;
&lt;p&gt;We will often be looking for data on more than one ORCID and entries with different numbers of rows will create a headache later on. So, we will often want to concatenate this data. To do this we use &lt;code&gt;dplyr::group_by&lt;/code&gt; to group the data on the ORCID id. We then nest the data into a list column using &lt;code&gt;tidyr::nest&lt;/code&gt; and give it a name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nested &amp;lt;- oldham_employ %&amp;gt;%
  group_by(source_source_orcid_path) %&amp;gt;% 
  nest(.key = &amp;quot;employ&amp;quot;)
nested&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   source_source_orcid_path employ           
##   &amp;lt;chr&amp;gt;                    &amp;lt;list&amp;gt;           
## 1 0000-0002-0628-5540      &amp;lt;tibble [1 × 24]&amp;gt;
## 2 0000-0002-1013-4390      &amp;lt;tibble [3 × 24]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now see that we have a tibble for the first entry and a second tibble with 3 rows for the second. We use nest because it allows us to build up a data frame consisting of tibbles of different lengths linked to the ORCID ID. To access a nested field we can subset as usual.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nested$employ[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 24
##   department_name role_title      end_date visibility put_code path       
##   &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;           &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      
## 1 UniSA College   Course Coordin… NA       PUBLIC      3834445 /0000-0002…
## # ... with 18 more variables: created_date_value &amp;lt;dbl&amp;gt;,
## #   last_modified_date_value &amp;lt;dbl&amp;gt;, source_source_client_id &amp;lt;lgl&amp;gt;,
## #   source_source_orcid_uri &amp;lt;chr&amp;gt;, source_source_orcid_host &amp;lt;chr&amp;gt;,
## #   source_source_name_value &amp;lt;chr&amp;gt;, start_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_month_value &amp;lt;chr&amp;gt;, start_date_day_value &amp;lt;chr&amp;gt;,
## #   organization_name &amp;lt;chr&amp;gt;, organization_address_city &amp;lt;chr&amp;gt;,
## #   organization_address_region &amp;lt;chr&amp;gt;, organization_address_country &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguated_organization_identifier &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguation_source &amp;lt;chr&amp;gt;,
## #   end_date_year_value &amp;lt;chr&amp;gt;, end_date_month_value &amp;lt;chr&amp;gt;,
## #   end_date_day_value &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or we can use &lt;code&gt;tidyr::unnest()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unnest(nested)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 25
##   source_source_o… department_name role_title end_date visibility put_code
##   &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;      &amp;lt;lgl&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;
## 1 0000-0002-0628-… UniSA College   Course Co… NA       PUBLIC      3834445
## 2 0000-0002-1013-… &amp;lt;NA&amp;gt;            DIrector   NA       PUBLIC      1749490
## 3 0000-0002-1013-… ESRC Centre fo… Research … NA       PUBLIC      1749502
## 4 0000-0002-1013-… &amp;lt;NA&amp;gt;            Lecturer   NA       PUBLIC      1880285
## # ... with 19 more variables: path &amp;lt;chr&amp;gt;, created_date_value &amp;lt;dbl&amp;gt;,
## #   last_modified_date_value &amp;lt;dbl&amp;gt;, source_source_client_id &amp;lt;lgl&amp;gt;,
## #   source_source_orcid_uri &amp;lt;chr&amp;gt;, source_source_orcid_host &amp;lt;chr&amp;gt;,
## #   source_source_name_value &amp;lt;chr&amp;gt;, start_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_month_value &amp;lt;chr&amp;gt;, start_date_day_value &amp;lt;chr&amp;gt;,
## #   organization_name &amp;lt;chr&amp;gt;, organization_address_city &amp;lt;chr&amp;gt;,
## #   organization_address_region &amp;lt;chr&amp;gt;, organization_address_country &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguated_organization_identifier &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguation_source &amp;lt;chr&amp;gt;,
## #   end_date_year_value &amp;lt;chr&amp;gt;, end_date_month_value &amp;lt;chr&amp;gt;,
## #   end_date_day_value &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One word of caution is that &lt;code&gt;group_by&lt;/code&gt; creates a grouped data.frame or tibble. It is not an issue in this case but normally any function that is applied to a grouped tibble will be applied based on the group variable. This can produce very odd results, so you will normally want to &lt;code&gt;ungroup()&lt;/code&gt; afterwards. In this case checking &lt;code&gt;class(nested)&lt;/code&gt; reveals we are good to go.&lt;/p&gt;
&lt;p&gt;To scale up let’s try fetching the employment data for the smith set and some other chunks of data. There are quite a few different chunks of data that we can call back with &lt;code&gt;rorcid&lt;/code&gt; functions. For example &lt;code&gt;orcid_person&lt;/code&gt; will retrieve basic data on the person including the country value. &lt;code&gt;orcid_bio&lt;/code&gt; will retrieve any biographical text entries and can then be text mined. Here we will just quickly run through a number of other fields:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smith_employ &amp;lt;- rorcid::orcid_employments(smith$orcid_identifier_path) %&amp;gt;% 
  purrr::map_df(., `[[`, &amp;quot;employment-summary&amp;quot;) %&amp;gt;% 
  janitor::clean_names() %&amp;gt;% 
  group_by(source_source_orcid_path) %&amp;gt;% 
  nest(.key = &amp;quot;employment&amp;quot;)

nrow(smith_employ)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14&lt;/code&gt;&lt;/pre&gt;
&lt;!---For fun, it turns out that some of the John Smith entries are blank because they are spam entries. Can you figure out out which ones are spam?---&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smith_education &amp;lt;- rorcid::orcid_educations(smith$source_source_orcid_path) %&amp;gt;%
  purrr::map_df(., `[[`, &amp;quot;education-summary&amp;quot;) %&amp;gt;%
  janitor::clean_names() %&amp;gt;% 
  group_by(source_source_orcid_path) %&amp;gt;% 
  nest(.key = &amp;quot;education&amp;quot;)

nrow(smith_education)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smith_keywords &amp;lt;- rorcid::orcid_keywords(smith$source_source_orcid_path) %&amp;gt;%
  purrr::map_df(., `[[`, &amp;quot;keyword&amp;quot;) %&amp;gt;%
  janitor::clean_names() %&amp;gt;% 
  group_by(source_source_orcid_path) %&amp;gt;% 
  nest(.key = &amp;quot;keyword&amp;quot;)

nrow(smith_keywords)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that these calls are becoming repetitive. We are calling an specific &lt;code&gt;rorcid&lt;/code&gt; function and then extracting a specific field into a data frame, suggesting we could start thinking about a helper function. We won’t go there now but a quick initial sketch for that might be.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- function(fun, id, field){
  res &amp;lt;- fun(id) %&amp;gt;% 
    purrr::map2_df(., `[[`, field) %&amp;gt;% 
    janitor::clean_names() %&amp;gt;% 
    group_by(source_source_orcid_path) %&amp;gt;% 
    nest(.key = field)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;joining-profile-data-together&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Joining Profile Data Together&lt;/h2&gt;
&lt;p&gt;We now have a bunch of chunks of data. Note how our original john smith data contained 81 unique ORCID ids but we are pulling back data frames with different numbers of rows (and of different lengths). So at the moment we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input orcids 81&lt;/li&gt;
&lt;li&gt;employ 14&lt;/li&gt;
&lt;li&gt;education 15&lt;/li&gt;
&lt;li&gt;keywords 10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will often see this with ORCID and in some cases fields may be dominated by NULLs. For example, according to ORCID only about 2% of the 3 million ORCID ids in 2017 included a public email address.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Researchers, including this one, are sick of endless academic spam and so will often choose not make their emails public.&lt;/p&gt;
&lt;p&gt;To deal with the data frames with different numbers of rows we will start by creating a table of unique ids from ORCID path. One thing to watch out for here is that a seemingly valid input ORCID may return an NA. In the case of the john smith data there was one case of this which seemed to be a record flagged for removal. We can handle this with &lt;code&gt;tidyr::drop_na()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ids &amp;lt;- bind_rows(smith_employ, smith_education, smith_keywords) %&amp;gt;% 
  mutate(duplicated = duplicated(source_source_orcid_path)) %&amp;gt;% 
  filter(duplicated == FALSE) %&amp;gt;% 
  select(source_source_orcid_path) %&amp;gt;% 
  drop_na()
ids&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 1
##    source_source_orcid_path
##    &amp;lt;chr&amp;gt;                   
##  1 0000-0002-3335-9488     
##  2 0000-0001-7793-0079     
##  3 0000-0003-0910-8475     
##  4 0000-0002-8384-3964     
##  5 0000-0002-1963-4092     
##  6 0000-0003-3628-444X     
##  7 0000-0003-0079-9695     
##  8 0000-0002-4216-1107     
##  9 0000-0001-9684-8847     
## 10 0000-0002-0888-1274     
## # ... with 13 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we have the unique ids we can use &lt;code&gt;dplyr::left_join()&lt;/code&gt; to create a single data frame. If table joins are new to you in R try &lt;a href=&#34;http://r4ds.had.co.nz/relational-data.html&#34;&gt;this chapter of R for Data Science&lt;/a&gt;. Here we place our ids on the left hand side and the other tables on the right hand side will be joined where there is a shared &lt;code&gt;source_source_orcid_path&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result &amp;lt;- left_join(ids, smith_employ, by = &amp;quot;source_source_orcid_path&amp;quot;) %&amp;gt;%
  left_join(., smith_education, by = &amp;quot;source_source_orcid_path&amp;quot;) %&amp;gt;%
  left_join(., smith_keywords, by = &amp;quot;source_source_orcid_path&amp;quot;)
result&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 4
##    source_source_orcid_path employment        education         keyword   
##    &amp;lt;chr&amp;gt;                    &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;            &amp;lt;list&amp;gt;    
##  1 0000-0002-3335-9488      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;NULL&amp;gt;            &amp;lt;tibble […
##  2 0000-0001-7793-0079      &amp;lt;tibble [3 × 33]&amp;gt; &amp;lt;tibble [1 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
##  3 0000-0003-0910-8475      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [2 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
##  4 0000-0002-8384-3964      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [1 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
##  5 0000-0002-1963-4092      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [1 × 30]&amp;gt; &amp;lt;tibble […
##  6 0000-0003-3628-444X      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [1 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
##  7 0000-0003-0079-9695      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;NULL&amp;gt;            &amp;lt;tibble […
##  8 0000-0002-4216-1107      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [4 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
##  9 0000-0001-9684-8847      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [1 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
## 10 0000-0002-0888-1274      &amp;lt;tibble [1 × 33]&amp;gt; &amp;lt;tibble [2 × 30]&amp;gt; &amp;lt;NULL&amp;gt;    
## # ... with 13 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we now have a data.frame that consists of list columns containing tibbles. Note that we have some NULLs where there is no data for a particular category for that ID.&lt;/p&gt;
&lt;p&gt;If you are new to list columns, or &lt;code&gt;purrr&lt;/code&gt; in general, a great place to start is &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/ls13_list-columns.html&#34;&gt;Jenny Bryans purrr tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the great features of list columns is that we can search across them and add new values based on the matches. What we want to do now is to find John Smiths where the word University appears in their employment and their country is the US. We will carry out the search using &lt;code&gt;stringr::str_detect&lt;/code&gt; which will return a logical value. We use &lt;code&gt;map&lt;/code&gt; to map over the data and place this inside mutate to add a new column to the data frame. The code is a little more complicated than we might like because the use of map returns a vector of logical values. We use &lt;code&gt;map_lgl&lt;/code&gt; and &lt;code&gt;any&lt;/code&gt; to reduce this to a single TRUE/FALSE value. We then filter the data to those cases where both university and country are TRUE.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result %&amp;gt;% 
  mutate(university = map(employment, str_detect, &amp;quot;University&amp;quot;), 
        university = map_lgl(university, any)) %&amp;gt;% 
  mutate(country = map(employment, str_detect, &amp;quot;US&amp;quot;), 
         country = map_lgl(country, any)) %&amp;gt;% 
  filter(university == TRUE &amp;amp; country == TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   source_source_orcid_path employment education keyword university country
##   &amp;lt;chr&amp;gt;                    &amp;lt;list&amp;gt;     &amp;lt;list&amp;gt;    &amp;lt;list&amp;gt;  &amp;lt;lgl&amp;gt;      &amp;lt;lgl&amp;gt;  
## 1 0000-0003-0910-8475      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;NULL&amp;gt;  TRUE       TRUE   
## 2 0000-0002-4216-1107      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;NULL&amp;gt;  TRUE       TRUE   
## 3 0000-0001-9684-8847      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;NULL&amp;gt;  TRUE       TRUE   
## 4 0000-0002-0888-1274      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;NULL&amp;gt;  TRUE       TRUE   
## 5 0000-0003-1545-5078      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;NULL&amp;gt;  TRUE       TRUE   
## 6 0000-0003-1149-0562      &amp;lt;tibble [… &amp;lt;tibble … &amp;lt;tibbl… TRUE       TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we now have a data frame where we know that the John Smiths have University somewhere in their employment and that US also appears. Note that the &lt;code&gt;any&lt;/code&gt; function can take &lt;code&gt;na.rm = TRUE&lt;/code&gt; as an argument. We are getting closer.&lt;/p&gt;
&lt;p&gt;We can do the above without using map at all because &lt;code&gt;str_detect&lt;/code&gt; will coerce columns consisting of a list of tibbles to vectors if it can. However, this will generate a warning that &lt;code&gt;argument is not an atomic vector; coercing&lt;/code&gt; so expect to see that a lot. This code is easier to read than that above but suggests a need for some more work.&lt;/p&gt;
&lt;p&gt;In this case we will also narrow down the data by searching for a keyword associated with an author.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- result %&amp;gt;% 
  mutate(university = str_detect(employment, &amp;quot;University&amp;quot;)) %&amp;gt;% 
  mutate(country = str_detect(employment, &amp;quot;US&amp;quot;)) %&amp;gt;% 
  mutate(term = str_detect(keyword, &amp;quot;Infrared transmission&amp;quot;)) %&amp;gt;% 
  filter(university == TRUE &amp;amp; country == TRUE &amp;amp; term == TRUE)
 out&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 7
##   source_source_or… employment  education keyword university country term 
##   &amp;lt;chr&amp;gt;             &amp;lt;list&amp;gt;      &amp;lt;list&amp;gt;    &amp;lt;list&amp;gt;  &amp;lt;lgl&amp;gt;      &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt;
## 1 0000-0003-1149-0… &amp;lt;tibble [5… &amp;lt;tibble … &amp;lt;tibbl… TRUE       TRUE    TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have now reduced our original 81 john smiths to 1 who has a record of being at a University in the US who is interested in Infrared Transmission. If we wished to we can unnest the columns to inspect as we go.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out %&amp;gt;% unnest(employment)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 37
##   source_source_or… university country term  department_name role_title   
##   &amp;lt;chr&amp;gt;             &amp;lt;lgl&amp;gt;      &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;        
## 1 0000-0003-1149-0… TRUE       TRUE    TRUE  Physics         Course Coord…
## 2 0000-0003-1149-0… TRUE       TRUE    TRUE  &amp;lt;NA&amp;gt;            President    
## 3 0000-0003-1149-0… TRUE       TRUE    TRUE  &amp;lt;NA&amp;gt;            Chief Techno…
## 4 0000-0003-1149-0… TRUE       TRUE    TRUE  &amp;lt;NA&amp;gt;            Director of …
## 5 0000-0003-1149-0… TRUE       TRUE    TRUE  &amp;lt;NA&amp;gt;            Senior Scien…
## # ... with 31 more variables: start_date &amp;lt;lgl&amp;gt;, end_date &amp;lt;lgl&amp;gt;,
## #   visibility &amp;lt;chr&amp;gt;, put_code &amp;lt;int&amp;gt;, path &amp;lt;chr&amp;gt;,
## #   created_date_value &amp;lt;dbl&amp;gt;, last_modified_date_value &amp;lt;dbl&amp;gt;,
## #   source_source_client_id &amp;lt;lgl&amp;gt;, source_source_orcid_uri &amp;lt;chr&amp;gt;,
## #   source_source_orcid_host &amp;lt;chr&amp;gt;, source_source_name_value &amp;lt;chr&amp;gt;,
## #   organization_name &amp;lt;chr&amp;gt;, organization_address_city &amp;lt;chr&amp;gt;,
## #   organization_address_region &amp;lt;chr&amp;gt;, organization_address_country &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguated_organization_identifier &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguation_source &amp;lt;chr&amp;gt;,
## #   start_date_day &amp;lt;lgl&amp;gt;, start_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_month_value &amp;lt;chr&amp;gt;, end_date_month &amp;lt;lgl&amp;gt;,
## #   end_date_day &amp;lt;lgl&amp;gt;, end_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_day_value &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization &amp;lt;lgl&amp;gt;,
## #   source_source_orcid &amp;lt;lgl&amp;gt;, source_source_client_id_uri &amp;lt;chr&amp;gt;,
## #   source_source_client_id_path &amp;lt;chr&amp;gt;,
## #   source_source_client_id_host &amp;lt;chr&amp;gt;, end_date_month_value &amp;lt;chr&amp;gt;,
## #   end_date_day_value &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One gotcha to be aware of is that if we try and unnest a column along with the rest of the columns we will get &lt;code&gt;Error: All nested columns must have the same number of elements&lt;/code&gt;. In addition if we try and unnest a column containing NA or NULL or a literal NULL we get an error. The solution is to use &lt;code&gt;tidyr::drop_na()&lt;/code&gt;.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;result %&amp;gt;% 
  select(source_source_orcid_path, employment) %&amp;gt;% 
  drop_na(employment) %&amp;gt;%
  unnest() %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 34
##   source_source_orc… department_name   role_title      start_date end_date
##   &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;           &amp;lt;lgl&amp;gt;      &amp;lt;lgl&amp;gt;   
## 1 0000-0002-3335-94… Civil Engineering Associate Prof… NA         NA      
## 2 0000-0001-7793-00… &amp;lt;NA&amp;gt;              Research Offic… NA         NA      
## 3 0000-0001-7793-00… &amp;lt;NA&amp;gt;              Regional Devel… NA         NA      
## 4 0000-0001-7793-00… &amp;lt;NA&amp;gt;              Barham Distric… NA         NA      
## 5 0000-0003-0910-84… Division of Plan… Graduate Resea… NA         NA      
## 6 0000-0002-8384-39… &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;            NA         NA      
## # ... with 29 more variables: visibility &amp;lt;chr&amp;gt;, put_code &amp;lt;int&amp;gt;,
## #   path &amp;lt;chr&amp;gt;, created_date_value &amp;lt;dbl&amp;gt;, last_modified_date_value &amp;lt;dbl&amp;gt;,
## #   source_source_client_id &amp;lt;lgl&amp;gt;, source_source_orcid_uri &amp;lt;chr&amp;gt;,
## #   source_source_orcid_host &amp;lt;chr&amp;gt;, source_source_name_value &amp;lt;chr&amp;gt;,
## #   organization_name &amp;lt;chr&amp;gt;, organization_address_city &amp;lt;chr&amp;gt;,
## #   organization_address_region &amp;lt;chr&amp;gt;, organization_address_country &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguated_organization_identifier &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization_disambiguation_source &amp;lt;chr&amp;gt;,
## #   start_date_day &amp;lt;lgl&amp;gt;, start_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_month_value &amp;lt;chr&amp;gt;, end_date_month &amp;lt;lgl&amp;gt;,
## #   end_date_day &amp;lt;lgl&amp;gt;, end_date_year_value &amp;lt;chr&amp;gt;,
## #   start_date_day_value &amp;lt;chr&amp;gt;,
## #   organization_disambiguated_organization &amp;lt;lgl&amp;gt;,
## #   source_source_orcid &amp;lt;lgl&amp;gt;, source_source_client_id_uri &amp;lt;chr&amp;gt;,
## #   source_source_client_id_path &amp;lt;chr&amp;gt;,
## #   source_source_client_id_host &amp;lt;chr&amp;gt;, end_date_month_value &amp;lt;chr&amp;gt;,
## #   end_date_day_value &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So list columns containing data frames are great for creating uniform data frames and for purposes such as searching across columns. They are also, more commonly, good for running models as described &lt;a href=&#34;http://ijlyttle.github.io/isugg_purrr/presentation.html#(1)&#34;&gt;here&lt;/a&gt;. However, they can take a bit of getting used to.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;retrieving-publication-meta-data-with-rcrossref&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Retrieving Publication Meta data with rcrossref&lt;/h2&gt;
&lt;p&gt;When we have identified the ORCID IDs that we want the logical next step is to retrieve publications. This is a big issue for a project I am working on in Kenya where we are working on the national research permit system. The idea we have is that we can use ORCID to pull back publications from researchers who at one time or another have received a permit for biodiversity related research. That should allow us to start building up an electronic repository of publications about biodiversity research in Kenya that can be made available to the public. Because ORCID profiles can be automatically updated (through services such as Crossref) we should be able to automate updating research publications without bothering researchers for copies of their publications.&lt;/p&gt;
&lt;p&gt;We will work with a sample of ORCID IDs for 61 researchers who have worked in Kenya at some point or another. What we want to do is to retrieve their publications using the &lt;code&gt;rorcid::works&lt;/code&gt;. We will use &lt;code&gt;map&lt;/code&gt; again to send each ORCID id to the call to works. We will also add names to the list that is returned using &lt;code&gt;set_names&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kenya_works &amp;lt;- map(kenya_orcid$orcid_identifier_path, rorcid::works) %&amp;gt;% 
  set_names(., nm = kenya_orcid$orcid_identifier_path) 

names(kenya_works[1:5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;0000-0001-5861-023X&amp;quot; &amp;quot;0000-0001-6916-0000&amp;quot; &amp;quot;0000-0002-4640-8760&amp;quot;
## [4] &amp;quot;0000-0003-0576-8935&amp;quot; &amp;quot;0000-0002-3077-7422&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we get back from this is a named list containing data frames where the input ORCID identifier is the name for each list item. We can see this from a quick look using &lt;code&gt;str()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(kenya_works[1:5], max.level = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 5
##  $ 0000-0001-5861-023X:Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;works&amp;#39; and &amp;#39;data.frame&amp;#39;:    20 obs. of  21 variables:
##   ..- attr(*, &amp;quot;orcid&amp;quot;)= chr &amp;quot;0000-0001-5861-023X&amp;quot;
##  $ 0000-0001-6916-0000:Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;works&amp;#39; and &amp;#39;data.frame&amp;#39;:    103 obs. of  23 variables:
##   ..- attr(*, &amp;quot;orcid&amp;quot;)= chr &amp;quot;0000-0001-6916-0000&amp;quot;
##  $ 0000-0002-4640-8760:Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;works&amp;#39; and &amp;#39;data.frame&amp;#39;:    0 obs. of  0 variables
##   ..- attr(*, &amp;quot;orcid&amp;quot;)= chr &amp;quot;0000-0002-4640-8760&amp;quot;
##  $ 0000-0003-0576-8935:Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;works&amp;#39; and &amp;#39;data.frame&amp;#39;:    0 obs. of  0 variables
##   ..- attr(*, &amp;quot;orcid&amp;quot;)= chr &amp;quot;0000-0003-0576-8935&amp;quot;
##  $ 0000-0002-3077-7422:Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39;, &amp;#39;works&amp;#39; and &amp;#39;data.frame&amp;#39;:    14 obs. of  21 variables:
##   ..- attr(*, &amp;quot;orcid&amp;quot;)= chr &amp;quot;0000-0002-3077-7422&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now want to convert the list of data frames to a single data frame but in doing so we want to pass the input ORCID ID from the name of the list into a column in the output. The reason for this is that the return from ORCID does not contain the ORCID ID we sent to the API but a range of ORCIDs that are the source for the works record. We need to add the ORCID ID for the person at the same time as we convert to one data frame. One way to do this is to use &lt;code&gt;map2_df&lt;/code&gt; from &lt;code&gt;purrr&lt;/code&gt;. This will map over &lt;code&gt;kenya_works&lt;/code&gt; and the names at the same time. Mutate then adds a column containing the names (.y) as orcid_id.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pubs &amp;lt;- kenya_works %&amp;gt;%
  map2_df(., names(kenya_works), ~ mutate(.x, orcid_id = .y)) %&amp;gt;% 
  janitor::clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to do the same thing with less typing is to use the newer &lt;code&gt;purrr::imap&lt;/code&gt; function which is a shorthand for &lt;code&gt;map2_df(x, names(x), ...)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pubs &amp;lt;- kenya_works %&amp;gt;% 
  imap_dfr(~mutate(.x, orcid_id = .y)) %&amp;gt;% 
  janitor::clean_names()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a single data frame with the publications that keeps the orcid_id as the key. Let’s take a look at who has the most works.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pubs %&amp;gt;% count(orcid_id, sort = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 2
##    orcid_id                n
##    &amp;lt;chr&amp;gt;               &amp;lt;int&amp;gt;
##  1 0000-0001-7513-0887   125
##  2 0000-0001-6916-0000   103
##  3 0000-0002-2146-5726   100
##  4 0000-0002-7793-8625   100
##  5 0000-0002-3958-0343    64
##  6 0000-0002-1921-0724    51
##  7 0000-0002-7486-4763    44
##  8 0000-0003-4024-0976    44
##  9 0000-0003-4864-5150    42
## 10 0000-0002-0123-8497    30
## # ... with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take a look at the top result based on the count of records for the ORCID ID. Note that the count above is a count of entries linked to the ORCID ID and does not necessarily add up to a count of publications (it actually over counts). One of the top researchers is Daniel Masiga who has been working on Leishmaniasis in Baringo and Nakuru countries in Kenya. Let’s take a look at his public profile with &lt;code&gt;browse&lt;/code&gt; or by opening the permanent link to the profile at &lt;a href=&#34;https://orcid.org/0000-0001-7513-0887&#34; class=&#34;uri&#34;&gt;https://orcid.org/0000-0001-7513-0887&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;browse(&amp;quot;0000-0001-7513-0887&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the titles of works that include reference to Kenya.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pubs %&amp;gt;% mutate(kenya = str_detect(title_title_value, pattern = &amp;quot;Kenya&amp;quot;)) %&amp;gt;% 
  filter(kenya == TRUE) %&amp;gt;% 
  select(title_title_value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 47 x 1
##    title_title_value                                                      
##    &amp;lt;chr&amp;gt;                                                                  
##  1 Size-dependent distribution and feeding habits of Terebralia palustris…
##  2 Spatial diversity of nematode and copepod genera of the coral degradat…
##  3 Nematode community structure along the continental slope off the Kenya…
##  4 New Desmodoridae (Nematoda: Desmodoroidea): three new species from Cer…
##  5 Papillonema danieli gen. et sp. n. and Papillonema clavatum (Gerlach, …
##  6 Unraveling Host-Vector-Arbovirus Interactions by Two-Gene High Resolut…
##  7 Unraveling host-vector-arbovirus interactions by two-gene high resolut…
##  8 Blood meal analysis and virus detection in blood-fed mosquitoes collec…
##  9 Blood meal analysis and virus detection in blood-fed mosquitoes collec…
## 10 High-resolution melting analysis reveals low Plasmodium parasitaemia i…
## # ... with 37 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note here that we have some duplicated entries (possibly coming into the profile from different sources?) that may need investigating.&lt;/p&gt;
&lt;p&gt;What we will normally want from this table will be the dois where available. We can then pass the dois to other services such as Crossref using &lt;code&gt;rcrossref&lt;/code&gt; to retrieve publication information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;accessing-the-doi-field.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Accessing the DOI field.&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doi &amp;lt;- pubs %&amp;gt;%
  select(external_ids_external_id)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we take a look at the doi field we will see that we have a lot of list() and NULL items as well as data.frames.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(doi[15:25,])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    11 obs. of  1 variable:
##  $ external_ids_external_id:List of 11
##   ..$ : list()
##   ..$ : list()
##   ..$ : list()
##   ..$ : list()
##   ..$ : list()
##   ..$ : list()
##   ..$ :&amp;#39;data.frame&amp;#39;: 1 obs. of  4 variables:
##   .. ..$ external-id-type        : chr &amp;quot;doi&amp;quot;
##   .. ..$ external-id-value       : chr &amp;quot;10.1242/jeb.176537&amp;quot;
##   .. ..$ external-id-relationship: chr &amp;quot;SELF&amp;quot;
##   .. ..$ external-id-url.value   : chr &amp;quot;https://doi.org/10.1242/jeb.176537&amp;quot;
##   ..$ :&amp;#39;data.frame&amp;#39;: 1 obs. of  4 variables:
##   .. ..$ external-id-type        : chr &amp;quot;doi&amp;quot;
##   .. ..$ external-id-value       : chr &amp;quot;10.7554/eLife.29053&amp;quot;
##   .. ..$ external-id-relationship: chr &amp;quot;SELF&amp;quot;
##   .. ..$ external-id-url.value   : chr &amp;quot;https://doi.org/10.7554/eLife.29053&amp;quot;
##   ..$ :&amp;#39;data.frame&amp;#39;: 1 obs. of  4 variables:
##   .. ..$ external-id-type        : chr &amp;quot;doi&amp;quot;
##   .. ..$ external-id-value       : chr &amp;quot;10.1242/jeb.171926&amp;quot;
##   .. ..$ external-id-relationship: chr &amp;quot;SELF&amp;quot;
##   .. ..$ external-id-url.value   : chr &amp;quot;https://doi.org/10.1242/jeb.171926&amp;quot;
##   ..$ :&amp;#39;data.frame&amp;#39;: 1 obs. of  4 variables:
##   .. ..$ external-id-type        : chr &amp;quot;doi&amp;quot;
##   .. ..$ external-id-value       : chr &amp;quot;10.1515/9783110548877-003&amp;quot;
##   .. ..$ external-id-url         : logi NA
##   .. ..$ external-id-relationship: chr &amp;quot;SELF&amp;quot;
##   ..$ :&amp;#39;data.frame&amp;#39;: 1 obs. of  4 variables:
##   .. ..$ external-id-type        : chr &amp;quot;doi&amp;quot;
##   .. ..$ external-id-value       : chr &amp;quot;10.1109/biocas.2016.7833768&amp;quot;
##   .. ..$ external-id-url         : logi NA
##   .. ..$ external-id-relationship: chr &amp;quot;SELF&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we need to do is to get rid of the NULL and the empty list() entries. Normally we can use &lt;code&gt;purrr::compact()&lt;/code&gt; directly to do this but in this case the NULLs are inside the list objects, so we call compact inside map, we then bind the list of data frames using &lt;code&gt;map_df&lt;/code&gt; and a call to &lt;code&gt;bind_rows&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doi &amp;lt;- doi %&amp;gt;%
  map(., compact) %&amp;gt;% 
  map_df(bind_rows) %&amp;gt;% 
  janitor::clean_names()

doi[1:5,] %&amp;gt;%
  select(1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   external_id_type           external_id_value external_id_relationship
## 1              doi          10.1242/jeb.176537                     SELF
## 2              doi         10.7554/eLife.29053                     SELF
## 3              doi          10.1242/jeb.171926                     SELF
## 4              doi   10.1515/9783110548877-003                     SELF
## 5              doi 10.1109/biocas.2016.7833768                     SELF&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is worth noting that the external_id_type column contains a variety of different kind of identifiers that we might want to explore (such as isbn and issn etc).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doi %&amp;gt;% 
  group_by(external_id_type) %&amp;gt;%
  count()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
## # Groups:   external_id_type [10]
##    external_id_type     n
##    &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt;
##  1 arxiv               47
##  2 doi                690
##  3 eid                283
##  4 isbn                 1
##  5 issn                74
##  6 other-id            82
##  7 pmc                 57
##  8 pmid               140
##  9 source-work-id      41
## 10 wosuid              96&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will just filter the data to the dois and then pass them on to rcrossref to retrieve the publication meta data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doi &amp;lt;- doi %&amp;gt;% filter(external_id_type == &amp;quot;doi&amp;quot;) %&amp;gt;% 
  select(external_id_value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to &lt;code&gt;install.packages(&amp;quot;rcrossref&amp;quot;)&lt;/code&gt; and load the library to generate the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rcrossref)
crossref_kenya &amp;lt;- rcrossref::cr_works(doi$external_id_value)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the function churns through the 690 dois warning messages will pop up with things like &lt;code&gt;404: Resource not found. - (115.001086)404&lt;/code&gt;. I got 9 of these on this test. We can easily access this data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossref_kenya &amp;lt;- crossref_kenya$data %&amp;gt;% 
  janitor::clean_names()
crossref_kenya&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 681 x 34
##    alternative_id  container_title   created deposited doi   indexed issn 
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;
##  1 10.1242/jeb.17… The Journal of E… 2018-0… 2018-07-… 10.1… 2018-0… 0022…
##  2 10.7554/eLife.… eLife             2018-0… 2018-04-… 10.7… 2018-0… 2050…
##  3 10.1242/jeb.17… The Journal of E… 2017-1… 2018-02-… 10.1… 2018-0… 0022…
##  4 &amp;lt;NA&amp;gt;            Bild - Ton - Rhy… 2017-0… 2017-04-… 10.1… 2018-0… &amp;lt;NA&amp;gt; 
##  5 &amp;lt;NA&amp;gt;            2016 IEEE Biomed… 2017-0… 2017-12-… 10.1… 2018-0… &amp;lt;NA&amp;gt; 
##  6 &amp;lt;NA&amp;gt;            PLOS Biology      2016-0… 2017-06-… 10.1… 2018-0… 1545…
##  7 &amp;lt;NA&amp;gt;            Frontiers in Beh… 2016-0… 2017-06-… 10.3… 2018-0… 1662…
##  8 &amp;lt;NA&amp;gt;            Bat Bioacoustics… 2016-0… 2017-06-… 10.1… 2018-0… 0947…
##  9 &amp;lt;NA&amp;gt;            Frontiers in Phy… 2014-0… 2015-02-… 10.3… 2018-0… 1664…
## 10 &amp;lt;NA&amp;gt;            Frontiers in Psy… 2014-0… 2017-06-… 10.3… 2018-0… 1664…
## # ... with 671 more rows, and 27 more variables: issued &amp;lt;chr&amp;gt;,
## #   license_date &amp;lt;chr&amp;gt;, license_url &amp;lt;chr&amp;gt;, license_delay_in_days &amp;lt;chr&amp;gt;,
## #   license_content_version &amp;lt;chr&amp;gt;, member &amp;lt;chr&amp;gt;, page &amp;lt;chr&amp;gt;, prefix &amp;lt;chr&amp;gt;,
## #   publisher &amp;lt;chr&amp;gt;, reference_count &amp;lt;chr&amp;gt;, score &amp;lt;chr&amp;gt;, source &amp;lt;chr&amp;gt;,
## #   subject &amp;lt;chr&amp;gt;, title &amp;lt;chr&amp;gt;, type &amp;lt;chr&amp;gt;, url &amp;lt;chr&amp;gt;, author &amp;lt;list&amp;gt;,
## #   funder &amp;lt;list&amp;gt;, link &amp;lt;list&amp;gt;, archive &amp;lt;chr&amp;gt;, volume &amp;lt;chr&amp;gt;,
## #   abstract &amp;lt;chr&amp;gt;, issue &amp;lt;chr&amp;gt;, isbn &amp;lt;chr&amp;gt;, update_policy &amp;lt;chr&amp;gt;,
## #   assertion &amp;lt;list&amp;gt;, subtitle &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the journals&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crossref_kenya %&amp;gt;% 
  count(container_title, sort = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 293 x 2
##    container_title                                                       n
##    &amp;lt;chr&amp;gt;                                                             &amp;lt;int&amp;gt;
##  1 PLoS ONE                                                             22
##  2 Physical Review D                                                    21
##  3 The Journal of the Acoustical Society of America                     16
##  4 Transportation Research Record: Journal of the Transportation Re…    15
##  5 PLoS Neglected Tropical Diseases                                     14
##  6 PLOS ONE                                                             10
##  7 Leukemia                                                              9
##  8 The Journal of Immunology                                             9
##  9 Journal of Comparative Physiology A                                   8
## 10 Accident Analysis &amp;amp; Prevention                                        7
## # ... with 283 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are quite a number of things that we could do from here such as attempting to retrieve full text links, abstracts, citations or text mining the available data. For example we could retrieve full text data from PLOS using packages such as &lt;code&gt;rplos&lt;/code&gt;. For the moment, we have covered a lot of ground in using rorcid and bridging across to other data sources such as rcrossref.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;ORCID is an increasingly important data service for research funding organisations, university administrators, publishers and researchers interested in understanding trends in science and technology. The &lt;code&gt;rorcid&lt;/code&gt; package provides a straightforward and easy way to access ORCID data in R while Python users can try &lt;a href=&#34;https://github.com/ORCID/python-orcid&#34;&gt;python-orcid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article has walked through the basics of searching using rorcid and approaches to filtering the data. As we have seen one reality of working with names is dealing with homonyms or distinct persons who share the same name (also known as lumps). One challenge with the data returned by ORCID is that the completeness of different data fields can vary wildly. We addressed this problem by creating a single data frame consisting of list columns containing data frames and then searching across them. While there is room for improvement in this approach it
illustrates the power of list columns.&lt;/p&gt;
&lt;p&gt;We finished off by retrieving publication data from a sample of researchers profiles for biodiversity research in Kenya. We then bridged across to the rcrossref package to pull back the publication data.&lt;/p&gt;
&lt;p&gt;Many thanks to Scott Chamberlain for his hard work on the rorcid package! As always corrections or suggestions are welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-rorcid&#34;&gt;
&lt;p&gt;Chamberlain, Scott. 2018. &lt;em&gt;Rorcid: Interface to the ’Orcid.org’ ’Api’&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=rorcid&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=rorcid&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rcrossref&#34;&gt;
&lt;p&gt;Chamberlain, Scott, Carl Boettiger, Ted Hart, and Karthik Ram. 2018. &lt;em&gt;Rcrossref: Client for Various ’Crossref’ ’Apis’&lt;/em&gt;. &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rcrossref&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Fegley_2013&#34;&gt;
&lt;p&gt;Fegley, Brent D., and Vetle I. Torvik. 2013. “Has Large-Scale Named-Entity Network Analysis Been Resting on a Flawed Assumption?” Edited by Marco Tomassini. &lt;em&gt;PLoS ONE&lt;/em&gt; 8 (7). Public Library of Science (PLoS): e70299. &lt;a href=&#34;https://doi.org/10.1371/journal.pone.0070299&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1371/journal.pone.0070299&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-janitor&#34;&gt;
&lt;p&gt;Firke, Sam. 2018. &lt;em&gt;Janitor: Simple Tools for Examining and Cleaning Dirty Data&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=janitor&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=janitor&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Haak_2012&#34;&gt;
&lt;p&gt;Haak, Laurel L., Martin Fenner, Laura Paglione, Ed Pentz, and Howard Ratner. 2012. “ORCID: A System to Uniquely Identify Researchers.” &lt;em&gt;Learned Publishing&lt;/em&gt; 25 (4). Wiley: 259–64. &lt;a href=&#34;https://doi.org/10.1087/20120404&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1087/20120404&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-purrr&#34;&gt;
&lt;p&gt;Henry, Lionel, and Hadley Wickham. 2017. &lt;em&gt;Purrr: Functional Programming Tools&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=purrr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=purrr&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Meadows_2016&#34;&gt;
&lt;p&gt;Meadows, Alice. 2016. “Everything You Ever Wanted Know About ORCID: . . . But Were Afraid to Ask.” &lt;em&gt;College &amp;amp; Research Libraries News&lt;/em&gt; 77 (1). American Library Association: 23–30. &lt;a href=&#34;https://doi.org/10.5860/crln.77.1.9428&#34; class=&#34;uri&#34;&gt;https://doi.org/10.5860/crln.77.1.9428&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-usethis&#34;&gt;
&lt;p&gt;Wickham, Hadley, and Jennifer Bryan. 2018. &lt;em&gt;Usethis: Automate Package and Project Setup&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=usethis&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=usethis&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Youtie_2017&#34;&gt;
&lt;p&gt;Youtie, Jan, Stephen Carley, Alan L. Porter, and Philip Shapira. 2017. “Tracking Researchers and Their Outputs: New Insights from ORCIDs.” &lt;em&gt;Scientometrics&lt;/em&gt; 113 (1). Springer Nature: 437–53. &lt;a href=&#34;https://doi.org/10.1007/s11192-017-2473-0&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1007/s11192-017-2473-0&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://members.orcid.org/api/tutorial/search-orcid-registry&#34; class=&#34;uri&#34;&gt;https://members.orcid.org/api/tutorial/search-orcid-registry&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt; This example applies code in &lt;a href=&#34;https://jennybc.github.io/purrr-tutorial/ls13_list-columns.html&#34;&gt;Jenny Bryans purrr tutorial&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Unnest does take an argument &lt;code&gt;.drop&lt;/code&gt; but I have failed to persuade that to work as I had hoped.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Separating and Trimming Messy Data the Tidy Way</title>
      <link>/dealing-with-concatenated-data-fields-in-r/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/dealing-with-concatenated-data-fields-in-r/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;When working with table data from the scientific or patent literature, it is extremely common to find that columns contain concatenated data. That is, they contain multiple entries with a semicolon as a separator. Data of this type is not tidy &lt;span class=&#34;citation&#34;&gt;(Wickham 2014)&lt;/span&gt;. What we commonly want to do is to separate the data out as the basis for counting. However, extra white space can have a major impact on any counts of this data if it is not recognised and dealt with. We will go through this step by step using a simple example and then scale up to a real world example.&lt;/p&gt;
&lt;p&gt;Here is a simple example of a table containing a column with concatenated data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
messy &amp;lt;- tibble::tibble(messy = c(&amp;quot;this is not the; messiest&amp;quot;, 
                                  &amp;quot;messy data column; in the world&amp;quot;, 
                                  &amp;quot;it&amp;#39;s just; a; tribute&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we try to count this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;messy %&amp;gt;% 
  count(messy) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
it’s just; a; tribute
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column; in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the; messiest
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We get three results when of course actually what we want is a count of the concatenated data points in the column. We can handle this easily with the &lt;code&gt;tidyr::separate_rows&lt;/code&gt; function in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;messy %&amp;gt;% 
  separate_rows(messy, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  count(messy) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messiest
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
tribute
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
it’s just
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Simples… as our friendly local meerkat might say. But let’s look at what happens if we double up our entries and imagine that two different people had written out the same thing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;messy &amp;lt;- tibble::tibble(messy = c(&amp;quot;this is not the; messiest&amp;quot;, 
                                  &amp;quot;messy data column; in the world&amp;quot;, 
                                  &amp;quot;it&amp;#39;s just; a; tribute&amp;quot;, 
                                  &amp;quot; this is not the; messiest&amp;quot;, 
                                  &amp;quot; messy data column;  in the world&amp;quot;, 
                                  &amp;quot;it&amp;#39;s just; a; tribute&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s try again. We are innocently expecting a count of 2 for the repeated words and phrases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;messy %&amp;gt;% 
  separate_rows(messy, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  count(messy) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messiest
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
tribute
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
it’s just
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is not adding up correctly because while the two versions appear to be identical there are subtle differences… involving spaces introduced by our mysterious second person. This is a simple case so maybe you spotted them. When using R you will often want to try using &lt;code&gt;str()&lt;/code&gt;, the equivalent in a language such as Python, or stare very hard at the screen in Excel.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(messy)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    6 obs. of  1 variable:
##  $ messy: chr  &amp;quot;this is not the; messiest&amp;quot; &amp;quot;messy data column; in the world&amp;quot; &amp;quot;it&amp;#39;s just; a; tribute&amp;quot; &amp;quot; this is not the; messiest&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s hard to read but we can see a white space at the start of &lt;code&gt;&amp;quot; this is not the messiest&amp;quot;&lt;/code&gt;. This though helps makes the point that when dealing with thousands of data points extra white space can be really hard to spot in R, Excel or anything else.&lt;/p&gt;
&lt;p&gt;We can understand this more clearly by using a quick logical test in R to test whether two strings are identical or not.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;&amp;quot;this is messy&amp;quot; == &amp;quot; this is messy&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason for this is that in testing whether the strings are identical R (and anything else) will match all characters, including white space.&lt;/p&gt;
&lt;p&gt;If you work with text based data extra white space appears in the data all the time after separation, mainly in the form of leading white space as we will see below.&lt;/p&gt;
&lt;p&gt;The solution is simple, we trim the white space on both sides. In R we can do this using either the &lt;code&gt;stringr&lt;/code&gt; function &lt;code&gt;str_trim&lt;/code&gt; or the base R function &lt;code&gt;trimws&lt;/code&gt;. We’ll use &lt;code&gt;stringr&lt;/code&gt; here because it is a reminder of how useful this &lt;code&gt;tidyverse&lt;/code&gt; package is.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;messy %&amp;gt;% separate_rows(messy, sep = &amp;quot;;&amp;quot;) %&amp;gt;%
  mutate(messy = str_trim(messy, side = &amp;quot;both&amp;quot;)) %&amp;gt;% 
  count(messy) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
it’s just
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messiest
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
tribute
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We use a call to &lt;code&gt;dplyr::mutate&lt;/code&gt; and then a call to &lt;code&gt;stringr str_trim&lt;/code&gt; to trim the white space on both sides of the separated strings and then overwrite the column in place.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;str_trim&lt;/code&gt; and the base R &lt;code&gt;trimws&lt;/code&gt; have arguments for where to trim white space. In the case of &lt;code&gt;stringr&lt;/code&gt; it is &lt;code&gt;side =&lt;/code&gt; and with &lt;code&gt;trimws&lt;/code&gt; it is &lt;code&gt;which =&lt;/code&gt;. As these are general functions there may be situations where you will want to trim either the leading (left) or the trailing (right) spaces. If you are working with metadata from the scientific literature (such as Web of Science or Crossref) or with patent data my recommendation is to always trim on both sides unless you have a good reason not to.&lt;/p&gt;
&lt;p&gt;We now have a piece of code that will work for just about anything where white space is left over. We normally want to turn that into a function that we can use over and over again. One reason the &lt;code&gt;tidyverse&lt;/code&gt; set of packages are so popular is that they are so easy to use. But, if we try and put the code above into a function it won’t work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fun &amp;lt;- function(df, col, sep){
  df %&amp;gt;% tidyr::separate_rows(col, sep = sep) %&amp;gt;% 
    dplyr::mutate(col = stringr::str_trim(col, side = &amp;quot;both&amp;quot;)) %&amp;gt;% 
    dplyr::count(col)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fun(messy, messy, sep = &amp;quot;;&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will get a message that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: &lt;code&gt;col&lt;/code&gt; must evaluate to column positions or names, not a list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we try quoting the “messy” col it appears to work but instead counts the number of entries. We can go around the houses… and go slightly bananas in the process… trying to fix this only to run into mysterious problem after problem. The reason for this is that &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; use non standard evaluation (tidy evaluation) with the result that R does not know how to evaluate it. We need to start getting to grips with tidy evaluation to get our code to work in a function. A whole bunch of very useful resources on that have been compiled by Mara Averick &lt;a href=&#34;https://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;here&lt;/a&gt;. One solution, bearing in mind that there may well be a better one, is this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separate_rows_trim &amp;lt;- function(df, col, sep){
  col &amp;lt;- enquo(col)
  df %&amp;gt;% tidyr::separate_rows(!!col, sep = sep) %&amp;gt;% 
    dplyr::mutate(!!col := stringr::str_trim(!!col, side = &amp;quot;both&amp;quot;)) %&amp;gt;% 
    dplyr::count(!!col := !!col, sort = TRUE) %&amp;gt;% 
    tidyr::drop_na(!!col)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we use bang bang &lt;code&gt;!!&lt;/code&gt; to tell R when to evaluate col with a bit of help from &lt;code&gt;:=&lt;/code&gt; from &lt;code&gt;rlang&lt;/code&gt;. To actually get to grips with tidy evaluation I recommend Mara Avericks compilation &lt;a href=&#34;https://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;here&lt;/a&gt;. For a much deeper dive and highly illuminating read try the &lt;a href=&#34;https://adv-r.hadley.nz/meta.html&#34;&gt;metaprogramming chapter of Hadley Wickham’s forthcoming 2nd edition of Advanced R&lt;/a&gt;. For the moment we can move on.&lt;/p&gt;
&lt;p&gt;Let’s try again.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;separate_rows_trim(messy, messy, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  kable() %&amp;gt;% 
  kable_styling()&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
n
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
a
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
in the world
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
it’s just
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messiest
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
messy data column
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
this is not the
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
tribute
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We now have a reusable function.&lt;/p&gt;
&lt;p&gt;This toy example introduces the importance of trimming white space when working with data that has been separated out. Otherwise bad things will happen when you start to count. To finish off let’s use some real world data from a patent dataset to illustrate this.&lt;/p&gt;
&lt;div id=&#34;scaling-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Scaling Up&lt;/h3&gt;
&lt;p&gt;This article is part of work in progress on the &lt;a href=&#34;https://github.com/wipo-analytics&#34;&gt;WIPO Patent Analytics Handbook&lt;/a&gt;. Patent data is simultaneously really well organised and really messy… with many concatenated columns containing data of varying lengths. In addition a single data set will often compile records from different patent databases. This leads to the same problem we encountered above where a mysterious second person types exactly the same thing in a slightly different way. This is really common with names such as applicants or inventors.&lt;/p&gt;
&lt;p&gt;Here we will use the &lt;a href=&#34;https://poldham.github.io/drones/&#34;&gt;drones dataset&lt;/a&gt;, a new work in progress dataset of patent data involving drone technology. As it’s a big dataset we will just use the applicants field with 18,970 rows.&lt;/p&gt;
&lt;p&gt;If you would like to explore the drones dataset try this. First make sure you have &lt;code&gt;devtools&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;devtools&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then install from github with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;poldham/drones&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use the applicants table. This contains a column called applicants_cleaned that I have previously mainly cleaned up.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(drones)
applicants %&amp;gt;% 
  select(applicants_cleaned)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,970 x 1
##    applicants_cleaned                         
##    &amp;lt;chr&amp;gt;                                      
##  1 SHENZHEN HUBSAN TECHNOLOGY CO. LTD.        
##  2 Intel Corporation                          
##  3 YOKOGAWA ELECTRIC CORPORATION              
##  4 NETWORK PERFORMANCE RESEARCH GROUP LLC     
##  5 NETWORK PERFORMANCE RESEARCH GROUP LLC     
##  6 Choi Hae-Yong                              
##  7 Ziva Corporation                           
##  8 WiTricity Corporation                      
##  9 Thales                                     
## 10 International Business Machines Corporation
## # ... with 18,960 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can only see one case of a semi colon in this case but we can quickly get an idea of how many there are with &lt;code&gt;str_count&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;applicants %&amp;gt;% 
  select(applicants_cleaned) %&amp;gt;% 
  str_count(., pattern = &amp;quot;;&amp;quot;) %&amp;gt;% 
  kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
x
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5916
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Creating a count of the number of separators per record reveals that the maximum number of semicolons is 20.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;applicants %&amp;gt;% 
  select(applicants_cleaned) %&amp;gt;% 
  mutate(sepcount = str_count(applicants_cleaned, &amp;quot;;&amp;quot;)) %&amp;gt;% 
  drop_na(applicants_cleaned) %&amp;gt;% 
  filter(sepcount == max(sepcount)) %&amp;gt;% 
  select(sepcount) %&amp;gt;% 
  kable()&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
sepcount
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let’s try counting the data up both ways to join them together. We’ll limit this to the top ten.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(drones)
df1 &amp;lt;- applicants %&amp;gt;% 
  separate_rows(applicants_cleaned, sep = &amp;quot;;&amp;quot;) %&amp;gt;%
  drop_na(applicants_cleaned) %&amp;gt;% 
  count(applicants_cleaned, sort = TRUE) %&amp;gt;% 
  rename(messy = n) %&amp;gt;% 
  .[1:10,] %&amp;gt;% 
  mutate(applicants_cleaned = str_trim(applicants_cleaned, side = &amp;quot;both&amp;quot;))

df2 &amp;lt;- separate_rows_trim(applicants, applicants_cleaned, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  drop_na(applicants_cleaned) %&amp;gt;% 
  rename(tidy = n) %&amp;gt;% 
  .[1:10,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we join these two tables together we will be able to calculate the differences between them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df3 &amp;lt;- merge(df1, df2, by = &amp;quot;applicants_cleaned&amp;quot;) %&amp;gt;% 
  arrange(desc(tidy)) %&amp;gt;%
  mutate(percent = (tidy - messy) / tidy * 100) %&amp;gt;% 
  mutate(percent = formatC(percent, digits = 2))

df3 %&amp;gt;% 
  kable(&amp;quot;html&amp;quot;, escape = F) %&amp;gt;% 
  kable_styling(position = &amp;quot;center&amp;quot;) %&amp;gt;% 
  column_spec(4, width = 8)&lt;/code&gt;&lt;/pre&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
applicants_cleaned
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
messy
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
tidy
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
percent
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
QUALCOMM Incorporated
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
483
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
498
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Thales
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
322
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
382
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
16
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
HON HAI PRECISION INDUSTRY CO LTD
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
345
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
345
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
QINGHUA UNIV
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
343
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
343
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Samsung Electronics Co. Ltd.
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
207
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
213
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
2.8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
International Business Machines Corporation
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
184
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
193
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
4.7
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
THE BOEING COMPANY
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
177
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
181
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
2.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
GOOGLE INC.
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
165
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
167
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
1.2
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Elwha LLC
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
161
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
166
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
SONY CORPORATION
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
144
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
148
&lt;/td&gt;
&lt;td style=&#34;text-align:left;width: 8; &#34;&gt;
2.7
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can see from the percentage scores that there is significant variance in the counts, with a maximum of 16% variance in the case of Thales. The reason this matters whether using patent data or data from the scientific literature is that any counts that do not recognise the white space problem will be wrong… and generally quite seriously wrong. Typically with patent data the most observable change is movement in the top rankings. But where precision in counting is important, such as capturing all documents linked to a company in a highly competitive field, that can really really matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Round Up&lt;/h3&gt;
&lt;p&gt;When working with data from the scientific literature or patent data in spreadsheets or data frames we will always want to separate out the data in order to count it, whether in R, Python or using tools such as &lt;a href=&#34;https://wipo-analytics.github.io/open-refine.html&#34;&gt;Open Refine&lt;/a&gt;. The act of separating data onto new rows is however only one step with trimming white space a key step to arrive at accurate counts.&lt;/p&gt;
&lt;p&gt;So ends this episode of “fun with white space and semicolons”. Thanks for reading!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level3 unnumbered&#34;&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-formattable&#34;&gt;
&lt;p&gt;Ren, Kun, and Kenton Russell. 2016. &lt;em&gt;Formattable: Create ’Formattable’ Data Structures&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=formattable&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=formattable&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Wickham_2014&#34;&gt;
&lt;p&gt;Wickham, Hadley. 2014. “Tidy Data.” &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 59 (10). Foundation for Open Access Statistic. &lt;a href=&#34;https://doi.org/10.18637/jss.v059.i10&#34; class=&#34;uri&#34;&gt;https://doi.org/10.18637/jss.v059.i10&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-tidyverse&#34;&gt;
&lt;p&gt;———. 2017. &lt;em&gt;Tidyverse: Easily Install and Load the ’Tidyverse’&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=tidyverse&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=tidyverse&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-stringr&#34;&gt;
&lt;p&gt;———. 2018. &lt;em&gt;Stringr: Simple, Consistent Wrappers for Common String Operations&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=stringr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=stringr&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-dplyr&#34;&gt;
&lt;p&gt;Wickham, Hadley, Romain François, Lionel Henry, and Kirill Müller. 2018. &lt;em&gt;Dplyr: A Grammar of Data Manipulation&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=dplyr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=dplyr&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-tidyr&#34;&gt;
&lt;p&gt;Wickham, Hadley, and Lionel Henry. 2018. &lt;em&gt;Tidyr: Easily Tidy Data with ’Spread()’ and ’Gather()’ Functions&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=tidyr&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=tidyr&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-kableExtra&#34;&gt;
&lt;p&gt;Zhu, Hao. 2018. &lt;em&gt;KableExtra: Construct Complex Table with ’Kable’ and Pipe Syntax&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=kableExtra&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=kableExtra&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>API Resources for the Scientific Literature in R and Python</title>
      <link>/api-resources-for-scientific-literature/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/api-resources-for-scientific-literature/</guid>
      <description>&lt;p&gt;This short post provides details on some of the main APIs (web services) that can be used to monitor and retrieve data from the scientific literature in either R or Python. We are using these packages and libraries as part of a GIZ supported project with the authorities in Kenya who are responsible for providing research permits. Kenya is famous for its biodiversity and the diversity of its communities. However, there is no single repository of publications arising from research in Kenya. We are looking to use APIs to automate retrieval of publications about Kenya and its biodiversity. Hopefully this should allow us to build an open access virtual repository of publications on Kenya to serve the needs of researchers and the wider community.&lt;/p&gt;
&lt;p&gt;We plan to use three main APIs for the Kenya project. There are many APIs out there but we will focus on those that aggregate data from different sources. I’ll add a few more that are interesting mainly for biodiversity topics.&lt;/p&gt;
&lt;div id=&#34;main-apis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Main APIs&lt;/h2&gt;
&lt;div id=&#34;crossref&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.crossref.org/&#34;&gt;Crossref&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Crossref provides access to metadata on over 96 million scientific publications. It is not a full text search engine although abstracts are increasingly available as are links to full text versions of articles (which may well be paywalled).&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The Crossref API: &lt;a href=&#34;https://github.com/CrossRef/rest-api-doc&#34; class=&#34;uri&#34;&gt;https://github.com/CrossRef/rest-api-doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rcrossref: &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rcrossref&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://pypi.org/project/habanero/&#34; class=&#34;uri&#34;&gt;https://pypi.org/project/habanero/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For lovers of all things Ruby try the Serrano Ruby gem &lt;a href=&#34;https://github.com/sckott/serrano&#34; class=&#34;uri&#34;&gt;https://github.com/sckott/serrano&lt;/a&gt; and &lt;a href=&#34;https://www.rubydoc.info/gems/serrano&#34;&gt;rubydoc version&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rcrossref, python and ruby wrappers were all created by Scott Chamberlain and collaborators at the fantastic &lt;a href=&#34;https://ropensci.org/&#34;&gt;ROpenSci&lt;/a&gt;. Note that searching on crossref is rather limited and so cannot really be used for statistical purposes (the search searches what they have available and that may be quite mixed) BUT crossref is still really useful. In particular it can be used to search for the names of researchers and to retrieve publication details or to enter a list of DOIs.&lt;/p&gt;
&lt;p&gt;A walkthrough on using rcrossref to access the scientific literature for Kenya is available &lt;a href=&#34;https://poldham.github.io/abs/crossref.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For text retrieval and text mining, the &lt;a href=&#34;https://github.com/ropensci/crminer&#34;&gt;crminer&lt;/a&gt; package by Scott Chamberlain is intended to facilitate access to full texts for text mining purposes from Crossref. You will also very probably want to check out Scott’s &lt;a href=&#34;https://github.com/ropensci/fulltext&#34;&gt;fulltext package&lt;/a&gt; for text retrieval from a range of different APIs including some of those listed here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;orcid&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://orcid.org/&#34;&gt;ORCID&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ORCID provides persistent unique identifiers for researchers and access to their public profiles. Where a researcher publishes an article with a DOI that is covered by Crossref, that DOI should automatically (with luck) be added to the researcher’s public profile. Note that you can only access the parts of an ORCID profile that a researcher chooses to make public.&lt;/p&gt;
&lt;p&gt;An example of an ORCID public profile is mine: &lt;a href=&#34;https://orcid.org/0000-0002-1013-4390&#34; class=&#34;uri&#34;&gt;https://orcid.org/0000-0002-1013-4390&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lists of publications can be retrieved using the API and can therefore be used to automate the creation of a repository of publications for a country without needing to chase the researcher through email.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;ORCID API home page for creating an app: &lt;a href=&#34;https://orcid.org/organizations/integrators/API&#34; class=&#34;uri&#34;&gt;https://orcid.org/organizations/integrators/API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ORCID Python library: &lt;a href=&#34;https://github.com/ORCID/python-orcid&#34; class=&#34;uri&#34;&gt;https://github.com/ORCID/python-orcid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ORCID R Package: &lt;a href=&#34;https://github.com/ropensci/rorcid&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rorcid&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that when using a remote server the OAuth process (using the rorcid package) can be difficult because the API triggers a browser login. A way around this needs to be found.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;core.ac.uk&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://core.ac.uk/&#34;&gt;core.ac.uk/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Core is a full text database that aggregates scientific publications in open access repositories. It can be difficult to find due to the name. But it provides access to over 131 million open access articles. Taking Kenya as an example, a quick search for Kenya reveals 103,310 publications that contain Kenya somewhere in the text. The &lt;a href=&#34;https://core.ac.uk/services&#34;&gt;services page&lt;/a&gt; provides details of the web service, what you can do and how to get started. You will need a free API key from &lt;a href=&#34;https://core.ac.uk/api-keys/register&#34;&gt;here&lt;/a&gt;. Note the quotas and throttle accordingly.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Python notebook with examples: &lt;a href=&#34;https://github.com/oacore/or2016-api-demo&#34; class=&#34;uri&#34;&gt;https://github.com/oacore/or2016-api-demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;R Package rcoreaoa: &lt;a href=&#34;https://github.com/ropensci/rcoreoa&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rcoreoa&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-apis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other APIs&lt;/h2&gt;
&lt;p&gt;The resources above should capture a lot. But here are some other major APIs that you may want to use.&lt;/p&gt;
&lt;div id=&#34;springer-biomed-central-api&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.biomedcentral.com/getpublished/indexing-archiving-and-access-to-data&#34;&gt;Springer BioMed Central API&lt;/a&gt;&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;BMC R package &lt;a href=&#34;https://github.com/ropensci/bmc&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/bmc&lt;/a&gt;. This package is not on CRAN. To install it use:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;devtools&amp;quot;)
devtools::install_github(&amp;quot;ropensci/bmc&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I couldn’t easily identify a Python library or gist. If you know of one please add to the comments below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ncbi-pubmed&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/&#34;&gt;NCBI PubMed&lt;/a&gt;&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/ropensci/rentrez&#34;&gt;rentrez&lt;/a&gt; package and &lt;a href=&#34;https://ropensci.org/tutorials/rentrez_tutorial/&#34;&gt;walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/cran/easyPubMed&#34;&gt;easyPubMed&lt;/a&gt; package in R:
See the walkthrough by &lt;a href=&#34;https://cran.r-project.org/web/packages/easyPubMed/vignettes/easyPM_vignette_html.html&#34;&gt;Daniel Fantini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For Python there is &lt;a href=&#34;https://pypi.org/project/pubmed-lookup/&#34;&gt;pubmed-lookup&lt;/a&gt; and a gist for searching PubMed with Biopython is &lt;a href=&#34;https://pypi.org/project/pubmed-lookup/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;public-library-of-science&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.plos.org/&#34;&gt;Public Library of Science&lt;/a&gt;&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Rplos package &lt;a href=&#34;https://github.com/ropensci/rplos&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rplos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For Python a &lt;a href=&#34;https://gist.github.com/drewbuschhorn/1077318&#34;&gt;gist&lt;/a&gt; is available providing examples of the use of the sunburnt library&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of my walkthroughs, now a bit old but still working, for rplos is available &lt;a href=&#34;https://www.pauloldham.net/rplos-walkthrough/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;biorxiv&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;a href=&#34;https://www.biorxiv.org/&#34;&gt;bioRxiv&lt;/a&gt;&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For R the &lt;a href=&#34;https://github.com/ropensci/fulltext&#34;&gt;fulltext package&lt;/a&gt; provides access to the texts of bioRxiv which has an RSS feed but does not appear to have an API.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wasn’t able to spot anything for Python and maybe its a matter of wrangling the RSS feed, so if you know of anything please add a comment.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.biorxiv.org/alertsrss&#34;&gt;Alerts/RSS&lt;/a&gt; page provides details of the most recent 30 posts across categories and there is a Twitter feed by subject that people have tried to do interesting things with by creating a twitter bots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;I hope you found this quick list useful. If you know of any other good resources in either R or Python please feel welcome to add a comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2 unnumbered&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-crminer&#34;&gt;
&lt;p&gt;Chamberlain, Scott. 2017a. &lt;em&gt;Crminer: Fetch ’Scholary’ Full Text from ’Crossref’&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=crminer&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=crminer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rcoreoa&#34;&gt;
&lt;p&gt;———. 2017b. &lt;em&gt;Rcoreoa: Client for the Core Api&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=rcoreoa&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=rcoreoa&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-fulltext&#34;&gt;
&lt;p&gt;———. 2018a. &lt;em&gt;Fulltext: Full Text of ’Scholarly’ Articles Across Many Data Sources&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=fulltext&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=fulltext&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rorcid&#34;&gt;
&lt;p&gt;———. 2018b. &lt;em&gt;Rorcid: Interface to the ’Orcid.org’ ’Api’&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=rorcid&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=rorcid&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rcrossref&#34;&gt;
&lt;p&gt;Chamberlain, Scott, Carl Boettiger, Ted Hart, and Karthik Ram. 2018. &lt;em&gt;Rcrossref: Client for Various ’Crossref’ ’Apis’&lt;/em&gt;. &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rcrossref&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rplos&#34;&gt;
&lt;p&gt;Chamberlain, Scott, Carl Boettiger, and Karthik Ram. 2017. &lt;em&gt;Rplos: Interface to the Search ’Api’ for ’Plos’ Journals&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=rplos&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=rplos&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-easyPubMed&#34;&gt;
&lt;p&gt;Fantini, Damiano. 2018. &lt;em&gt;EasyPubMed: Search and Retrieve Scientific Publication Records from Pubmed&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=easyPubMed&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=easyPubMed&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-rentrez&#34;&gt;
&lt;p&gt;Winter, David. 2018. &lt;em&gt;Rentrez: ’Entrez’ in R&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=rentrez&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=rentrez&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating A Bibliography with rcrossref</title>
      <link>/creating-a-bibliography-with-rcrossref/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/creating-a-bibliography-with-rcrossref/</guid>
      <description>&lt;p&gt;In this article we will look at how to create a bibliography using the &lt;code&gt;rcrossref&lt;/code&gt; package in R with RStudio. To help us get started we will also look at how to reference any R packages that you use in your work with &lt;code&gt;knitr&lt;/code&gt;. The article is part of work in progress for the WIPO Handbook on Patent Analytics. Comments and suggestions are welcome.&lt;/p&gt;
&lt;p&gt;Many of us will have spent an unreasonable amount of our time struggling to create bibliographies for a thesis, publication or reports. Software such as Endnote (Clarivate Analytics), Mendeley (Elsevier) and Zotero provide options for creating and managing bibliographic data. From experience, this generally involves masses of hours fiddling around with reference formats and so on before and after submission for publication.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.crossref.org/&#34;&gt;Crossref&lt;/a&gt; is a non-profit organisation that provides metadata on over 96 million publications in the form of information on the authors, titles, organisations, funding and so on. It is not a full text database but is increasingly providing access to abstracts and links to full texts.&lt;/p&gt;
&lt;p&gt;Crossref can be accessed through an &lt;a href=&#34;https://github.com/CrossRef/rest-api-doc&#34;&gt;API&lt;/a&gt;. For R users, Scott Chamberlain, Carl Boettiger, Ted Hart and Karthik Ram have developed the &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34;&gt;rcrossref&lt;/a&gt; package as part of the ever growing suite of &lt;a href=&#34;https://ropensci.org/&#34;&gt;ROpenSci&lt;/a&gt; packages.&lt;/p&gt;
&lt;p&gt;To get started we will install the packages we are going to need and then look at how to quickly create a bibliography file for packages we are going to use. Once we have a grip on that we will use &lt;code&gt;rcrossref&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;packages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Packages&lt;/h3&gt;
&lt;p&gt;If you are new to R and RStudio then first we need to get set up. To install R for your operating system choose the appropriate option &lt;a href=&#34;http://cran.rstudio.com/&#34;&gt;here&lt;/a&gt; and install R. Then download the free RStudio desktop for your system &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You should already have knitr installed with RStudio but in the wildly unlikely event that you don’t then run this line.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;knitr&amp;quot;)
install.packages(&amp;quot;devtools&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use the development version of rcrossref for reasons we will explain below. You will need devtools (above) installed to do that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;ropensci/rcrossref&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(knitr)
library(rcrossref)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-bibliography-file&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating A Bibliography File&lt;/h3&gt;
&lt;p&gt;One of the puzzling things about getting started with creating bibliographies in RStudio… is how to create a bibliography file. So, as a warm up let’s do that.&lt;/p&gt;
&lt;p&gt;Yihui Xie has made it incredibly easy to create a bibliography in &lt;a href=&#34;http://www.bibtex.org/&#34;&gt;bibtex&lt;/a&gt; format with the &lt;a href=&#34;https://yihui.name/knitr/&#34;&gt;knitr&lt;/a&gt; package. Let’s create a file that contains packages mentioned in this article. The &lt;code&gt;write_bib()&lt;/code&gt; function allows us to add in a vector of package names, and to specify the path and name for the file using &lt;code&gt;file =&lt;/code&gt;. In this case I am creating a file called packages.bib in the content section of my blogdown site. I’ll break it up for visibility.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::write_bib(c(&amp;quot;devtools&amp;quot;, &amp;quot;base&amp;quot;, &amp;quot;rcrossref&amp;quot;, &amp;quot;blogdown&amp;quot;, &amp;quot;bookdown&amp;quot;, &amp;quot;knitr&amp;quot;,
                   &amp;quot;rmarkdown&amp;quot;, &amp;quot;citr&amp;quot;, &amp;quot;bibtex&amp;quot;), width = 60, 
                 file = &amp;quot;/Users/pauloldham17inch/blog/content/post/packages.bib&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This takes citation information from the description section of the packages. When you run this chunk it is normal to see a bunch of warning messages such as &lt;code&gt;DESCRIPTION file of package ‘ggmap’could not determine year for ‘ggmap’ from package&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;It is that easy. All we need to do is identify where we want to save the file and then try to remember the packages that we use regularly.&lt;/p&gt;
&lt;p&gt;If we take a quick look at the content we will see the following.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;@Manual{R-rcrossref,
  title = {rcrossref: Client for Various &amp;#39;CrossRef&amp;#39; &amp;#39;APIs&amp;#39;},
  author = {Scott Chamberlain and Carl Boettiger and Ted Hart
    and Karthik Ram},
  note = {R package version 0.8.1.9513},
  url = {https://github.com/ropensci/rcrossref},
  year = {2018},
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we have an easy way to create a bibliography file, hurrah! Let’s move on to rcrossref.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-rcrossref-addin&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The rcrossref Addin&lt;/h3&gt;
&lt;p&gt;RStudio includes a button at the top of the screen called Addins. It’s here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/rcrossref/addin.gif&#34; width=&#34;400px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The standard version of rcrossref includes an addin that allows you to search for references using dois (document identifiers). I’ll come back to that. However, the add in for the development version does more thanks to great work by &lt;a href=&#34;https://github.com/haozhu233&#34;&gt;Hao Zhu&lt;/a&gt; of &lt;a href=&#34;https://github.com/haozhu233/giphyr&#34;&gt;giphyr&lt;/a&gt; fame. In response to a request on github &lt;a href=&#34;https://github.com/ropensci/rcrossref/issues/148&#34;&gt;here&lt;/a&gt;, Hao Zhu created a new version of the rcrossref addin that we will use now.&lt;/p&gt;
&lt;p&gt;From the Addins menu select Add Rcrossref Citations and a panel will open up. In the development version we can type in the name of an article and then Add to My Citations and Done when we are finished as we see in this example. I’ll look up one I can remember.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/rcrossref/addarticle.gif&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also use document identifiers. Here is one of mine on the completely bonkers subject of global climate engineering or geoengineering with doi: 10.1098/rsta.2014.0065.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/rcrossref/doi.gif&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The rcrossref add in creates a new file in your RStudio project directory (assuming you are using projects which is a very good thing), called crossref.bib. Once this file is created any time that you use the Addin it will add references rather than overwrite the file. So, this can be a very good way to build up a bibliography using rcrossref.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-citations-in-rmarkdown&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding citations in Rmarkdown&lt;/h3&gt;
&lt;p&gt;To add a citation, using the example above, we simply use &lt;code&gt;[@R-rcrossref]&lt;/code&gt;, as explained by Yihui &lt;a href=&#34;https://bookdown.org/yihui/bookdown/citations.html&#34;&gt;here&lt;/a&gt;. Note when inserting the reference we skip the type (e.g. Manual, Article etc) at the start of the crossref.bib entry. The result will look something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rcrossref &lt;span class=&#34;citation&#34;&gt;(Chamberlain et al. 2018)&lt;/span&gt; is a great package for accessing data for a bibliography or for larger scale bibliometrices. In 2014 Paul Oldham and his co-authors published an article on the completely mad subject of global climate engineering that succeeded in exciting consipiracy theorists using the #contrails and #chemtrails hashtags on twitter &lt;span class=&#34;citation&#34;&gt;(Oldham et al. 2014)&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is ridiculously easy to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-the-bibliography&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding the Bibliography&lt;/h3&gt;
&lt;p&gt;We now have two bibliographies, one called packages.bib and one called crossref.bib. To get them to render when we knit the document (or build for blogdown or bookdown users… no knitting please) we need to put them in the header or YAML of the rmarkdown document. In all cases that looks like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bibliography: [packages.bib, crossref.bib]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we knit or build the document the citations will show up in the text itself and at the bottom of the document. To mark the start of the bibliography simply create a header such as &lt;code&gt;#References&lt;/code&gt; as the final line of your document.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;going-further&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Going Further&lt;/h3&gt;
&lt;p&gt;Thanks to the team behind &lt;code&gt;rcrossref&lt;/code&gt; you now have over 96 million references at your finger tips. Many thanks are also due to Yihui Xie and the team behind &lt;code&gt;knitr&lt;/code&gt;, &lt;code&gt;bookdown&lt;/code&gt; and &lt;code&gt;blogdown&lt;/code&gt; for their really great work&lt;/p&gt;
&lt;p&gt;You can read more about bibliographies on the RStudio site &lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html&#34;&gt;here&lt;/a&gt;. Yihui Xie’s &lt;a href=&#34;https://yihui.name/knitr/&#34;&gt;knitr website&lt;/a&gt; and &lt;a href=&#34;https://www.amazon.com/dp/1498716962/ref=cm_sw_su_dp&#34;&gt;book&lt;/a&gt; are great resources &lt;span class=&#34;citation&#34;&gt;(Xie 2016a)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Bookdown users can find more information in the electronic version of the bookdown book right &lt;a href=&#34;https://bookdown.org/yihui/bookdown/citations.html&#34;&gt;here&lt;/a&gt; &lt;span class=&#34;citation&#34;&gt;(Xie 2016b)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For blogdown users: &lt;a href=&#34;https://github.com/apreshill&#34;&gt;Alison Presmanes Hill&lt;/a&gt;, a co-author of blogdown, has written a very useful guide to citations in the minimal blogdown demo &lt;a href=&#34;https://github.com/rbind/blogdown-demo/blob/master/content/post/2017-08-28-adding-citations-to-posts.Rmd&#34;&gt;here&lt;/a&gt; that I used to write this article. It covers subjects such as using &lt;code&gt;nocite:&lt;/code&gt; in your YAML to avoid academic style citations for packages in the text. In the references below you will see that there all the packages used are included but without inline citation. You will very probably want to read the excellent blogdown book &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;here&lt;/a&gt; as well &lt;span class=&#34;citation&#34;&gt;(Xie, Thomas, and Hill 2017)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Packages to help you navigate citations include &lt;a href=&#34;https://github.com/ropensci/RefManageR&#34;&gt;&lt;code&gt;RefManageR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/crsh/citr&#34;&gt;&lt;code&gt;citr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/romainfrancois/bibtex&#34;&gt;&lt;code&gt;bibtex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ropensci/bib2df&#34;&gt;`bib2df&lt;/a&gt; you may well want to check them out. bib2df may be useful for cleaning up bibliography entries as it provides functions to convert a .bib file to a data.frame and back again.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; This list is not comprehensive and so if you know of any more please feel welcome to mention them below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-rcrossref&#34;&gt;
&lt;p&gt;Chamberlain, Scott, Carl Boettiger, Ted Hart, and Karthik Ram. 2018. &lt;em&gt;Rcrossref: Client for Various ’Crossref’ ’Apis’&lt;/em&gt;. &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rcrossref&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Oldham_2014&#34;&gt;
&lt;p&gt;Oldham, P., B. Szerszynski, J. Stilgoe, C. Brown, B. Eacott, and A. Yuille. 2014. “Mapping the Landscape of Climate Engineering.” &lt;em&gt;Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences&lt;/em&gt; 372 (2031). The Royal Society: 20140065–5. &lt;a href=&#34;https://doi.org/10.1098/rsta.2014.0065&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1098/rsta.2014.0065&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Dynamic_2016&#34;&gt;
&lt;p&gt;Xie, Yihui. 2016a. &lt;em&gt;Dynamic Documents with R and Knitr&lt;/em&gt;. Chapman; Hall/CRC. &lt;a href=&#34;https://doi.org/10.1201/b15166&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1201/b15166&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-Xie_2016&#34;&gt;
&lt;p&gt;———. 2016b. &lt;em&gt;Bookdown&lt;/em&gt;. CRC Press. &lt;a href=&#34;https://doi.org/10.1201/9781315204963&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1201/9781315204963&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-blogdown_2017&#34;&gt;
&lt;p&gt;Xie, Yihui, Amber Thomas, and Alison Presmanes Hill. 2017. &lt;em&gt;Blogdown&lt;/em&gt;. Chapman; Hall/CRC. &lt;a href=&#34;https://doi.org/10.1201/9781351108195&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1201/9781351108195&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;At the time of writing install using devtools::install_github(“ottlngr/bib2df”)&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Counting Patent First Filings the Tidy Way with R</title>
      <link>/counting-patent-first-filings/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/counting-patent-first-filings/</guid>
      <description>&lt;p&gt;This article provides an in depth introduction to counting patent first filings or priority counts. It is a work in progress chapter for the WIPO Patent Analytics Handbook focusing on advanced patent analytics and builds on the introductory &lt;a href=&#34;https://wipo-analytics.github.io/&#34;&gt;WIPO Manual on Open Source Patent Analytics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Counting first filings is an important subject for patent statistics because the first filing of a patent application marks the date that is closest to investment in research and development leading to the invention. For this reason it is widely used by economists and statisticians as a proxy indicator for the analysis of trends in science and technology.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; For patent applicants, the first filing, and the priority date that defines it, can be the difference between success and failure. An applicant with priority in the filing of an application for the same invention as their competitor will win in a dispute, and potentially win in multiple countries around the world. Millions, and in some cases hundreds of millions, of dollars may ride on who holds priority over an invention.&lt;/p&gt;
&lt;p&gt;For such an important subject, remarkably little has been written on the practical aspects of counting patents by priority or, as is more intuitive, first filings. The international patent priority system has its origins in the &lt;a href=&#34;http://www.wipo.int/treaties/en/ip/paris/summary_paris.html&#34;&gt;1883 Paris Convention for the Protection of Industrial Property&lt;/a&gt; and basically means that inventors in contracting states to the Convention have a twelve month period from the date of filing their invention to file in other contracting states. During that period any filing in a contracting state will be treated as if it was filed on the same date as the original filing and will enjoy priority over other competing claims to the same invention.&lt;/p&gt;
&lt;p&gt;The best existing guide to understanding priority counts is the 2009 &lt;a href=&#34;http://www.oecd.org/sti/inno/oecdpatentstatisticsmanual.htm&#34;&gt;OECD Patent Statistics Manual&lt;/a&gt;. The &lt;a href=&#34;http://www.oecd.org/sti/inno/oecdpatentstatisticsmanual.htm&#34;&gt;OECD Patent Statistics Manual&lt;/a&gt; is an excellent resource but does not focus on practical demonstration. This article focuses on the practical issues involved in counting by priority.&lt;/p&gt;
&lt;p&gt;By the end of this article you will have an understanding of what priority numbers are and how to use them to generate descriptive patent statistics. You will also be aware of the challenges involved in using priority counts and how to address them.&lt;/p&gt;
&lt;p&gt;We will use R inside RStudio because it provides much more flexibility than tools such as Excel. If you are new to R follow the instructions below on installing R and RStudio. If you are familiar with R but new to patent data, welcome to the challenge. We will use a tidy approach to working with the data and the &lt;code&gt;tidyverse&lt;/code&gt; suite of packages. This allows us to write code that is easy to read and to be transparent about the steps we are taking.&lt;/p&gt;
&lt;div id=&#34;installing-r-and-rstudio&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Installing R and RStudio&lt;/h3&gt;
&lt;p&gt;To install R for your operating system choose the appropriate option &lt;a href=&#34;http://cran.rstudio.com/&#34;&gt;here&lt;/a&gt; and install R. Then download the free RStudio desktop for your system &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34;&gt;here&lt;/a&gt;. We will be using a suite of packages called the &lt;code&gt;tidyverse&lt;/code&gt; that make it easy to work with data. When you have installed and opened RStudio run this line in your console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next load the library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ──────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 2.2.1.9000     ✔ purrr   0.2.4     
## ✔ tibble  1.4.2          ✔ dplyr   0.7.5     
## ✔ tidyr   0.8.0          ✔ stringr 1.3.1     
## ✔ readr   1.1.1          ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ─────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will now see a bunch of messages as the packages are loaded. You should now be good to go.&lt;/p&gt;
&lt;p&gt;If you would like to learn more about R then try the excellent &lt;a href=&#34;http://www.wipo.int/treaties/en/ip/paris/summary_paris.html&#34;&gt;DataCamp&lt;/a&gt; online courses or read Garrett Grolemund and Hadley Wickham’s &lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;. Learning to do things in R will make a huge difference to your ability to work with patent and other data and to enjoy the support of the R community in addressing new challenges. There is never a better time to start learning to do things in R than right now.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-drones-dataset&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Drones Dataset&lt;/h3&gt;
&lt;p&gt;The drones dataset consists of 18,970 patent publications that contain the words drone or drones somewhere in the text. The dataset is based on a search of the full text patent collections of the United States, the European Patent Office (covering members of the European Patent Convention), the Japan Patent Office, and the Patent Cooperation Treaty (WO) administered by the World Intellectual Property Organisation. The data is based on a search of the commercial &lt;a href=&#34;https://clarivate.com/products/derwent-innovation/&#34;&gt;Clarivate Analytics Derwent Innovations&lt;/a&gt; database which makes it easy to search and download full text data at scales up to 60,000 records at a time.&lt;/p&gt;
&lt;p&gt;We will be working with the drones &lt;code&gt;numbers&lt;/code&gt; set that is confined to just patent numbers in their raw form as downloaded from Derwent Innovation. You can download the dataset &lt;a href=&#34;https://github.com/wipo-analytics/drones_data/blob/master/numbers.csv?raw=true&#34;&gt;here&lt;/a&gt; or import it directly by running the following in your RStudio console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
numbers &amp;lt;- read_csv(&amp;quot;https://github.com/wipo-analytics/drones_data/blob/master/numbers.csv?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;the-priority-number&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The priority number&lt;/h3&gt;
&lt;p&gt;In the table below we can see that we have a dataset consisting of five columns starting with the priority number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,970 x 5
##    priority_number             application_num… family_first family_number
##    &amp;lt;chr&amp;gt;                       &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        
##  1 US2016578323F 2016-09-20    US2016578323F 2… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  2 US14954632A 2015-11-30      US14954632A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  3 US15360203A 2016-11-23      US15360203A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  4 US62203383P 2015-08-10; US… US15454805A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  5 US62200764P 2015-08-04; US… US15263985A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  6 KR201528901A 2015-03-02     US15057264A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  7 US15217944A 2016-07-22; US… US15217944A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  8 US2008100721P 2008-09-27; … US14808174A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  9 FR20142036A 2014-09-12      US14848061A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
## 10 US14970643A 2015-12-16      US14970643A 201… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
## # ... with 18,960 more rows, and 1 more variable: publication_number &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will only be working with the priority number and the application number, but as a general principle it is useful to understand the relationship between these fields which can be simply described as follows.&lt;/p&gt;
&lt;p&gt;priority number &amp;gt; application number &amp;gt; publication number &amp;gt; family members&lt;/p&gt;
&lt;p&gt;We can get a clearer understanding of the relationship between these numbers by looking at the front page of a patent document from our dataset using the popular &lt;a href=&#34;mailto:esp@cenet&#34;&gt;esp@cenet&lt;/a&gt; database. You can access this example &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?FT=D&amp;amp;date=20151210&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&amp;amp;ND=4&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/priority/witricity.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that the front page or biblio of a patent record contains a large amount of information. It is typically this information that is used to generate patent statistics. For our purposes we can see that the priority numbers field consists of one or more priority numbers. We might expect that there would only be one priority number as the original filing for the invention. However that is often not the case as we will discuss below.&lt;/p&gt;
&lt;p&gt;From the front page we can see that if we proceed up from the priority numbers the first priority number in the list exactly matches the application number on the front page. This tells us that this is the first filing for this particular application. This application is then published as US2015357831A1.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; We can clearly see the relationship we described above&lt;/p&gt;
&lt;p&gt;&lt;code&gt;priority number &amp;gt; application number &amp;gt; publication number&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In a separate article we will address family members (patent publications that link to one or more of priority numbers) but these family members can be accessed through the INPADOC Patent Family &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/inpadocPatentFamily?CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&amp;amp;FT=D&amp;amp;ND=4&amp;amp;date=20151210&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&#34;&gt;here&lt;/a&gt; and will include our target publication.&lt;/p&gt;
&lt;p&gt;For the moment however, let’s make sure we have a good understanding of priority numbers.&lt;/p&gt;
&lt;p&gt;The OECD Manual on Patent Statistics describes the Priority number and the priority date as follows&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Priority number. This is the application or publication number of the priority application, if applicable. It makes it possible to identify the priority country, reconstruct patent families, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Priority date. This is the first date of filing of a patent application, anywhere in the world (usually in the applicant’s domestic patent office), to protect an invention. It is the closest to the date of invention. (OECD 2009: 25)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In practice there are other aspects to the priority number that we need to understand&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-priority-numbers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Multiple Priority Numbers&lt;/h3&gt;
&lt;p&gt;As we can see in the example above this record contains multiple priority numbers when intuitively we might have assumed that one invention = one priority number. The patent system does not actually work like that and there are two reasons for this that we need to understand.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Patent applicants frequently file in more than one country&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a simple case there is a single priority number and the application number will be identical to that priority number. We can see this in the first example from our dataset. The priority number and the application number are the same.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
numbers[1,] %&amp;gt;% 
  select(priority_number, application_number)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   priority_number          application_number      
##   &amp;lt;chr&amp;gt;                    &amp;lt;chr&amp;gt;                   
## 1 US2016578323F 2016-09-20 US2016578323F 2016-09-20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the patent system is an international system. A patent applicant may choose to file for patent rights in up to 152 contracting parties to the &lt;a href=&#34;http://www.wipo.int/pct/en/&#34;&gt;Patent Cooperation Treaty&lt;/a&gt; (although applications in all member states is unusual). As the applications are submitted in multiple countries additional priority numbers will appear in the record. An example of this is provided below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/priority/japan.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this case we can see that the earliest priority number is for Japan (JP20150122335 20150617) and the second priority number is for WO (the Patent Cooperation Treaty) and incorporates the country code of the first filing JP into the new priority number (WO2016JP67809 20160615). The Patent Cooperation Treaty is the vehicle through which applicants can submit applications in multiple countries. In this case we can see that the applicant from Japan has chosen to pursue an application in the United States using the Patent Cooperation Treaty (WO) resulting in the application number US201615322008 20160615 filed in 2016 that was then published as &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?FT=D&amp;amp;date=20170518&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&amp;amp;CC=US&amp;amp;NR=2017137104A1&amp;amp;KC=A1&amp;amp;ND=4&#34;&gt;US2017137104A1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From this we might be tempted to assume that the earliest priority will always appear at the front of the list of priorities. However, this assumption is not safe as we will see below where the first filing appears at the end of the list of priorities. We will be on safer ground by identifying the earliest date in the sequence.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Multiple earlier inventions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second situation where we observe multiple priority numbers is cases where multiple earlier applications by the same applicants contribute to the claimed invention. We can see this in the first example above. As an anecdotal observation, the presence of multiple other inventions in the priority field appears to vary by field. Thus, from personal experience, it is uncommon in agriculture, pharmaceuticals and biotechnology but appears to be more common in cases such as computing.&lt;/p&gt;
&lt;p&gt;In the case of &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?FT=D&amp;amp;date=20151210&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&amp;amp;ND=4&#34;&gt;US2015357831A1&lt;/a&gt; above we are dealing with a wireless power system for a drone with an electronic display. Close inspection of the priority numbers reveals that all the earlier priority numbers are filings in the United States with many containing the kind code P standing for Provisional application at the end of the number (e.g. US20090169240P 20090414). The Provisional application system was introduced in the United States in 1995 as a means of harmonizing its system with the wider international system.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; A provisional patent application establishes the priority date for the invention, allowing the applicant to claim priority over other claims, but has no other legal meaning until a full patent application is submitted. Provisional patent applications are not published and are not accessible for analysis.&lt;/p&gt;
&lt;p&gt;To understand this a bit better we can look at the list of actual applications that appear at the start of the sequence of priority numbers.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;US201514815121 20150731 is the priority filing for the new invention of a wireless power system for an electronic display with an impedance matching network with identical application number (US201514815121 20150731) and publication number &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?DB=EPODOC&amp;amp;II=0&amp;amp;ND=3&amp;amp;adjacent=true&amp;amp;locale=en_EP&amp;amp;FT=D&amp;amp;date=20151210&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&#34;&gt;US2015357831A1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?FT=D&amp;amp;date=20151210&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&amp;amp;ND=4#&#34;&gt;US201113267750 20111006&lt;/a&gt; is for a Wireless Powered Television&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?FT=D&amp;amp;date=20151210&amp;amp;DB=EPODOC&amp;amp;locale=en_EP&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1&amp;amp;ND=4#&#34;&gt;US201113232868 20110914&lt;/a&gt; is for a wireless energy distribution system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As this makes clear, the first filing for this specific invention is the priority number that matches the application number. The other applications in the list could be described as contributing inventions. That is, the specific invention is based on combinations of elements of the other inventions in the list or elaborates on specific aspects of them as a new invention. Note that if we were to start exploring the provisional applications (kind code P) we would be confronted with lists of applications that arise from those provisional applications because provisional applications are not published directly except where they become full applications. You can test that with this example &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?DB=EPODOC&amp;amp;II=0&amp;amp;ND=3&amp;amp;adjacent=true&amp;amp;locale=en_EP&amp;amp;FT=D&amp;amp;date=20151210&amp;amp;CC=US&amp;amp;NR=2015357831A1&amp;amp;KC=A1#&#34;&gt;US20100411490P&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What does this mean in terms of counting first filings or priority documents? If we choose the &lt;em&gt;earliest filing&lt;/em&gt; in the list &lt;a href=&#34;https://worldwide.espacenet.com/searchResults?PL=true&amp;amp;ND=5&amp;amp;DB=EPODOC&amp;amp;query=PR%3DUS20090169240P&#34;&gt;US20090169240P 20090414&lt;/a&gt; we will be choosing a provisional application for a contributing invention at the base of a set of inventions.&lt;/p&gt;
&lt;p&gt;So, we could:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Choose this filing as the earliest filing bearing in mind it is for a contributing invention rather than the invention itself, or&lt;/li&gt;
&lt;li&gt;We could choose the priority number where the application number is identical as the first filing of the application claiming a wireless power system for an electronic display (US201514815121 20150731).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!--- in the case of an non provisional application based on a provisinal application the nonprovisional application will enjoy the effective filing date of the provisional application----&gt;&lt;/p&gt;
&lt;p&gt;If our aim is to simply to identify the earliest filing then we would choose option one. This will take us to the earliest in the set of filings but that may be some years before the research and development leading to the specific invention. This is the easiest option because in effect all we have to do is identify the earliest priority date in a set.&lt;/p&gt;
&lt;p&gt;However, if we choose option 2 we will identify the date that is closest to the investment in research and development leading to the specific invention. At first sight this is more attractive in using patent data as an indicator for technology trends but it is significantly more challenging in terms of methodology.&lt;/p&gt;
&lt;p&gt;As this helps to clarify, when dealing with patent counts we are often dealing with &lt;em&gt;many to many relationships&lt;/em&gt;. The application number, as we have just seen, is central to our ability to navigate these relationships and serves as the key field in patent databases such as the EPO World Patent Statistical Database (PATSTAT). The reason for this is that where an application number is identical to a priority number in a set we know it is the first filing. Any other priority numbers either reflect the filing route (national to regional to international) or are for contributing inventions. Any other application numbers or publications are members of the family linked to that first filing. We will address this in more detail in an article on family members.&lt;/p&gt;
&lt;p&gt;In this article our aim will be to map priority filings by identifying the earliest priority dates in the set of priorities linked to an application. In the process we will explore some of the issues that need to be considered when counting patents by priority.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;We now have enough background to begin counting first filings using the priority number. In summary:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The priority number records the first filing of a patent application anywhere in the world;&lt;/li&gt;
&lt;li&gt;Where a priority document is the first filing the application number will be identical to the priority number;&lt;/li&gt;
&lt;li&gt;A single application may contain multiple priority numbers that reflect:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The history of the filing route of applications with the earliest priority date being the first filing;&lt;/li&gt;
&lt;li&gt;Multiple contributing inventions where the first filing of the target application will be the priority number that is identical to the application number and the earliest priority will be the base of a set of inventions or patent family.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;counting-priority-numbers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Counting Priority Numbers&lt;/h2&gt;
&lt;p&gt;We are now in a position to begin working on counting first filings based on the identification of the earliest priority dates for a set of applications.&lt;/p&gt;
&lt;p&gt;To approach this we will need to start by asking two questions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Does our dataset contain duplicate records? If so we will over count.&lt;/li&gt;
&lt;li&gt;Does our dataset contain missing data? If so, what is the appropriate way to deal with that?&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;dealing-with-duplicates&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dealing with duplicates&lt;/h3&gt;
&lt;p&gt;We will deal with the question of duplicate data first. This is extremely common with patent data. Duplication arises because a single patent application may be published and republished multiple times (as an application, grant or correction). Duplication is inherent to the system as a global system. Duplication is also prominent when working with patent data because the most common way of retrieving data from a patent database is through publication numbers. Put simply, we can’t read a document that hasn’t been published and so when querying databases it is publications that we see. It is also publications that are downloaded from databases. For some databases, such as Derwent Innovation, there does not appear to be a way to deduplicate the data prior to export and so this has to be handled after export. In other cases, such as the free Lens patent databases or other commercial databases, it is possible to reduce the data onto a single filing. However, the criteria that are applied when deduplicating at source are often unclear - and may vary between databases - so this can impact on your ability to understand the data. If in doubt choose the rawest form and work from there.&lt;/p&gt;
&lt;p&gt;Let’s look at the data again to gain an understanding of the duplication issue. We will arrange the data by the application number for reasons that will become clear in a moment. If you are following this in R then note that &lt;code&gt;arrange()&lt;/code&gt; puts the application number in alphabetical order. &lt;code&gt;select()&lt;/code&gt; using &lt;code&gt;-&lt;/code&gt; drops the columns we don’t want to see right now. Because the duplicates can be difficult to spot I have selected a few rows to make this clear.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers %&amp;gt;% 
  arrange(application_number) %&amp;gt;% 
  select(-family_first, -family_number, -publication_number) %&amp;gt;% 
  .[53:60,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 2
##   priority_number                                      application_number 
##   &amp;lt;chr&amp;gt;                                                &amp;lt;chr&amp;gt;              
## 1 EP1980400905A 1980-06-19; FR197916840A 1979-06-29    EP1980400905A 1980…
## 2 EP1980400905A 1980-06-19; FR197916840A 1979-06-29    EP1980400905A 1980…
## 3 SE19799920A 1979-11-30                               EP1980850181A 1980…
## 4 SE19799920A 1979-11-30                               EP1980850181A 1980…
## 5 JP1979145870A 1979-11-09; JP1979145871A 1979-11-09;… EP1980902127A 1980…
## 6 JP1979145870A 1979-11-09; JP1979145871A 1979-11-09;… EP1980902127A 1980…
## 7 US1979105606A 1979-12-20                             EP1981900248A 1980…
## 8 US1979105606A 1979-12-20                             EP1981900248A 1980…&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two things we need to note in this view.&lt;/p&gt;
&lt;p&gt;First, some of our data is concatenated (joined) with &lt;code&gt;;&lt;/code&gt; as the separator. Second, and more importantly for the moment, we can see that we seem to have duplicate application numbers e.g. EP1980400905A in the first and second rows and then onwards.&lt;/p&gt;
&lt;p&gt;The reason that we have duplicates in the data is that a patent application may be published multiple times (for example as an application and as a grant or with corrections etc.). So, in the data above we can see that EP1980400905A 1980-06-19 has been published as EP22391A1 and EP22391B1 with the two letter &lt;code&gt;kind codes&lt;/code&gt; at the end of the publication number representing the first publication of the application (A1) and kind code B1 representing the first publication of a patent grant.&lt;a href=&#34;#fn4&#34; class=&#34;footnote-ref&#34; id=&#34;fnref4&#34;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers %&amp;gt;% 
  arrange(application_number) %&amp;gt;% 
  select(-family_first, -family_number, - priority_number) %&amp;gt;% 
  .[53:60,]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 2
##   application_number       publication_number
##   &amp;lt;chr&amp;gt;                    &amp;lt;chr&amp;gt;             
## 1 EP1980400905A 1980-06-19 EP22391B1         
## 2 EP1980400905A 1980-06-19 EP22391A1         
## 3 EP1980850181A 1980-11-28 EP30219B1         
## 4 EP1980850181A 1980-11-28 EP30219A1         
## 5 EP1980902127A 1980-11-06 EP39740B1         
## 6 EP1980902127A 1980-11-06 EP39740A1         
## 7 EP1981900248A 1980-12-17 EP42004B1         
## 8 EP1981900248A 1980-12-17 EP42004A1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where a document is republished the application number will be duplicated. This means that we will also end up with duplicated priority numbers and we will over count. Removing duplicate records is the key requirement for accurate counts of patent data.&lt;/p&gt;
&lt;p&gt;So, lets remove the duplicate application numbers first. To do that we will use a simple piece of R code from the &lt;code&gt;dplyr&lt;/code&gt; package (you loaded it with the tidyverse) to add a new column that identifies the duplicated records. We will create a new column called duplicated using &lt;code&gt;mutate()&lt;/code&gt; which adds columns. We will add the duplicated column by applying the R function &lt;code&gt;duplicated()&lt;/code&gt; to the application_number column. What this does is to loop over the column and identifies the first instance of the application_number and then duplicates of the application_number. The first instance of the application_number will be marked as FALSE (not duplicated) and the others as TRUE (duplicated). We will then use the &lt;code&gt;filter()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt; to limit the data to our non-duplicated numbers &lt;code&gt;== FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A couple of other things to note is that we will put this in a new table called numbers unique by using the assignment &lt;code&gt;&amp;lt;-&lt;/code&gt; operator. We also use the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator which takes what it finds on the left hand side and passes it into the right hand side. So, we see that &lt;code&gt;numbers %&amp;gt;% mutate()&lt;/code&gt; passes the numbers table or data.frame from the left hand side into &lt;code&gt;mutate()&lt;/code&gt; to create a new column based on the contents of the call to mutate. It’s simple and logical when you become familiar with it. At the end of this chunk of code we will limit the data to just the priority_number and the application_number which we will be using as a key.&lt;a href=&#34;#fn5&#34; class=&#34;footnote-ref&#34; id=&#34;fnref5&#34;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt; The &lt;code&gt;select()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt; will only select those columns that we name inside it and will drop the others. These three functions: &lt;code&gt;select()&lt;/code&gt; for columns, &lt;code&gt;filter()&lt;/code&gt; for rows, and &lt;code&gt;mutate()&lt;/code&gt; to add new values connected with the pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt; represent the building blocks for almost everything you need to do with patent data in R. The rest such as &lt;code&gt;duplicated()&lt;/code&gt; help you to perform particular operations and we will go into more detail with that below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers_unique &amp;lt;- numbers %&amp;gt;%
  mutate(duplicated = duplicated(application_number)) %&amp;gt;% 
  filter(duplicated == &amp;quot;FALSE&amp;quot;) %&amp;gt;% 
  select(priority_number, application_number, publication_number)

nrow(numbers_unique) # count the rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15776&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reduces our original 18,970 records to 15,776 records. We now want to take a look at our data to check for missingness.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;missing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Missing Data&lt;/h3&gt;
&lt;p&gt;We will be counting and graphing the priority numbers. So we will want to check that all of our records have a priority number. We will also be using dates to graph the data and it will be a very good idea to check the dates at this stage. The reason for this is that strange things can happen with patent dates and this is often linked to missingness in the data as we will see in a moment.&lt;/p&gt;
&lt;p&gt;In R missing data is represented by NA for Not Available. Working with NA data can be awkward and a source of considerable frustration because NA is not a value, it is the absence of a value. We can solve this by adding a column using &lt;code&gt;mutate()&lt;/code&gt; that will test the priority number field for NA values &lt;code&gt;is.na()&lt;/code&gt;. We will then apply a filter to allow us to see the top results where the value for &lt;code&gt;is.na()&lt;/code&gt; is TRUE. To see all the data add &lt;code&gt;%&amp;gt;% View()&lt;/code&gt; to the end.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers_unique %&amp;gt;% 
  mutate(missing_priority = is.na(priority_number)) %&amp;gt;% 
  filter(missing_priority == &amp;quot;TRUE&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 96 x 4
##    priority_number application_number    publication_num… missing_priority
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;            &amp;lt;lgl&amp;gt;           
##  1 &amp;lt;NA&amp;gt;            USD502486A 0001-01-01 US502486A        TRUE            
##  2 &amp;lt;NA&amp;gt;            USD500197A 0001-01-01 US500197A        TRUE            
##  3 &amp;lt;NA&amp;gt;            USD499490A 0001-01-01 US499490A        TRUE            
##  4 &amp;lt;NA&amp;gt;            USD497518A 0001-01-01 US497518A        TRUE            
##  5 &amp;lt;NA&amp;gt;            USD565353A 0001-01-01 US565353A        TRUE            
##  6 &amp;lt;NA&amp;gt;            USD474115A 0001-01-01 US474115A        TRUE            
##  7 &amp;lt;NA&amp;gt;            USD459287A 0001-01-01 US459287A        TRUE            
##  8 &amp;lt;NA&amp;gt;            USD540479A 0001-01-01 US540479A        TRUE            
##  9 &amp;lt;NA&amp;gt;            USD522772A 0001-01-01 US522772A        TRUE            
## 10 &amp;lt;NA&amp;gt;            USD593712A 0001-01-01 US593712A        TRUE            
## # ... with 86 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we notice about this data is that the dates for the records are 0001-01-01. This type of device (along with 999999) is often used to denote the absence of a date. In this case if we look up some of these cases we will discover that they are very old records. For example &lt;a href=&#34;https://worldwide.espacenet.com/publicationDetails/biblio?DB=EPODOC&amp;amp;II=0&amp;amp;ND=3&amp;amp;adjacent=true&amp;amp;locale=en_EP&amp;amp;FT=D&amp;amp;date=18850728&amp;amp;CC=US&amp;amp;NR=322982A&amp;amp;KC=A&#34;&gt;US322982A&lt;/a&gt; dates to 1885. The Paris Convention did not enter into force in the United States until May 1887 and it is unclear when exactly the USPTO started using the system, so it is not surprising that these documents lack priority numbers.&lt;a href=&#34;#fn6&#34; class=&#34;footnote-ref&#34; id=&#34;fnref6&#34;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt; If we continue to keep these records we will see an artificial spike of activity somewhere at the start of our graph. In this case we can safely drop these records using the handy &lt;code&gt;drop_na()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt;. We will simply overwrite the existing table and specify the priority number as the column where we will drop the rows with NA values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers_unique &amp;lt;- numbers_unique %&amp;gt;% 
  drop_na(priority_number) %&amp;gt;% 
  select(-publication_number)

nrow(numbers_unique)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15680&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have now reduced our dataset to 15,680 unique application numbers. Note that you may want to also use this type of &lt;code&gt;test, investigate, decide&lt;/code&gt; approach with other fields but it is always a good idea to note down the decisions that you make when doing so, otherwise what Hadley Wickham has called “future you” will have no idea and your audience will also have no clue.&lt;/p&gt;
&lt;p&gt;When working with this kind of data it is useful to create a reference number or even a full table that allows you to work out whether any operations you run afterwards are working correctly. In this case we now know that we have 15,680 application numbers. In the next section we will be working out the earliest priority dates for each of these documents. We therefore need to ensure that we end up with 15,680 application numbers. We will create a reference number called target from the number of rows &lt;code&gt;nrow()&lt;/code&gt; in the dataset before we go any further. This can help us work out what is going wrong if we end up with different numbers at the end. For more complex cases try creating a copy of the full table that you can use to work out what is getting lost or not counting correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;target &amp;lt;- nrow(numbers_unique)
target&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15680&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now know that we have no missing priority dates so we can proceed to wrangling or processing the priority numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wrangling-the-priority-numbers&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wrangling the Priority Numbers&lt;/h3&gt;
&lt;p&gt;We can’t count concatenated data properly, so our next step is to separate out the concatenated priority numbers into individual rows. We will also want to extract the dates from the priority numbers that we will use later on to create a graph. We will do this in one go. In the first step we will use &lt;code&gt;separate_rows()&lt;/code&gt; from &lt;code&gt;tidyr&lt;/code&gt; to break the priority numbers onto individual rows using &lt;code&gt;;&lt;/code&gt; as the separator. We then use &lt;code&gt;separate()&lt;/code&gt; to separate out the priority number and the date component. This will create two new columns called priority and priority_date. We will then apply two functions to these columns using &lt;code&gt;mutate()&lt;/code&gt;. The first will convert the priority date to date format in R. The second will trim any white space that appears at the front or end of the priority number field from the earlier separation. Trimming white space is an extremely important step. For example &lt;code&gt;US1234&lt;/code&gt; and the same number with a white space at the front or rear _US1234, where &lt;code&gt;_&lt;/code&gt; stands for the space, will be treated as a distinct number and will not count correctly. Trimming white space is a fundamental task when counting patent data and the single most common reason that your counts will not be correct at the end of all your hard work!&lt;/p&gt;
&lt;p&gt;As a final step in data preparation we will add some additional features. We will identify the US provisional applications and we will count the number of priorities associated with an application. We will also extract the two letter country codes at the beginning of the priority and application number fields as they may assist us later and will be used in counts. Note that the count of priority numbers in &lt;code&gt;n&lt;/code&gt; reveals the total number of priorities associated with an application number. We will not use all of these fields for this type of count but they are useful to assist with understanding the data as we move along.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers_unique &amp;lt;- numbers_unique %&amp;gt;% 
  separate_rows(priority_number, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  mutate(priority_number = str_trim(priority_number, side = &amp;quot;both&amp;quot;)) %&amp;gt;%
  separate(priority_number, into = c(&amp;quot;priority&amp;quot;, &amp;quot;priority_date&amp;quot;), sep = &amp;quot; &amp;quot;, remove = FALSE) %&amp;gt;% 
  mutate(priority_date = lubridate::ymd(priority_date)) %&amp;gt;% 
  mutate(priority = str_trim(priority, side = &amp;quot;both&amp;quot;)) %&amp;gt;%
  mutate(priority_number = str_trim(priority_number, side = &amp;quot;both&amp;quot;)) %&amp;gt;% 
  mutate(provisional = str_detect(.$priority_number, &amp;quot;[[:digit:]]P &amp;quot;)) %&amp;gt;%
  group_by(application_number) %&amp;gt;%
  mutate(priority_count = seq_along(1)) %&amp;gt;%
  add_tally(wt = priority_count) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(priority_country = str_sub(.$priority_number, 1,2)) %&amp;gt;% 
  mutate(application_country = str_sub(.$application_number, 1,2)) %&amp;gt;%
  select(-priority_count, -priority) # drop temporary count and unused column

numbers_unique&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 68,361 x 7
##    priority_number     priority_date application_number  provisional     n
##    &amp;lt;chr&amp;gt;               &amp;lt;date&amp;gt;        &amp;lt;chr&amp;gt;               &amp;lt;lgl&amp;gt;       &amp;lt;int&amp;gt;
##  1 US2016578323F 2016… 2016-09-20    US2016578323F 2016… FALSE           1
##  2 US14954632A 2015-1… 2015-11-30    US14954632A 2015-1… FALSE           1
##  3 US15360203A 2016-1… 2016-11-23    US15360203A 2016-1… FALSE           1
##  4 US62203383P 2015-0… 2015-08-10    US15454805A 2017-0… TRUE            2
##  5 US62314047P 2016-0… 2016-03-28    US15454805A 2017-0… TRUE            2
##  6 US62200764P 2015-0… 2015-08-04    US15263985A 2016-0… TRUE            2
##  7 US62314042P 2016-0… 2016-03-28    US15263985A 2016-0… TRUE            2
##  8 KR201528901A 2015-… 2015-03-02    US15057264A 2016-0… FALSE           1
##  9 US15217944A 2016-0… 2016-07-22    US15217944A 2016-0… FALSE           3
## 10 US2015196885P 2015… 2015-07-24    US15217944A 2016-0… TRUE            3
## # ... with 68,351 more rows, and 2 more variables: priority_country &amp;lt;chr&amp;gt;,
## #   application_country &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s quickly review what we just did in plain language. We separated each priority number onto its own row using the semicolon as the separator then we split off the priority number and the date and reformatted the date before finally trimming the white space around the numbers in the priority column. A couple of points to note here: in the call to separate we specified the separator or &lt;code&gt;sep&lt;/code&gt; as a space, we opted to keep the original column with &lt;code&gt;remove = FALSE&lt;/code&gt; (the default is true and removes the column). We then added a simple count because we know the number of application numbers are duplicated to the number of priorities and then grouped the applications to add a count of the total priorities per application with &lt;code&gt;add_tally&lt;/code&gt;. We ungrouped the table and then extracted the priority country and application country. Ungrouping is important, but hard to remember, because if we do not ungroup the data then any calculation we apply will be applied by group. This will normally cause unexpected results or the calculation simply won’t work.&lt;/p&gt;
&lt;p&gt;When preparing data in this way one of the signs that there are unresolved issues with your data is that you will receive warnings about missing or extra pieces of data when you use &lt;code&gt;separate()&lt;/code&gt;. If you see these messages go back and inspect your data. It can mean that there are NA values in the column you are separating or it can mean that you have extra spaces (so there will be too many pieces) or something else is present in the data. Issues with white space are common culprits with patent data (following separation) and this is one of the reasons that there are two calls to trim white space with &lt;code&gt;str_trim()&lt;/code&gt; as a security blanket to avoid later problems.&lt;/p&gt;
&lt;p&gt;To make this clearer lets just try and run separate on our original concatenated data using the space as the separator.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers %&amp;gt;% 
  separate(priority_number, into = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;), sep = &amp;quot; &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Expected 2 pieces. Additional pieces discarded in 10937 rows
## [4, 5, 7, 8, 11, 21, 22, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 48,
## 49, ...].&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,970 x 6
##    one         two        application_number    family_first family_number
##    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;        
##  1 US20165783… 2016-09-20 US2016578323F 2016-0… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  2 US14954632A 2015-11-30 US14954632A 2015-11-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  3 US15360203A 2016-11-23 US15360203A 2016-11-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  4 US62203383P 2015-08-1… US15454805A 2017-03-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  5 US62200764P 2015-08-0… US15263985A 2016-09-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  6 KR20152890… 2015-03-02 US15057264A 2016-03-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  7 US15217944A 2016-07-2… US15217944A 2016-07-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  8 US20081007… 2008-09-2… US14808174A 2015-07-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
##  9 FR20142036A 2014-09-12 US14848061A 2015-09-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
## 10 US14970643A 2015-12-16 US14970643A 2015-12-… &amp;lt;NA&amp;gt;         &amp;lt;NA&amp;gt;         
## # ... with 18,960 more rows, and 1 more variable: publication_number &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We immediately get a warning about extra pieces in over 10,000 rows signifying that we need to go back and pay more attention to our data. In other cases you will not always be concerned about this, although it is an extremely good idea to be clear about why you are not concerned, and you can deal with extra data by specifying &lt;code&gt;extra = &amp;quot;merge&amp;quot;&lt;/code&gt;. For fun let’s try that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;numbers %&amp;gt;% 
  separate(priority_number, into = c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;), sep = &amp;quot; &amp;quot;, extra = &amp;quot;merge&amp;quot;) %&amp;gt;% 
  select(one, two)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 18,970 x 2
##    one           two                                                      
##    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                                                    
##  1 US2016578323F 2016-09-20                                               
##  2 US14954632A   2015-11-30                                               
##  3 US15360203A   2016-11-23                                               
##  4 US62203383P   2015-08-10; US62314047P 2016-03-28                       
##  5 US62200764P   2015-08-04; US62314042P 2016-03-28                       
##  6 KR201528901A  2015-03-02                                               
##  7 US15217944A   2016-07-22; US2015196885P 2015-07-24; US62196885P 2015-0…
##  8 US2008100721P 2008-09-27; US2008108743P 2008-10-27; US2008121159P 2008…
##  9 FR20142036A   2014-09-12                                               
## 10 US14970643A   2015-12-16                                               
## # ... with 18,960 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we would expect from using the space as a separator, the function is showing us the number in the first column and the date in the second but is then tacking on the rest of the data in cases with multiple priority numbers. Warnings and arguments such as &lt;code&gt;extra = &amp;quot;merge&amp;quot;&lt;/code&gt; can help you get to grips with the issues in your data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-the-earliest-priority-date&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Identifying the earliest priority date&lt;/h3&gt;
&lt;p&gt;In the discussion of the options identified above we noted that we could:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Identify the earliest priority document&lt;/li&gt;
&lt;li&gt;Identify the priority that is closest to the specific invention&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here we will focus on simply identifying the earliest priority. We can do this in a straight forward way by grouping our application numbers and then using the &lt;code&gt;rank()&lt;/code&gt; function inside a call to &lt;code&gt;mutate()&lt;/code&gt; to rank the dates from 1 to x. A key point here is that the default ranking method for the rank function is actually average. We therefore need to specify &lt;code&gt;ties.method = &amp;quot;first&amp;quot;&lt;/code&gt; to get what we want. We then ungroup our table and filter to the earliest priority date using &lt;code&gt;filing_order == 1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest &amp;lt;- numbers_unique %&amp;gt;% 
  group_by(application_number) %&amp;gt;% 
  mutate(filing_order = rank(priority_date, ties.method = &amp;quot;first&amp;quot;)) %&amp;gt;%
  ungroup() %&amp;gt;% 
  filter(filing_order == 1)

earliest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15,680 x 8
##    priority_number     priority_date application_number  provisional     n
##    &amp;lt;chr&amp;gt;               &amp;lt;date&amp;gt;        &amp;lt;chr&amp;gt;               &amp;lt;lgl&amp;gt;       &amp;lt;int&amp;gt;
##  1 US2016578323F 2016… 2016-09-20    US2016578323F 2016… FALSE           1
##  2 US14954632A 2015-1… 2015-11-30    US14954632A 2015-1… FALSE           1
##  3 US15360203A 2016-1… 2016-11-23    US15360203A 2016-1… FALSE           1
##  4 US62203383P 2015-0… 2015-08-10    US15454805A 2017-0… TRUE            2
##  5 US62200764P 2015-0… 2015-08-04    US15263985A 2016-0… TRUE            2
##  6 KR201528901A 2015-… 2015-03-02    US15057264A 2016-0… FALSE           1
##  7 US2015196885P 2015… 2015-07-24    US15217944A 2016-0… TRUE            3
##  8 US2008100721P 2008… 2008-09-27    US14808174A 2015-0… TRUE           22
##  9 FR20142036A 2014-0… 2014-09-12    US14848061A 2015-0… FALSE           1
## 10 US14970643A 2015-1… 2015-12-16    US14970643A 2015-1… FALSE           1
## # ... with 15,670 more rows, and 3 more variables: priority_country &amp;lt;chr&amp;gt;,
## #   application_country &amp;lt;chr&amp;gt;, filing_order &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a data frame that identifies the earliest priority numbers in a set. The 15,680 records corresponds match our target of 15,680 application numbers and so all is good.&lt;/p&gt;
&lt;p&gt;The final step with this data is to remember that this dataset is based on unique &lt;em&gt;application numbers&lt;/em&gt; and not unique priority numbers. In practice, some of the application numbers in our set will share priority numbers with other applications and will be follow on filings. We therefore need to identify duplicates in the priority numbers and deduplicate to unique priority numbers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest_unique &amp;lt;- earliest %&amp;gt;% 
  mutate(duplicate_priority = duplicated(.$priority_number)) %&amp;gt;% 
  filter(duplicate_priority == &amp;quot;FALSE&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This reduces our dataset to a total of 9,366 priority numbers. That is, these priority numbers are the earliest filings giving rise to the 15,680 applications in the drones dataset.&lt;/p&gt;
&lt;p&gt;By pursuing this option we have arrived at the absolute earliest dateline in this dataset on drones through a process of deduplication. However, as the numbers suggest we have also taken out a lot of potentially useful information. At this point it is important to bear in mind that this type of calculation can only be used to graph baseline first filings. We will look at this in further depth in a follow on article.&lt;/p&gt;
&lt;p&gt;Let’s quickly graph this data. Here we are using the popular R graphing package ggplot2 to draw quick graphs of the data. To learn more about using &lt;code&gt;ggplot2&lt;/code&gt; try the excellent &lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;R Graphics Cookbook by Winston Chang&lt;/a&gt; which is available in open access form online. A step by step walk through on using ggplot2 to visualise patent data is available in this &lt;a href=&#34;https://www.pauloldham.net/graphing-patent-data-with-ggplot2-part2/&#34;&gt;article&lt;/a&gt;. If you prefer using Excel or Tableau then write the file to a .csv and then open it in your tool of choice. You can do this simply with the following line of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readr::write_csv(earliest_unique, &amp;quot;earliest_unique.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ggplot2 is quite a lot more involved than working with Tableau, Excel or other tools but provides a powerful way to control graphing. Let’s take a quick look at the data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-11-counting-patent-first-filings_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that graphs of priority data display a characteristic data cliff the closer that we move towards the present. This reflects the fact that patent applications are normally published at least 24 months after they were originally filed. This data cliff can easily mislead an audience into believing that interest in a technology has suddenly collapsed when in reality we are missing or only have partial data for the period. It is therefore important to pull the year range back to accommodate this. Depending on your data it is sensible to pull back the year by at least two years and possibly three years.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest_unique %&amp;gt;% 
  select(-n) %&amp;gt;% 
  mutate(year = lubridate::year(priority_date)) %&amp;gt;% 
  filter(year &amp;gt;= 1990 &amp;amp; year &amp;lt;= 2015) %&amp;gt;% 
  group_by(year) %&amp;gt;%
  tally() %&amp;gt;%  
  ggplot(., aes(x = year, y = n)) +
  geom_line() +
  labs(title = &amp;quot;Trends in First Filings of Patent Applications for Drone Technology&amp;quot;, x = &amp;quot;priority year&amp;quot;, y = &amp;quot;first filings&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-11-counting-patent-first-filings_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note the speed bump in the data around 2008 that is likely to reflect the impact of the financial crisis with filings relating to drone technology before accelerating rapidly in recent years.&lt;a href=&#34;#fn7&#34; class=&#34;footnote-ref&#34; id=&#34;fnref7&#34;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this dataset we can also gain an insight into the countries driving this trend by ranking them in a bar graph for the same period.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggthemes)
earliest_unique %&amp;gt;%
  select(-n) %&amp;gt;% 
  filter(priority_date &amp;gt;= &amp;quot;1990-01-01&amp;quot; &amp;amp; priority_date &amp;lt;= &amp;quot;2017-12-01&amp;quot;) %&amp;gt;% 
  group_by(priority_country) %&amp;gt;% 
  tally(sort = TRUE) %&amp;gt;% 
  filter(n &amp;gt; 100) %&amp;gt;% 
  ggplot(aes(x = reorder(priority_country, n), y = n, fill = priority_country)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  coord_flip() +
  labs(title = &amp;quot;First Filings by Priority Country&amp;quot;, x = &amp;quot;Priority Country&amp;quot;, y = &amp;quot;First Filings&amp;quot;) +
  geom_text(aes(y = n, label = n), size = 3, hjust = -0.1) +
  theme_igray() +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-05-11-counting-patent-first-filings_files/figure-html/echo-1.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note here that the United States emerges first in the top 5 followed by Japan, France, Korea and the Patent Cooperation Treaty (WO). It is important to bear in mind here that WO records will typically be filed through national offices, although no priority number will be present, as we can see in the references to country codes inside the WO priority documents.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest_unique %&amp;gt;% 
  filter(priority_country == &amp;quot;WO&amp;quot;) %&amp;gt;% 
  select(priority_number)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 286 x 1
##    priority_number          
##    &amp;lt;chr&amp;gt;                    
##  1 WO2016US65141A 2016-12-06
##  2 WO2015CN79094A 2015-05-15
##  3 WO2014CN86739A 2014-09-17
##  4 WO2015EP76803A 2015-11-17
##  5 WO2014EP72175A 2014-10-16
##  6 WO2013US65291A 2013-10-16
##  7 WO2014PL50044A 2014-07-24
##  8 WO2014US21626A 2014-03-07
##  9 WO2013US46840A 2013-06-20
## 10 WO2012US69292A 2012-12-12
## # ... with 276 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can summarise this data by extracting the country codes in the middle of the WO numbers. This suggests that the country where the WO application was submitted was the US followed by China (CN) and so on. The reference to the IB in these numbers are for so called PCT direct filings that are filed directly with WIPO as the International Bureau (IB) for the Patent Cooperation Treaty.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest_unique %&amp;gt;% 
  filter(priority_country == &amp;quot;WO&amp;quot;) %&amp;gt;% 
  select(priority_number) %&amp;gt;% 
  mutate(wo_source = str_sub(.$priority_number, 7,8)) %&amp;gt;% 
  count(wo_source, sort = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 25 x 2
##    wo_source     n
##    &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;
##  1 US           71
##  2 CN           46
##  3 EP           43
##  4 JP           43
##  5 IB           19
##  6 KR           14
##  7 SE           13
##  8 RU            7
##  9 FR            5
## 10 PL            5
## # ... with 15 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As such, for a fuller count we might consider reallocating these priority numbers to their respective national country offices.&lt;/p&gt;
&lt;p&gt;Note that we cannot go much further with this data to chart application countries accurately because we have deduplicated the priority numbers that would provide access to the application country data. A superior approach would be to create a temporary field for the unique priorities that allows the linked application countries to be viewed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;bringing-together-the-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Bringing together the code&lt;/h3&gt;
&lt;p&gt;To finish off this discussion let’s briefly summarise the code required to reduce the dataset to the early priority filings. Here we will present the code in one go following some pruning to remove extra elements that we did not use to generate this calculation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;earliest_priority &amp;lt;- numbers %&amp;gt;%
  mutate(duplicated = duplicated(application_number)) %&amp;gt;% 
  filter(duplicated == &amp;quot;FALSE&amp;quot;) %&amp;gt;% 
  select(priority_number, application_number, publication_number) %&amp;gt;% 
  drop_na(priority_number) %&amp;gt;% 
  separate_rows(priority_number, sep = &amp;quot;;&amp;quot;) %&amp;gt;% 
  mutate(priority_number = str_trim(priority_number, side = &amp;quot;both&amp;quot;)) %&amp;gt;%
  separate(priority_number, into = c(&amp;quot;priority&amp;quot;, &amp;quot;priority_date&amp;quot;), sep = &amp;quot; &amp;quot;, remove = FALSE) %&amp;gt;% 
  mutate(priority_date = lubridate::ymd(priority_date)) %&amp;gt;% 
  mutate(priority_number = str_trim(priority_number, side = &amp;quot;both&amp;quot;)) %&amp;gt;% 
  mutate(priority_country = str_sub(.$priority_number, 1,2)) %&amp;gt;% 
  group_by(application_number) %&amp;gt;% 
  mutate(filing_order = rank(priority_date, ties.method = &amp;quot;first&amp;quot;)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  filter(filing_order == 1) %&amp;gt;% 
  mutate(duplicate_priority = duplicated(.$priority_number)) %&amp;gt;% 
  filter(duplicate_priority == &amp;quot;FALSE&amp;quot;) %&amp;gt;% 
  select(-priority)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating the earliest priority from the moment of import involved 18 lines of code focusing on using &lt;code&gt;mutate(), filter(), select(), drop_na(), separate_rows(), group_by()&lt;/code&gt;, and &lt;code&gt;ungroup()&lt;/code&gt;. Inside the &lt;code&gt;mutate()&lt;/code&gt; function we created new columns to test for duplicates using &lt;code&gt;duplicated()&lt;/code&gt;, we trimmed white space with &lt;code&gt;str_trim()&lt;/code&gt;, extracted data with &lt;code&gt;str_sub()&lt;/code&gt; and ranked data with &lt;code&gt;rank()&lt;/code&gt;. As this makes clear R functions from the tidyverse provide building blocks that can be chained together in an easy to read way to transform data into a desired result. For this reason we advocate a tidy approach to patent analytics with R.&lt;/p&gt;
&lt;p&gt;One of the most important features of R as a functional programming language is that we can wrap this code (a collection of instructions to functions) into a single function. We will call it extract priority. This code basically reproduces that above but with some additional decoration to address something called &lt;a href=&#34;https://cran.r-project.org/web/packages/dplyr/vignettes/programming.html&#34;&gt;tidy evaluation&lt;/a&gt; in R. Tidy evaluation is intellectually challenging and will not be addressed here.&lt;a href=&#34;#fn8&#34; class=&#34;footnote-ref&#34; id=&#34;fnref8&#34;&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_priority &amp;lt;- function(data = NULL, priority_number = NULL, key = NULL){
  x &amp;lt;- data %&amp;gt;%
    select(!!priority_number, !!key) %&amp;gt;%
    mutate(duplicated = duplicated(.[[!!key]])) %&amp;gt;%
    filter(duplicated == FALSE) %&amp;gt;%
    drop_na(!!priority_number) %&amp;gt;%
    separate_rows(!!priority_number, sep = &amp;quot;;&amp;quot;) %&amp;gt;%
    mutate(!!priority_number := str_trim(.[[!!priority_number]], side = &amp;quot;both&amp;quot;)) %&amp;gt;%
    separate(!!priority_number, into = c(&amp;quot;priority&amp;quot;, &amp;quot;priority_date&amp;quot;), sep = &amp;quot; &amp;quot;, remove = FALSE) %&amp;gt;%
    mutate(priority_date = lubridate::ymd(priority_date)) %&amp;gt;%
    mutate(!!key := str_trim(.[[!!key]], side = &amp;quot;both&amp;quot;)) %&amp;gt;%
    mutate(priority_country = str_sub(.[[!!priority_number]], 1,2)) %&amp;gt;% 
    group_by(!!!rlang::syms(key)) %&amp;gt;% 
    mutate(filing_order = rank(priority_date, ties.method = &amp;quot;first&amp;quot;)) %&amp;gt;% 
    ungroup() %&amp;gt;% 
    filter(filing_order == 1) %&amp;gt;%
    mutate(duplicate_priority = duplicated(.[[!!priority_number]])) %&amp;gt;% 
    filter(duplicate_priority == &amp;quot;FALSE&amp;quot;) %&amp;gt;% 
    select(-priority, -duplicated, -filing_order, -duplicate_priority)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes three arguments. Data is a dataset, the priority number is the field that contains the raw priority number data and the key is the field that is used for grouping (assumed to be the application number).&lt;/p&gt;
&lt;p&gt;We can test this as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- extract_priority(data = numbers, priority_number = &amp;quot;priority_number&amp;quot;, key = &amp;quot;application_number&amp;quot;)
results&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9,366 x 4
##    priority_number      priority_date application_number  priority_country
##    &amp;lt;chr&amp;gt;                &amp;lt;date&amp;gt;        &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;           
##  1 US2016578323F 2016-… 2016-09-20    US2016578323F 2016… US              
##  2 US14954632A 2015-11… 2015-11-30    US14954632A 2015-1… US              
##  3 US15360203A 2016-11… 2016-11-23    US15360203A 2016-1… US              
##  4 US62203383P 2015-08… 2015-08-10    US15454805A 2017-0… US              
##  5 US62200764P 2015-08… 2015-08-04    US15263985A 2016-0… US              
##  6 KR201528901A 2015-0… 2015-03-02    US15057264A 2016-0… KR              
##  7 US2015196885P 2015-… 2015-07-24    US15217944A 2016-0… US              
##  8 US2008100721P 2008-… 2008-09-27    US14808174A 2015-0… US              
##  9 FR20142036A 2014-09… 2014-09-12    US14848061A 2015-0… FR              
## 10 US14970643A 2015-12… 2015-12-16    US14970643A 2015-1… US              
## # ... with 9,356 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this means is that where we have a dataset with a priority number field and the application number field as a key we do not need to write all the code again by hand. We may have to adjust the code… for example if the numbers contain different separators (such as ;; in the case of the Lens database) or junk such as “[” is found in a data field. However, the ability to turn code into a reusable function is the most powerful feature of programming languages such as R and a powerful reason to engage with R when working with patent data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;wrap-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Wrap Up&lt;/h3&gt;
&lt;p&gt;In this article we have taken a deep dive into the exploration of how to count the first filings of patent applications using information in the priority number field. We have focused on reducing a set of 18,970 patent applications to the earliest filings and arrived at 9,366 results.&lt;/p&gt;
&lt;p&gt;The key take home messages from this article are that to identify the earliest priority filing we have to do the following&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Deduplicate our data on application numbers&lt;/li&gt;
&lt;li&gt;Separate the individual priority numbers onto their own row&lt;/li&gt;
&lt;li&gt;Make sure we trim white space&lt;/li&gt;
&lt;li&gt;Group the data on application numbers and then identify the earliest priority date for each application&lt;/li&gt;
&lt;li&gt;Filter the data to the earliest priority date per application&lt;/li&gt;
&lt;li&gt;Identify and remove duplicate priority numbers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As discussed above, this approach focuses on a straightforward method for identifying the earliest priority filing. A more sophisticated approach would break the dataset down to identify the cases where the priority number is identical to an application number and then work through the data focusing on provisional applications. The outcome of such an exercise will not be radically different, however it would arguably be more accurate in terms of identifying the priority date closest to the date of a specific invention and working through the filing route issues. For today however this is more than enough for a first deep dive into counting patent filings by priority. If you have survived this far congratulations. You now know more than most people alive about how to count priority filings. Yay!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;One of the most widely cited works providing an overview of the use of patents statistics is Griliches, Z 1998 Patent Statistics as Economic Indicators: A Survey, in Griliches, Z (ed.), R&amp;amp;D and Productivity: The Econometric Evidence. Cambridge: Cambridge University Press, available at &lt;a href=&#34;http://www.nber.org/chapters/c8351.pdf&#34; class=&#34;uri&#34;&gt;http://www.nber.org/chapters/c8351.pdf&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;the date field is missing in our dataset and this is common, Clarivate also adds zeros as padding so it is US20150357831A1. &lt;a href=&#34;mailto:esp@acenet&#34;&gt;esp@acenet&lt;/a&gt; adds the year following the kind code as US201514815121 20150731 whereas in our Derwent Innovation data the number is US14815121 20150731&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;For details see the &lt;a href=&#34;https://www.uspto.gov/patents-getting-started/patent-basics/types-patent-applications/provisional-application-patent&#34;&gt;USPTO web page on Provisional Applications&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn4&#34;&gt;&lt;p&gt;In formal terms kind codes refer to publication types and publication levels. Their use varies over time in individual countries and across countries and should therefore be approached with a degree of caution. At major patent offices kind code A typically denotes an application and kind code B a patent grant, except for US patent documents prior to 2001 where kind code A denotes a patent grant. As this suggests, caution is needed.&lt;a href=&#34;#fnref4&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn5&#34;&gt;&lt;p&gt;in everyday practice you may want to keep the publication number to look up records and check you are on the right track&lt;a href=&#34;#fnref5&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn6&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://www.wipo.int/treaties/en/ShowResults.jsp?lang=en&amp;amp;treaty_id=2&#34; class=&#34;uri&#34;&gt;http://www.wipo.int/treaties/en/ShowResults.jsp?lang=en&amp;amp;treaty_id=2&lt;/a&gt;&lt;a href=&#34;#fnref6&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn7&#34;&gt;&lt;p&gt;note that the drones dataset is a training set that includes noisy terms and is not expected to fully reflect trends in drone technology&lt;a href=&#34;#fnref7&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn8&#34;&gt;&lt;p&gt;See &lt;a href=&#34;https://edwinth.github.io/blog/dplyr-recipes/&#34;&gt;Edwin Theon’s blog&lt;/a&gt; for an introduction along with the &lt;a href=&#34;https://www.rstudio.com/resources/webinars/tidy-eval/&#34;&gt;RStudio video&lt;/a&gt; and &lt;a href=&#34;https://maraaverick.rbind.io/2017/08/tidyeval-resource-roundup/&#34;&gt;Mara Avericks’s tidy eval resource roundup&lt;/a&gt;&lt;a href=&#34;#fnref8&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Update on Importing Excel Data in R</title>
      <link>/importing-excel-data-into-r-updated/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/importing-excel-data-into-r-updated/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#import-directly-from-the-rstudio-menu&#34;&gt;Import Directly from the RStudio Menu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-an-excel-file-from-a-url&#34;&gt;Reading an Excel file from a URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tidying-column-names-with-janitor&#34;&gt;Tidying column names with &lt;code&gt;janitor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exporting-to-excel&#34;&gt;Exporting to Excel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#round-up&#34;&gt;Round Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Back in 2015 I wrote a long blog post on &lt;a href=&#34;https://www.pauloldham.net/reading-writing-excel-files-r/&#34;&gt;importing Excel tables into R&lt;/a&gt;. Happily for everyone this is now a lot easier than it was. This post provides an update on importing spreadsheets into R and exporting from R to Excel. I’ll also cover reading an excel file into R from a url as that seems to be an ongoing struggle.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;import-directly-from-the-rstudio-menu&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Import Directly from the RStudio Menu&lt;/h2&gt;
&lt;p&gt;The big change is that it is now very easy to import from Excel using the RStudio Menu: &lt;code&gt;File &amp;gt; Import Dataset &amp;gt; From Excel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/excel/file_import.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, navigate to the file that you want to import and select it. You will then see something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/excel/import_panel.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;One point to bear in mind is that the import will often default to the name &lt;code&gt;dataset&lt;/code&gt; so that you need to make sure you enter a meaningful name for the dataset.&lt;/p&gt;
&lt;p&gt;If your workbook has multiple sheets then you can choose a sheet number using &lt;code&gt;Sheet&lt;/code&gt;, choose the maximum number of rows or skip rows if you have a bunch of filler junk in the top rows. Regular Excel users may also want to select columns by Range.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/excel/import_panel_options.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also click on a column and choose to skip it or change the format.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/excel/skip_col.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is worth bearing in mind that if you are importing a number of worksheets you can easily lose track. I sometimes use the approach of copying the import chunk into an Rmarkdown document to keep track of what I am doing and where a file came from.&lt;/p&gt;
&lt;p&gt;When copying chunks note the small clipboard icon in the top right above the chunk that will copy the chunk to the clipboard for pasting into the console or an R markdown code chunk to document your import steps for the future. My approach when working with multiple sheets is to create an R markdown file and copy and paste the import code into chunks that I then save. That allows “future me”, to borrow from Hadley Wickham, to understand where the datasets came from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/excel/import_panel_chunk.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see from importing the file behind the scenes RStudio is using the &lt;code&gt;readxl&lt;/code&gt; library to import the file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readxl&lt;/code&gt; will commonly generate warning messages during the import process. For example this dataset generated a long long string of warnings that looked like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Expecting logical in AH5501 / R5501C34: got ‘Aaptos suberitoides’Expecting logical in AH5502 / R5502C34: got ’Abdopus abaculus’Expecting logical in AH5503 / R5503C34: got ’Abdopus aculeatus’Expecting logical in AH5504 / R5504C34: got ’Abralia armata’Expecting logical in AH5505 / R5505C34: got ’Abraliopsis hoylei’Expecting logical in AH5506 / R5506C34: got ’Abudefduf bengalensis’Expecting logical in AH5507 / R5507C34: got ’Abudefduf sexfasciatus’”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These warnings arise because &lt;code&gt;readxl&lt;/code&gt; guesses the column type by reading the top 1000 rows for each column. However, where a column contains a mix of numbers or characters this can lead to an &lt;code&gt;expecting logical/expecting integer&lt;/code&gt; type of error. A lot of the time this is not actually a problem. However, it is important to pay attention to the warnings because they may indicate an actual problem with your data (such as lines spilling across rows).&lt;/p&gt;
&lt;p&gt;To fix this there are a number of options to try.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Use the guess_max argument&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;guess_max&lt;/code&gt; argument to increase the number of rows that are read to guess the column type. The default is 1000 and here we reset it to 2000. In the case of our example dataset this didn’t work because the problems appeared lower down but it often will. You can add an &lt;code&gt;n_max&lt;/code&gt; value (shown below as NULL) where you know the maximum number of rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
taxonomy &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/Desktop/open_source_master/asean/data-taxonomy/taxonomy_final.xlsx&amp;quot;, 
    guess_max = min(2000, n_max = NULL))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative to this approach is simply to set &lt;code&gt;min&lt;/code&gt; as the maximum number of rows. The issue here is that you would of course need to already have opened the spreadsheet to identify the number of rows, but there is no reason not to simply guess large.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
taxonomy &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/Desktop/taxonomy_final.xlsx&amp;quot;, 
    guess_max = min(8400, n_max = NULL))
taxonomy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,400 x 50
##    scientificname  type  genusorabove specificepithet parsed authorsparsed
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;lgl&amp;gt;  &amp;lt;lgl&amp;gt;        
##  1 abramis brama   SCIE… Abramis      brama           TRUE   TRUE         
##  2 acanthamoeba p… SCIE… Acanthamoeba polyphaga       TRUE   TRUE         
##  3 acaudina molpa… SCIE… Acaudina     molpadioides    TRUE   TRUE         
##  4 acipenser dabr… SCIE… Acipenser    dabryanus       TRUE   TRUE         
##  5 acipenser fulv… SCIE… Acipenser    fulvescens      TRUE   TRUE         
##  6 acipenser mika… SCIE… Acipenser    mikadoi         TRUE   TRUE         
##  7 acipenser oxyr… SCIE… Acipenser    oxyrinchus      TRUE   TRUE         
##  8 acipenser ruth… SCIE… Acipenser    ruthenus        TRUE   TRUE         
##  9 acipenser schr… SCIE… Acipenser    schrencki       TRUE   TRUE         
## 10 acrocalanus gr… SCIE… Acrocalanus  gracilis        TRUE   TRUE         
## # ... with 8,390 more rows, and 44 more variables: canonicalname &amp;lt;chr&amp;gt;,
## #   canonicalnamewithmarker &amp;lt;chr&amp;gt;, canonicalnamecomplete &amp;lt;chr&amp;gt;,
## #   rankmarker &amp;lt;chr&amp;gt;, gbif_id &amp;lt;chr&amp;gt;, db &amp;lt;chr&amp;gt;, match &amp;lt;chr&amp;gt;,
## #   multiple_matches &amp;lt;lgl&amp;gt;, pattern_match &amp;lt;lgl&amp;gt;, uri &amp;lt;chr&amp;gt;, kingdom &amp;lt;chr&amp;gt;,
## #   phylum &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;, order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;,
## #   species &amp;lt;chr&amp;gt;, kingdom_id &amp;lt;chr&amp;gt;, phylum_id &amp;lt;chr&amp;gt;, class_id &amp;lt;chr&amp;gt;,
## #   order_id &amp;lt;chr&amp;gt;, family_id &amp;lt;chr&amp;gt;, genus_id &amp;lt;chr&amp;gt;, species_id &amp;lt;chr&amp;gt;,
## #   query &amp;lt;chr&amp;gt;, scientificname1 &amp;lt;chr&amp;gt;, required_fields_check &amp;lt;dbl&amp;gt;,
## #   environment_aphia_worms &amp;lt;chr&amp;gt;, name_aphia_worms &amp;lt;chr&amp;gt;,
## #   aphiaid_worms &amp;lt;dbl&amp;gt;, accepted_name_aphia_worms &amp;lt;chr&amp;gt;,
## #   valid_aphiaid_worms &amp;lt;dbl&amp;gt;, status_aphia_worms &amp;lt;chr&amp;gt;,
## #   taxonmatch_matchcount_worms &amp;lt;dbl&amp;gt;, taxonmatch_note_worms &amp;lt;chr&amp;gt;,
## #   species1 &amp;lt;chr&amp;gt;, match1 &amp;lt;lgl&amp;gt;, environment &amp;lt;chr&amp;gt;, marine &amp;lt;chr&amp;gt;,
## #   brackish &amp;lt;chr&amp;gt;, freshwater &amp;lt;chr&amp;gt;, terrestrial &amp;lt;chr&amp;gt;,
## #   noenvironment &amp;lt;chr&amp;gt;, worms_id &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Specify the column types &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If that doesn’t work for you then a third option is to work out what the format should be and pass it as a string. Arguably, this should be the first option. However, it can also be the most time consuming.&lt;/p&gt;
&lt;p&gt;A toy example is the following data frame that we can write to excel (see below on writing files).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(writexl)
df &amp;lt;- tibble(a = c(1,2,3), 
             b = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), 
             c = c(TRUE, FALSE, TRUE), 
             d = c(&amp;quot;2017-12-10&amp;quot;, &amp;quot;20170815&amp;quot;, &amp;quot;2017_06_12&amp;quot;)) %&amp;gt;%
  writexl::write_xlsx(., &amp;quot;df.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we read this in we specify the column types. Note that in this case we need to use the term “text” rather than the familiar “character” or we get an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/blog/content/post/df.xlsx&amp;quot;, col_names = TRUE, 
    col_types = c(&amp;quot;numeric&amp;quot;, &amp;quot;text&amp;quot;, &amp;quot;logical&amp;quot;, &amp;quot;text&amp;quot;))
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##       a b     c     d         
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;     
## 1    1. a     TRUE  2017-12-10
## 2    2. b     FALSE 20170815  
## 3    3. c     TRUE  2017_06_12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The documentation for read_excel (&lt;code&gt;?read_excel&lt;/code&gt;) sets out quite a few other options. For example we could specify the format of some columns and leave the function to guess the others. That would look like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/blog/content/post/df.xlsx&amp;quot;, col_names = TRUE, 
    col_types = c(&amp;quot;guess&amp;quot;, &amp;quot;guess&amp;quot;, &amp;quot;logical&amp;quot;, &amp;quot;guess&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Convert all columns to a single type&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a dataset with a lot of columns trying to work out the column types or writing &lt;code&gt;guess, logical, character&lt;/code&gt; can rapidly become painful. Depending on your needs it may be easier to simply use the &lt;code&gt;col_types = &amp;quot;text&amp;quot;&lt;/code&gt; for all columns and change them where needed later using &lt;code&gt;as.character()&lt;/code&gt;, &lt;code&gt;as.logical()&lt;/code&gt;, &lt;code&gt;as.numeric()&lt;/code&gt; or &lt;code&gt;as.Date()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
taxonomy &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/Desktop/taxonomy_final.xlsx&amp;quot;, 
    col_types = &amp;quot;text&amp;quot;)
taxonomy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,400 x 50
##    scientificname  type  genusorabove specificepithet parsed authorsparsed
##    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;        
##  1 abramis brama   SCIE… Abramis      brama           TRUE   TRUE         
##  2 acanthamoeba p… SCIE… Acanthamoeba polyphaga       TRUE   TRUE         
##  3 acaudina molpa… SCIE… Acaudina     molpadioides    TRUE   TRUE         
##  4 acipenser dabr… SCIE… Acipenser    dabryanus       TRUE   TRUE         
##  5 acipenser fulv… SCIE… Acipenser    fulvescens      TRUE   TRUE         
##  6 acipenser mika… SCIE… Acipenser    mikadoi         TRUE   TRUE         
##  7 acipenser oxyr… SCIE… Acipenser    oxyrinchus      TRUE   TRUE         
##  8 acipenser ruth… SCIE… Acipenser    ruthenus        TRUE   TRUE         
##  9 acipenser schr… SCIE… Acipenser    schrencki       TRUE   TRUE         
## 10 acrocalanus gr… SCIE… Acrocalanus  gracilis        TRUE   TRUE         
## # ... with 8,390 more rows, and 44 more variables: canonicalname &amp;lt;chr&amp;gt;,
## #   canonicalnamewithmarker &amp;lt;chr&amp;gt;, canonicalnamecomplete &amp;lt;chr&amp;gt;,
## #   rankmarker &amp;lt;chr&amp;gt;, gbif_id &amp;lt;chr&amp;gt;, db &amp;lt;chr&amp;gt;, match &amp;lt;chr&amp;gt;,
## #   multiple_matches &amp;lt;chr&amp;gt;, pattern_match &amp;lt;chr&amp;gt;, uri &amp;lt;chr&amp;gt;, kingdom &amp;lt;chr&amp;gt;,
## #   phylum &amp;lt;chr&amp;gt;, class &amp;lt;chr&amp;gt;, order &amp;lt;chr&amp;gt;, family &amp;lt;chr&amp;gt;, genus &amp;lt;chr&amp;gt;,
## #   species &amp;lt;chr&amp;gt;, kingdom_id &amp;lt;chr&amp;gt;, phylum_id &amp;lt;chr&amp;gt;, class_id &amp;lt;chr&amp;gt;,
## #   order_id &amp;lt;chr&amp;gt;, family_id &amp;lt;chr&amp;gt;, genus_id &amp;lt;chr&amp;gt;, species_id &amp;lt;chr&amp;gt;,
## #   query &amp;lt;chr&amp;gt;, scientificname1 &amp;lt;chr&amp;gt;, required_fields_check &amp;lt;chr&amp;gt;,
## #   environment_aphia_worms &amp;lt;chr&amp;gt;, name_aphia_worms &amp;lt;chr&amp;gt;,
## #   aphiaid_worms &amp;lt;chr&amp;gt;, accepted_name_aphia_worms &amp;lt;chr&amp;gt;,
## #   valid_aphiaid_worms &amp;lt;chr&amp;gt;, status_aphia_worms &amp;lt;chr&amp;gt;,
## #   taxonmatch_matchcount_worms &amp;lt;chr&amp;gt;, taxonmatch_note_worms &amp;lt;chr&amp;gt;,
## #   species1 &amp;lt;chr&amp;gt;, match1 &amp;lt;chr&amp;gt;, environment &amp;lt;chr&amp;gt;, marine &amp;lt;chr&amp;gt;,
## #   brackish &amp;lt;chr&amp;gt;, freshwater &amp;lt;chr&amp;gt;, terrestrial &amp;lt;chr&amp;gt;,
## #   noenvironment &amp;lt;chr&amp;gt;, worms_id &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With our toy dataset we could easily change the columns that are our target as needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df$a &amp;lt;- as.numeric(df$a)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dates can be troublesome and in cases where you need to format date fields the &lt;a href=&#34;http://lubridate.tidyverse.org/&#34;&gt;&lt;code&gt;lubridate&lt;/code&gt;&lt;/a&gt; package will really make your life a whole lot easier.&lt;/p&gt;
&lt;p&gt;In our toy dataset while the dates are all in YYYYMMDD format (and those in your dataset may not be) the separators are different. Using &lt;code&gt;as.Date()&lt;/code&gt; won’t work for the second and third dates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as.Date(df$d)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this problem is easily handled by &lt;code&gt;lubridate::as_date&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(lubridate)
df$e &amp;lt;- lubridate::as_date(df$d)
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##       a b     c     d          e         
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;lgl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;date&amp;gt;    
## 1    1. a     TRUE  2017-12-10 2017-12-10
## 2    2. b     FALSE 20170815   2017-08-15
## 3    3. c     TRUE  2017_06_12 2017-06-12&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Charlotte Wickham offers an incredibly useful DataCamp course &lt;a href=&#34;https://www.datacamp.com/courses/working-with-dates-and-times-in-r&#34;&gt;Working with Dates and Times in R&lt;/a&gt; that will have you up and running in no time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-an-excel-file-from-a-url&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading an Excel file from a URL&lt;/h2&gt;
&lt;p&gt;In the 2015 post on importing Excel I wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“It is faster to simply download the file to your drive, or swim the Atlantic ocean, than to successfully download an excel file on http: or, in particular https:. So maybe ask yourself what is the path of least resistance and run with that.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As far as I can tell the situation is not radically different now. However, this is something that lots of people have logically wanted to do. By the power of Stack Overflow, a solution can be found. &lt;a href=&#34;https://stackoverflow.com/users/1327739/lukea&#34;&gt;Luke A&lt;/a&gt; provided the following answer to this &lt;a href=&#34;https://stackoverflow.com/questions/41368628/read-excel-file-from-a-url-using-the-readxl-package&#34;&gt;question&lt;/a&gt; on downloading excel files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
library(httr)
packageVersion(&amp;quot;readxl&amp;quot;)
# [1] ‘0.1.1’

GET(url1, write_disk(tf &amp;lt;- tempfile(fileext = &amp;quot;.xls&amp;quot;)))
df &amp;lt;- read_excel(tf, 2L)
str(df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code uses the &lt;code&gt;httr&lt;/code&gt; package to read in a .xls file from a url that is written to disk and then passed to &lt;code&gt;readxl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can wrap this into a small function with some adjustments. In this case we use &lt;code&gt;str_detect&lt;/code&gt; to detect whether the file type is included in the URL. Note that this will not address those cases (such as Google Drive) where the Excel file type is not included (see the &lt;a href=&#34;https://github.com/tidyverse/googledrive&#34;&gt;googledrive package&lt;/a&gt;). Nor will it detect other Excel file types such as &lt;code&gt;.xlsm&lt;/code&gt; for macro enabled workbooks. As this suggests the task is more complex than it might at first appear. This small function addresses common use cases but will not address all use cases.&lt;/p&gt;
&lt;p&gt;The function assumes that the file extension is contained in the URL and will spot that for us, in the case of a zip extension it will download and attempt to extract the file and if all else fails, we can provide the file extension. the &lt;code&gt;...&lt;/code&gt; informs us that other arguments such as &lt;code&gt;col_types =&lt;/code&gt; can be passed to the function and will be picked up by &lt;code&gt;read_excel&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;readxl_online &amp;lt;- function(url, type = NULL, ...) {
    test &amp;lt;- stringr::str_detect(url, &amp;quot;[.]xls|[.]zip&amp;quot;)
    if (test == FALSE) {
        print(message(&amp;quot;Expecting file extension of type .xlsx, .xls or .zip. Check the URL or the data source for the correct file extension and use the type argument&amp;quot;))
    }
    # test for individual file extensions for xls use look forward, xls not
    # followed by x
    t1 &amp;lt;- stringr::str_detect(url, &amp;quot;[.]xlsx&amp;quot;)
    t2 &amp;lt;- stringr::str_detect(url, &amp;quot;[.]xls(?!x)&amp;quot;)
    tz &amp;lt;- stringr::str_detect(url, &amp;quot;[.]zip&amp;quot;)
    if (t1 == TRUE) {
        type = &amp;quot;.xlsx&amp;quot;
    }
    if (t2 == TRUE) {
        type = &amp;quot;.xls&amp;quot;
    }
    if (tz == TRUE) {
        httr::GET(url, write_disk(&amp;quot;tmp.zip&amp;quot;, overwrite = TRUE))
        tmp &amp;lt;- unzip(&amp;quot;tmp.zip&amp;quot;)
        # On osx more than one file name is returned, select first element.
        df &amp;lt;- readxl::read_excel(tmp[[1]])
        return(df)
    }
    if (!is.null(type)) {
        type = type
        
    }
    df &amp;lt;- httr::GET(url, write_disk(paste0(&amp;quot;tmp&amp;quot;, type), overwrite = TRUE))
    df &amp;lt;- readxl::read_excel(paste0(&amp;quot;tmp&amp;quot;, type))
    
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not perfect, but it is a start. We can now run a test on different data types to see if it will work. These urls are all from excel files on Github. Github file urls are actually placeholders and so we need to follow the link and copy the Raw file url (see raw=true in the url). Note also that these urls are all &lt;code&gt;https:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The .xls case:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfxls &amp;lt;- readxl_online(&amp;quot;https://github.com/wipo-analytics/opensource-patent-analytics/blob/master/2_datasets/pizza_all_24294/patentscope_pizza_1940_2005_9659.xls?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The xlsx case:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfxlsx &amp;lt;- readxl_online(&amp;quot;https://github.com/wipo-analytics/opensource-patent-analytics/blob/master/2_datasets/ewaste/ewaste.xlsx?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The zip file case:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dfzip &amp;lt;- readxl_online(&amp;quot;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/taxonomy_final.zip?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is always a good thing if functions fail fast and provide a helpful message.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;error &amp;lt;- readxl_online(&amp;quot;https://www.google.co.uk/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This prints the expected message.&lt;/p&gt;
&lt;p&gt;“Expecting file extension of type .xlsx, .xls or .zip. Check the URL or the data source for the correct file extension and use the type argument”&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidying-column-names-with-janitor&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tidying column names with &lt;code&gt;janitor&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One issue once you have your data in R is that column names in excel files often contain mixed case names and spaces or other characters such as brackets that can be awkward to work with in R. To solve that an easy option is to use the recent &lt;code&gt;janitor&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;janitor&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this we need an excel worksheet with noisy names. For R coding Blue Peter fans…“Here is one we prepared earlier”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;noisycols &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/blog/content/post/noisydf.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;noisy(yes)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;really_,Noisy;!&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;EVEN noisier !?*$!&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;OMG- I_can’t-***//believe?it|&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;these&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;are&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;not&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;noisiest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;column&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;names&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;the&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;world,&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;just&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;tribute&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NANA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NANANANA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(janitor)
noisycols1 &amp;lt;- janitor::clean_names(noisycols)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;noisy_yes&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;really_noisy&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;even_noisier&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;omg_i_can_t_believe_it&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;these&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;are&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;not&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;the&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;noisiest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;column&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;names&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;in&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;the&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;world,&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;just&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;tribute&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NANA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NANANANA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This does a very good job of cleaning up names but may not always catch everything. If you have particular needs the &lt;a href=&#34;https://github.com/tidyverse/stringr&#34;&gt;&lt;code&gt;stringr&lt;/code&gt;&lt;/a&gt; package (now installed with the &lt;code&gt;tidyverse&lt;/code&gt;) is the go to package. Try the &lt;code&gt;str_replace_all&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;If you need more help try the &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf&#34;&gt;Basic Regular Expressions Cheatsheet in R&lt;/a&gt; or the chapter on strings in Hadley Wickham’s book &lt;a href=&#34;http://r4ds.had.co.nz/strings.html&#34;&gt;R for Data Science&lt;/a&gt;. Charlotte Wickham also offers a Data Camp course on &lt;a href=&#34;https://www.datacamp.com/courses/string-manipulation-in-r-with-stringr&#34;&gt;String Manipulation in R with stringr&lt;/a&gt;. When it comes to working with strings &lt;code&gt;stringr&lt;/code&gt; is your friend and if that doesn’t solve the problem then try the &lt;code&gt;stringi&lt;/code&gt; package that powers &lt;code&gt;stringr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exporting-to-excel&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exporting to Excel&lt;/h2&gt;
&lt;p&gt;In the earlier post I wrote about using &lt;code&gt;write.xlsx()&lt;/code&gt; from the &lt;code&gt;xlsx&lt;/code&gt; package. That is still a very good option. However, as a personal preference I have now switched over to the &lt;code&gt;writexl&lt;/code&gt; package as I find it easier to remember and use. It is also an &lt;a href=&#34;https://github.com/ropensci/writexl&#34;&gt;ROpenSci package&lt;/a&gt; and I use a lot of ROpenSci packages. &lt;code&gt;writexl&lt;/code&gt; has the added bonus that Clippy appears in the documentation to brighten up your day… or drive you insane… as the case may be. So, if you prefer to be a curmudgeon about Clippy you may want to use the xlsx package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;writexl&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We simply specify the file and the name of the file we want to write. An additional argument &lt;code&gt;col_names = TRUE&lt;/code&gt; is set to TRUE by default so you only need to specify that if you want the value to be FALSE.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(writexl)
writexl::write_xlsx(df, path = &amp;quot;df.xlsx&amp;quot;, col_names = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also now write multiple sheets by specifying the data frames in a list and passing them to write_xlsx.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(writexl)
tmp &amp;lt;- list(df, noisycols1)
write_xlsx(tmp, &amp;quot;tmp.xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;There we have it. Reading and writing Excel files in R is now way way easier than it was just a couple of years ago thanks to the dedicated work of those behind &lt;code&gt;readxl&lt;/code&gt; (Hadley Wickham and Jenny Bryan) and &lt;code&gt;writexl&lt;/code&gt; by Jeroen Ooms and John McNamara. Other packages will take you to the same place but these are my go to packages. Community contributions are helping to solve the mystery of reading Excel files from urls and we might hope that at some point &lt;code&gt;readxl&lt;/code&gt; may address this problem.&lt;/p&gt;
&lt;p&gt;If you would like to learn more on importing data into R then try the DataCamp course on &lt;a href=&#34;https://www.datacamp.com/tracks/importing-cleaning-data-with-r&#34;&gt;Importing Data &amp;amp; Cleaning with R&lt;/a&gt; that covers Excel.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dr. Evil meets the robotstxt package</title>
      <link>/using-robotstxt-in-r/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/using-robotstxt-in-r/</guid>
      <description>&lt;p&gt;I am fairly new to webscraping in R using &lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest&lt;/a&gt; and one question is whether a site gives permission for scraping. This information is often contained in the robots.txt file on a website. So, I’m briefly going to explore the &lt;a href=&#34;https://ropensci.org/&#34;&gt;ROpenSci&lt;/a&gt; &lt;a href=&#34;https://github.com/ropenscilabs/robotstxt&#34;&gt;robotstxt&lt;/a&gt; package by &lt;a href=&#34;https://github.com/petermeissnerpackage&#34;&gt;Peter Meissner&lt;/a&gt;. &lt;a href=&#34;https://github.com/ropenscilabs/robotstxt&#34;&gt;robotstxt&lt;/a&gt; provides easy access to the robots.txt file for a domain from R.&lt;/p&gt;
&lt;p&gt;I’m slowly working on a new R data package for underwater geographic feature names as part of a Norwegian Research Council funded project &lt;code&gt;biospolar&lt;/code&gt; on innovation involving biodiversity in marine polar areas. One of the main data sources for the package is the &lt;a href=&#34;https://www.gebco.net/data_and_products/undersea_feature_names/&#34;&gt;General Bathymetric Chart of the Oceans or GEBCO Gazeteer&lt;/a&gt;. I’m also going to be bringing in data from the &lt;a href=&#34;https://vents-data.interridge.org/&#34;&gt;Interridge database of hydrothermal vents&lt;/a&gt; and so wanted to understand whether I am just free to go ahead.&lt;/p&gt;
&lt;p&gt;The robots.txt content is advisory, and well we could always choose to be Dr. Evil. If my wife would let me have a cat it would definitely be called Mr. Bigglesworth. But it strikes me that building a package for a data source that tries to prohibit scraping might not be a brilliant idea.&lt;/p&gt;
&lt;p&gt;There are a bunch of functions in the &lt;code&gt;robotstxt&lt;/code&gt; package but I’m just going to use the main one &lt;code&gt;robotstxt()&lt;/code&gt;. Take a look at the &lt;a href=&#34;https://cran.r-project.org/web/packages/robotstxt/vignettes/using_robotstxt.html&#34;&gt;vignette&lt;/a&gt; for more information. For a very quick check on whether scraping on a path is allowed try the &lt;code&gt;paths_allowed()&lt;/code&gt; function. I’ll come back to that at the end.&lt;/p&gt;
&lt;p&gt;The first place I am going to look is the main GEBCO domain.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(robotstxt)
gebco &amp;lt;- robotstxt(&amp;quot;https://www.gebco.net&amp;quot;)
gebco&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $domain
## [1] &amp;quot;https://www.gebco.net&amp;quot;
## 
## $text
## [1] &amp;quot;Sitemap: https://www.gebco.net/sitemap.xml \r\n\r\nUser-agent: *\r\nHost: www.gebco.net\r\nDisallow: /cgi-bin/\r\nDisallow: /perl/\r\nDisallow: /css/\r\nDisallow: /js/\r\nDisallow: /_mm/\r\nDisallow: /_notes/\r\n\n[... 36 lines omitted ...]&amp;quot;
## 
## $bots
## [1] &amp;quot;*&amp;quot;                &amp;quot;Googlebot&amp;quot;        &amp;quot;Googlebot-Image&amp;quot; 
## [4] &amp;quot;Googlebot-Mobile&amp;quot;
## 
## $comments
## [1] line    comment
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $permissions
##                         field useragent     value
## 1                    Disallow         * /cgi-bin/
## 2                    Disallow         *    /perl/
## 3                    Disallow         *     /css/
## 4                    Disallow         *      /js/
## 5                    Disallow         *     /_mm/
## 6                    Disallow         *  /_notes/
## 7                                                
## 8 [...  31 items omitted ...]                    
## 
## $crawl_delay
## [1] field     useragent value    
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $host
##   field useragent         value
## 1  Host         * www.gebco.net
## 
## $sitemap
##     field useragent                             value
## 1 Sitemap         * https://www.gebco.net/sitemap.xml
## 
## $other
## [1] field     useragent value    
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $robexclobj
## &amp;lt;Robots Exclusion Protocol Object&amp;gt;
## $check
## function (paths = &amp;quot;/&amp;quot;, bot = &amp;quot;*&amp;quot;) 
## {
##     spiderbar::can_fetch(obj = self$robexclobj, path = paths, 
##         user_agent = bot)
## }
## &amp;lt;bytecode: 0x7fc3af22a750&amp;gt;
## &amp;lt;environment: 0x7fc3af24bef8&amp;gt;
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;robotstxt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns a list from the robots txt where the main bit I am interested in is the data frame under gebco$permissions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;field&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;useragent&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/cgi-bin/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/perl/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/css/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/js/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_mm/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_notes/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_baks/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/MMWIP/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/cgi-bin/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/perl/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/css/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/js/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_mm/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_notes/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_baks/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/MMWIP/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*/log.gif&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*_baks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*_notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*.csi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*.vcf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/cgi-bin/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/perl/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/css/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/js/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_mm/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_notes/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/_baks/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/MMWIP/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Image&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*/log.gif&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Mobile&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Mobile&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;*/log.gif&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Mobile&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*_baks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Disallow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Googlebot-Mobile&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/*_notes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;What is of interest here are the entries under Value which can be a bit difficult to interpret. With the help of the handy &lt;a href=&#34;https://en.wikipedia.org/wiki/Robots_exclusion_standard&#34;&gt;Wikipedia article on the Robots Exclusion Standard&lt;/a&gt; I can see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Disallow + *&lt;/code&gt; means to stay out of the website altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Disallow + /xyz&lt;/code&gt; means to stay out of the specific directories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Disallow Googlebot&lt;/code&gt; means that the named bot should stay out of either the website or (as in this case) specific directories. Note that Googlebot appears to be in the naughty seat because the site is more specific about what it should stay out of while others would be free to enter?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the GEBCO data files that I am interested in are not hosted on the gebco.net domain but on the &lt;a href=&#34;https://www.ngdc.noaa.gov/&#34;&gt;NOAA National Centers for Environmental Information domain&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;noaa &amp;lt;- robotstxt(domain = &amp;quot;https://www.ngdc.noaa.gov&amp;quot;)
noaa&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $domain
## [1] &amp;quot;https://www.ngdc.noaa.gov&amp;quot;
## 
## $text
## [1] &amp;quot;User-agent: *\nCrawl-delay: 60\nDisallow: /cgi-bin\nDisallow: /dmsp/cgi-bin\nDisallow: /dmsp/data\nDisallow: /dmsp/include\nDisallow: /dmsp/protected\nDisallow: /eog\nDisallow: /geomag/cdroms\nDisallow: /geomag/data\n\n[... 67 lines omitted ...]&amp;quot;
## 
## $bots
## [1] &amp;quot;*&amp;quot;                                                                                            
## [2] &amp;quot;LinkChecker&amp;quot;                                                                                  
## [3] &amp;quot;siteimprove&amp;quot;                                                                                  
## [4] &amp;quot;Mozilla/5.0(compatible;MSIE10.0;WindowsNT6.1;Trident/6.0)LinkCheckbySiteimprove.com&amp;quot;          
## [5] &amp;quot;Mozilla/5.0(compatible;MSIE10.0;WindowsNT6.1;Trident/6.0)SiteCheck-sitecrawlbySiteimprove.com&amp;quot;
## [6] &amp;quot;HTMLValidatorbysiteimprove.com/1.3&amp;quot;                                                           
## 
## $comments
## [1] line    comment
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $permissions
##                         field useragent           value
## 1                    Disallow         *        /cgi-bin
## 2                    Disallow         *   /dmsp/cgi-bin
## 3                    Disallow         *      /dmsp/data
## 4                    Disallow         *   /dmsp/include
## 5                    Disallow         * /dmsp/protected
## 6                    Disallow         *            /eog
## 7                                                      
## 8 [...  73 items omitted ...]                          
## 
## $crawl_delay
##         field useragent value
## 1 Crawl-delay         *    60
## 
## $host
## [1] field     useragent value    
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $sitemap
## [1] field     useragent value    
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $other
## [1] field     useragent value    
## &amp;lt;0 rows&amp;gt; (or 0-length row.names)
## 
## $robexclobj
## &amp;lt;Robots Exclusion Protocol Object&amp;gt;
## $check
## function (paths = &amp;quot;/&amp;quot;, bot = &amp;quot;*&amp;quot;) 
## {
##     spiderbar::can_fetch(obj = self$robexclobj, path = paths, 
##         user_agent = bot)
## }
## &amp;lt;bytecode: 0x7fc3af22a750&amp;gt;
## &amp;lt;environment: 0x7fc3aee6a4e0&amp;gt;
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;robotstxt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The NOAA robotstxt provides some different information. For example, NOAA specifies a crawl delay of 60 seconds which tells me to build in a delay of 60 seconds to a call.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;noaa$text&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## User-agent: *
## Crawl-delay: 60
## Disallow: /cgi-bin
## Disallow: /dmsp/cgi-bin
## Disallow: /dmsp/data
## Disallow: /dmsp/include
## Disallow: /dmsp/protected
## Disallow: /eog
## Disallow: /geomag/cdroms
## Disallow: /geomag/data
## Disallow: /geomag/EMM/data
## Disallow: /geomag/pmag/datafiles
## Disallow: /geomag/WMM/data
## Disallow: /globe
## Disallow: /hazard/data
## Disallow: /hazard/img 
## Disallow: /IAGA/cgi-bin
## Disallow: /idb
## Disallow: /ionosonde
## Disallow: /mgg/cgi-bin
## Disallow: /mgg/curator/data
## Disallow: /mgg/curator/userfiles
## Disallow: /mgg/dat
## Disallow: /mgg/ecs/data
## Disallow: /mgg/gdas/data
## Disallow: /mgg/geology/data
## Disallow: /mgg/geology/odp/data
## Disallow: /mgg/grids/data
## Disallow: /mgg/oracle
## Disallow: /mgg/tmp
## Disallow: /mgg/trk
## Disallow: /ngdc/cgi-bin
## Disallow: /ngdc/hn
## Disallow: /ngdc/Counter
## Disallow: /ngdc/NOAAServer/adm
## Disallow: /ngdc/NOAAServer/converters
## Disallow: /ngdc/NOAAServer/gif
## Disallow: /ngdc/NOAAServer/java
## Disallow: /ngdc/NOAAServer/lib
## Disallow: /ngdc/NOAAServer_N
## Disallow: /ngdc/Store
## Disallow: /nmmr
## Disallow: /nndc
## Disallow: /paleo
## Disallow: /riwebapp/rest
## Disallow: /seg/cgi-bin
## Disallow: /stp/bin
## Disallow: /stp/cgi-bin
## Disallow: /stp/drap/data
## Disallow: /stp/include
## Disallow: /stp/image
## Disallow: /stp/images
## Disallow: /stp/include
## Disallow: /stp/iono/drap
## Disallow: /stp/iono/ustec/products
## Disallow: /stp/satellite/poes/dataaccess.html
## Disallow: /stp/satellite/goes/dataaccess.html
## Disallow: /sxi/servlet/sxibrowse
## Disallow: /sxi/servlet/sximovie
## Disallow: /sxi/servlet/sxisearch
## Disallow: /stp/IONO/ionosonde
## Disallow: /thredds
## Disallow: /wdc/cgi-bin
## 
## 
## User-agent: LinkChecker
## Disallow:
## 
## User-agent: siteimprove
## Disallow: /
## User-agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0) LinkCheck by Siteimprove.com
## Disallow: /
## User-agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0) SiteCheck-sitecrawl by Siteimprove.com
## Disallow: /
## User-agent: HTML Validator by siteimprove.com/1.3
## Disallow: /&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then see a list of disallowed directories and in this case I am interested in the &lt;code&gt;https://www.ngdc.noaa.gov/gazetteer/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The dir I am interested in for the package is not on the list so I think I am free to go ahead… yay!&lt;/p&gt;
&lt;p&gt;If I wanted to do this more quickly I would use the &lt;code&gt;paths_allowed()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;paths_allowed(&amp;quot;https://www.ngdc.noaa.gov/gazetteer/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, there we have it. If we prefer to be good web scraping citizens rather than the Dr. Evil of web scraping in R then the &lt;code&gt;robotstxt&lt;/code&gt; package will help us out. On the other hand we could just be evil and see what happens. I’m off to stroke Mr. Bigglesworth.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating an Infographic with infogram</title>
      <link>/infographics/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/infographics/</guid>
      <description>&lt;p&gt;In this article we will use RStudio to prepare patent data for visualisation in an infographic using the online software tool &lt;a href=&#34;https://infogram.com/?rc=paid0sem0branded0search0&amp;amp;gclid=EAIaIQobChMIw6KgvMiq2AIViLvtCh2fpgxhEAAYASAAEgKR2PD_BwE&#34;&gt;infogram&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Infographics are a popular way of presenting data in a way that is easy for a reader to understand without reading a long report. Infographics are well suited to presenting summaries of data with simple messages about key findings. A good infographic can encourage the audience to read a detailed report and is a tool for engagement with audiences during presentations of the findings of patent research.&lt;/p&gt;
&lt;p&gt;Some patent offices have already been creating infographics as part of their reports to policy makers and other clients. The Instituto Nacional de Propiedade Industrial (INPI) in Brazil produces regular two page &lt;a href=&#34;http://www.inpi.gov.br/menu-servicos/informacao/radares-tecnologicos&#34;&gt;Technology Radar&lt;/a&gt; (Radar Tecnologico) consisting of charts and maps that briefly summarise more detailed research on subjects such as &lt;a href=&#34;http://www.inpi.gov.br/menu-servicos/arquivos-cedin/n08_radar_tecnologico_nano_residuos_versao_resumida_ingles_atualizada_20160122.pdf&#34;&gt;Nanotechnology in Waste Management&lt;/a&gt;. &lt;a href=&#34;http://www.wipo.int/patentscope/en/programs/patent_landscapes/&#34;&gt;WIPO Patent Landscape Reports&lt;/a&gt;, which go into depth on patent activity for a particular area, are accompanied by one page infographics that have proved very popular such as the infographic accompanying a recent report on &lt;a href=&#34;http://www.wipo.int/export/sites/www/patentscope/en/programs/patent_landscapes/reports/documents/assistivedevices_infographic.pdf&#34;&gt;assistive devices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A growing number of companies are offering online infographic software services such as &lt;a href=&#34;https://infogr.am/app/#/library&#34;&gt;infogr.am&lt;/a&gt;,&lt;a href=&#34;http://www.easel.ly&#34;&gt;easel.ly&lt;/a&gt; &lt;a href=&#34;https://magic.piktochart.com/templates&#34;&gt;piktochart.com&lt;/a&gt;, &lt;a href=&#34;https://www.canva.com/create/infographics/&#34;&gt;canva.com&lt;/a&gt; or &lt;a href=&#34;https://venngage.com&#34;&gt;venngage.com&lt;/a&gt; to mention only a selection of the offerings out there. The &lt;a href=&#34;http://www.coolinfographics.com/tools/&#34;&gt;Cool Infographics website&lt;/a&gt; provides a useful overview of available tools.&lt;/p&gt;
&lt;p&gt;One feature of many of these services is that they are based on a freemium model. Creating graphics is free but the ability to export files and the available formats for export of your masterpiece (e.g. high resolution or .pdf) often depend on upgrading to a monthly account at varying prices. In this chapter we test drive &lt;a href=&#34;https://infogr.am/app/#/library&#34;&gt;infogr.am&lt;/a&gt; as a chart friendly service, albeit with export options that depend on a paid account.&lt;/p&gt;
&lt;p&gt;This article is divided into two sections.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;In part 1 we focus on using RStudio to prepare patent data for visualisation in infographics software using the &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;stringr&lt;/code&gt; packages. This involves dealing with common problems with patent data such as concatenated fields, white space and creating counts of data fields. Part 1 is intended for those starting out using R and assumes no prior knowledge of R.&lt;/li&gt;
&lt;li&gt;In part 2 we produce an infographic from the data using &lt;a href=&#34;https://infogr.am/app/#/library&#34;&gt;infogr.am&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This article is now a chapter in the &lt;a href=&#34;https://wipo-analytics.github.io/&#34;&gt;WIPO Manual on Open Source Patent Analytics&lt;/a&gt;. You can read the chapter in electronic book format &lt;a href=&#34;https://wipo-analytics.github.io/patent-infographics-with-r.html&#34;&gt;here&lt;/a&gt; and find all the materials including presentations at the &lt;a href=&#34;https://github.com/wipo-analytics&#34;&gt;WIPO Analytics Github homepage&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;To start with we need to ensure that RStudio and R for your operating system are installed by following the instructions on the RStudio website &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;here&lt;/a&gt;. Do not forget to follow the link to also &lt;a href=&#34;https://cran.rstudio.com&#34;&gt;install R for your operating system&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When working in RStudio it is good practice to work with projects. This will keep all of the files for a project in the same folder. To create a project go to File, New Project and create a project. Call the project something like infographic. Any file you create and save for the project will now be listed under the Files tab in RStudio.&lt;/p&gt;
&lt;p&gt;R works using packages (libraries) and there are around 7,490 of them for a whole range of purposes. We will use just a few of them. To install a package we use the following. Copy and paste the code into the Console and press enter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)  # the group of packages you will need&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Packages can also be installed by selecting the Packages tab and typing the name of the package.&lt;/p&gt;
&lt;p&gt;To load the packages (libraries) use the following or check the tick box in the Packages pane.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now ready to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-a-.csv-file-using-readr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load a .csv file using &lt;code&gt;readr&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We will work with the &lt;code&gt;pizza_medium_clean&lt;/code&gt; dataset in the online &lt;a href=&#34;https://github.com/wipo-analytics/opensource-patent-analytics/tree/master/2_datasets&#34;&gt;Github Manual repository&lt;/a&gt;. If manually downloading a file remember to click on the file name and select &lt;code&gt;Raw&lt;/code&gt; to download the actual file.&lt;/p&gt;
&lt;p&gt;We can use the easy to use &lt;code&gt;read_csv()&lt;/code&gt; function from the &lt;code&gt;readr&lt;/code&gt; package to quickly read in our pizza data directly from the Github repository. Note the &lt;code&gt;raw&lt;/code&gt; at the beginning of the filename.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
pizza &amp;lt;- read_csv(&amp;quot;https://github.com/wipo-analytics/opensource-patent-analytics/blob/master/2_datasets/pizza_medium_clean/pizza.csv?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;readr&lt;/code&gt; will display a warning for the file arising from its efforts to parse publication dates on import. We will ignore this as we will not be using this field.&lt;/p&gt;
&lt;p&gt;As an alternative to importing directly from Github download the file and in RStudio use &lt;code&gt;File &amp;gt; Import Dataset &amp;gt; From .csv&lt;/code&gt;. If you experience problems with direct import of a file the File &amp;gt; Import Dataset approach will give you a range of easy to use controls for figuring this out (e.g. where .csv is actually a tab separated file).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;viewing-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Viewing Data&lt;/h2&gt;
&lt;p&gt;We can view data in a variety of ways.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;In the console:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9,996 x 31
##    applicants_cleaned    applicants_clean… applicants_orga… applicants_original
##    &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;              
##  1 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
##  2 Ventimeglia Jamie Jo… People            &amp;lt;NA&amp;gt;             Ventimeglia Jamie …
##  3 Cordova Robert; Mart… People            &amp;lt;NA&amp;gt;             Cordova Robert;Mar…
##  4 Lazarillo De Tormes … Corporate         Lazarillo De To… LAZARILLO DE TORME…
##  5 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
##  6 Depoortere, Thomas    People            &amp;lt;NA&amp;gt;             DEPOORTERE, Thomas 
##  7 Frisco Findus Ag      Corporate         Frisco Findus Ag FRISCO-FINDUS AG   
##  8 Bicycle Tools Incorp… Corporate         Bicycle Tools I… Bicycle Tools Inco…
##  9 Castiglioni, Carlo    People            &amp;lt;NA&amp;gt;             CASTIGLIONI, CARLO 
## 10 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
## # ... with 9,986 more rows, and 27 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;,
## #   publication_country_code &amp;lt;chr&amp;gt;, publication_country_name &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, publication_year &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;In Environment click on the blue arrow to see in the environment. Keep clicking to open a new window with the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;View()&lt;/code&gt; command (for data.frames and tables)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;View(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If possible use the View() command or environment. The difficulty with the console is that large amounts of data will simply stream past.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;identifying-types-of-object&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Identifying Types of Object&lt;/h2&gt;
&lt;p&gt;We often want to know what type of object we are working with and more details about the object so we know what to do later. Here are some of the most common commands for obtaining information about objects.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pizza)  ## type of object
names(pizza)  ## names of variables
str(pizza)  ## structure of object
dim(pizza)  ## dimensions of the object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most useful command in this list is &lt;code&gt;str()&lt;/code&gt; because this allows us to access the structure of the object and see its type.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(pizza, max.level = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;str()&lt;/code&gt; is particularly useful because we can see the names of the fields (vectors) and their type. Most patent data is a character vector with dates forming integers.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;working-with-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working with Data&lt;/h2&gt;
&lt;p&gt;We will often want to select aspects of our data to focus on a specific set of columns or to create a graph. We might also want to add information, notably numeric counts.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dplyr&lt;/code&gt; package provides a set of very handy functions for selecting, adding and counting data. The &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;stringr&lt;/code&gt; packages are sister packages that contain a range of other useful functions for working with our data. We have covered some of these in other chapters on graphing using R but will go through them quickly and then pull them together into a function that we can use across our dataset.&lt;/p&gt;
&lt;div id=&#34;select&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Select&lt;/h3&gt;
&lt;p&gt;In this case we will start by using the &lt;code&gt;select()&lt;/code&gt; function to limit the data to specific columns. We can do this using their names or their numeric position (best for large number of columns e.g. 1:31). In &lt;code&gt;dplyr&lt;/code&gt;, unlike most R packages, existing character columns do not require &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza_number &amp;lt;- select(pizza, publication_number, publication_year)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a new data.frame that contains two columns. One with the year and one with the publication number. Note that we have created a new object called pizza_number using &lt;code&gt;&amp;lt;-&lt;/code&gt; and that after &lt;code&gt;select()&lt;/code&gt; we have named our original data and the columns we want. A fundamental feature of select is that it will drop columns that we do not name. So it is best to create a new object using &lt;code&gt;&amp;lt;-&lt;/code&gt; if you want to keep your original data for later work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-data-with-mutate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding data with &lt;code&gt;mutate()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mutate()&lt;/code&gt; is a &lt;code&gt;dplyr&lt;/code&gt; function that allows us to add data based on existing data in our data frame, for example to perform a calculation. In the case of patent data we normally lack a numeric field to use for counts. We can however assign a value to our publication field by using sum() and the number 1 as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza_number &amp;lt;- mutate(pizza_number, n = sum(publication_number = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we view &lt;code&gt;pizza_number&lt;/code&gt; we now have a value of 1 in the column &lt;code&gt;n&lt;/code&gt; for each publication number.&lt;/p&gt;
&lt;p&gt;Note that in patent data a priority, application, publication or family number may occur multiple times and we would want to reduce the dataset to distinct records. For that we would use &lt;code&gt;n_distinct(pizza_number$publication_number)&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; or &lt;code&gt;unique(pizza_number$publication_number)&lt;/code&gt; from base R. Because the publication numbers are unique we can proceed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;counting-data-using-count&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Counting data using &lt;code&gt;count()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;At the moment, we have multiple instances of the same year (where a patent publication occurs in that year). We now want to calculate how many of our documents were published in each year. To do that we will use the &lt;code&gt;dplyr&lt;/code&gt; function &lt;code&gt;count()&lt;/code&gt;. We will use the publication_year and add &lt;code&gt;wt =&lt;/code&gt; (for weight) with &lt;code&gt;n&lt;/code&gt; as the value to count.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza_total &amp;lt;- count(pizza_number, publication_year, wt = n)
pizza_total&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 58 x 2
##    publication_year    nn
##               &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1             1940    1.
##  2             1954    1.
##  3             1956    1.
##  4             1957    1.
##  5             1959    1.
##  6             1962    1.
##  7             1964    2.
##  8             1966    1.
##  9             1967    1.
## 10             1968    8.
## # ... with 48 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we now examine pizza_total, we will see the publication year and a summed value for the records in that year.&lt;/p&gt;
&lt;p&gt;This raises the question of how we know that R has calculated the count correctly. We already know that there are 9996 records in the pizza dataset. To check our count is correct we can simply use sum and select the column we want to sum using &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
sum(pizza_total$nn)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9996&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, all is good and we can move on. The &lt;code&gt;$&lt;/code&gt; sign is one of the main ways of subsetting to tell R that we want to work with a specific column (the others are “[” and “[[”).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rename-a-field-with-rename&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rename a field with &lt;code&gt;rename()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Next we will use &lt;code&gt;rename()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; to rename the fields. Note that understanding which field require quote marks can take some effort. In this case renaming the character vector publication_year as “pubyear” requires quotes while renaming the numeric vector “n” does not.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza_total &amp;lt;- rename(pizza_total, pubyear = publication_year, publications = nn) %&amp;gt;% 
    print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 58 x 2
##    pubyear publications
##      &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
##  1    1940           1.
##  2    1954           1.
##  3    1956           1.
##  4    1957           1.
##  5    1959           1.
##  6    1962           1.
##  7    1964           2.
##  8    1966           1.
##  9    1967           1.
## 10    1968           8.
## # ... with 48 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-quickplot-with-qplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Make a quickplot with &lt;code&gt;qplot()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Using the &lt;code&gt;qplot()&lt;/code&gt; function in &lt;code&gt;ggplot2&lt;/code&gt; we can now draw a quick line graph. Note that qplot() is unusual in R because the data (pizza_total) appears after the coordinates. We will specify that we want a line using &lt;code&gt;geom =&lt;/code&gt; (if geom is left out it will be a scatter plot). This will give us an idea of what our plot might look like in our infographic and actions we might want to take on the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
qplot(x = pubyear, y = publications, data = pizza_total, geom = &amp;quot;line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2016-04-20-infographics_files/figure-html/qplot-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![](images_foot/infogram/fig1_infographic.png)---&gt;
&lt;p&gt;The plot reveals a data cliff in recent years. This normally reflects a lack of data for the last 2-3 years as recent documents feed through the system en route to publication.&lt;/p&gt;
&lt;p&gt;It is a good idea to remove the data cliff by cutting the data 2-3 years prior to the present. In some cases two years is sufficient, but 3 years is a good rule of thumb.&lt;/p&gt;
&lt;p&gt;We also have long tail of data with limited data from 1940 until the late 1970s. Depending on our purposes with the analysis we might want to keep this data (for historical analysis) or to focus in on a more recent period.&lt;/p&gt;
&lt;p&gt;We will limit our data to specific values using the &lt;code&gt;dplyr&lt;/code&gt; function &lt;code&gt;filter()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-data-using-filter&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Filter data using &lt;code&gt;filter()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In contrast with &lt;code&gt;select()&lt;/code&gt; which works with columns, &lt;code&gt;filter()&lt;/code&gt; in &lt;code&gt;dplyr&lt;/code&gt; works with rows. In this case we need to filter on the values in the pubyear column. To remove the data prior to 1990 we will use the greater than or equal to operator &lt;code&gt;&amp;gt;=&lt;/code&gt; on the pubyear column and we will use the less than or equal to &lt;code&gt;&amp;lt;=&lt;/code&gt; operator on the values after 2012.&lt;/p&gt;
&lt;p&gt;One strength of &lt;code&gt;filter()&lt;/code&gt; in &lt;code&gt;dplyr&lt;/code&gt; is that it is easy to filter on multiple values in the same expression (unlike the very similar filter function in base R). The use of &lt;code&gt;filter()&lt;/code&gt; will also remove the 30 records where the year is recorded as NA (Not Available). We will write this file to disk using the simple &lt;code&gt;write_csv()&lt;/code&gt; from &lt;code&gt;readr&lt;/code&gt;. To use &lt;code&gt;write_csv()&lt;/code&gt; we first name our data (&lt;code&gt;pizza_total&lt;/code&gt;) and then provide a file name with a .csv extension. In this case and other examples below we have used a descriptive file name bearing in mind that Windows systems have limitations on the length and type of characters that can be used in file names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(readr)
pizza_total &amp;lt;- filter(pizza_total, pubyear &amp;gt;= 1990, pubyear &amp;lt;= 2012)
write_csv(pizza_total, &amp;quot;pizza_total_1990_2012.csv&amp;quot;)
pizza_total&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 2
##    pubyear publications
##      &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
##  1    1990         139.
##  2    1991         154.
##  3    1992         212.
##  4    1993         201.
##  5    1994         162.
##  6    1995         173.
##  7    1996         180.
##  8    1997         186.
##  9    1998         212.
## 10    1999         290.
## # ... with 13 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we print pizza_total to the console we will see that the data now covers the period 1990-2012. When using &lt;code&gt;filter()&lt;/code&gt; on values in this way it is important to remember to apply this filter to any subsequent operations on the data (such as applicants) so that it matches the same data period.&lt;/p&gt;
&lt;p&gt;To see our .csv file we can head over to the Files tab and, assuming that we have created a project, the file will now appear in the list of project files. Clicking on the file name will display the raw unformatted data in RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;simplify-code-with-pipes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simplify code with pipes &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;So far we have handled the code one line at a time. But, one of the great strengths of using a programming language is that we can run multiple lines of code together. There are two basic ways that we can do this.&lt;/p&gt;
&lt;p&gt;We will create a new temporary object &lt;code&gt;df&lt;/code&gt; to demonstrate this.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The standard way&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)
df &amp;lt;- select(pizza, publication_number, publication_year)
df &amp;lt;- mutate(df, n = sum(publication_number = 1))
df &amp;lt;- count(df, publication_year, wt = n)
df &amp;lt;- rename(df, pubyear = publication_year, publications = nn)
df &amp;lt;- filter(df, pubyear &amp;gt;= 1990, pubyear &amp;lt;= 2012)
qplot(x = pubyear, y = publications, data = df, geom = &amp;quot;line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code we have just created is six lines long. If we select all of this code and run it in one go it will produce our graph.&lt;/p&gt;
&lt;p&gt;One feature of this code is that each time we run a function on the object total we name it at the start of each function (e.g. mutate(df…)) and then we overwrite the object.&lt;/p&gt;
&lt;p&gt;We can save quite a lot of typing and reduce the complexity of the code using the pipe operator introduced by the the &lt;code&gt;magrittr&lt;/code&gt; package and then adopted in Hadley Wickham’s data wrangling and tidying packages.&lt;/p&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using pipes &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pipes are now a very popular way of writing R code because they simplify writing R code and speed it up. The most popular pipe is &lt;code&gt;%&amp;gt;%&lt;/code&gt; which means “this” then “that”. In this case we are going to create a new temporary object &lt;code&gt;df1&lt;/code&gt; by first applying select to pizza, then mutate, count, rename and filter. Note that we only name our dataset once (in &lt;code&gt;select()&lt;/code&gt;) and we do not need to keep overwriting the object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)
df1 &amp;lt;- select(pizza, publication_number, publication_year) %&amp;gt;% mutate(n = sum(publication_number = 1)) %&amp;gt;% 
    count(publication_year, wt = n) %&amp;gt;% rename(pubyear = publication_year, publications = nn) %&amp;gt;% 
    filter(pubyear &amp;gt;= 1990, pubyear &amp;lt;= 2012) %&amp;gt;% qplot(x = pubyear, y = publications, 
    data = ., geom = &amp;quot;line&amp;quot;) %&amp;gt;% print()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2016-04-20-infographics_files/figure-html/piped-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![](images_foot/infogram/fig2_infographic_qplot.png)---&gt;
&lt;p&gt;In the standard code we typed &lt;code&gt;df&lt;/code&gt; nine times to arrive at the same result. Using pipes we typed df1 once. Of greater importance is that the use of pipes simplifies the structure of R code by introducing a basic “this” then “that” logic which makes it easier to understand.&lt;/p&gt;
&lt;p&gt;One point to note about this code is that &lt;code&gt;qplot()&lt;/code&gt; requires us to name our data (in this case &lt;code&gt;df1&lt;/code&gt;). However, &lt;code&gt;df1&lt;/code&gt; is actually the final output of the code and does not exist as an input object before the final line is run. So, if we attempt to use &lt;code&gt;data = df1&lt;/code&gt; in &lt;code&gt;qplot()&lt;/code&gt; we will receive an error message. The way around this is to use &lt;code&gt;.&lt;/code&gt; in place of our data object. That way &lt;code&gt;qplot()&lt;/code&gt; will know we want to graph the outputs of the earlier code. Finally, we need to add an explicit call to &lt;code&gt;print()&lt;/code&gt; to display the graph (without this the code will work but we will not see the graph).&lt;/p&gt;
&lt;p&gt;If we now inspect the structure of the df1 object (using &lt;code&gt;str(df1)&lt;/code&gt;) in the console, it will be a list. The reason for this is that it is an object with mixed components, including a data.frame with our data plus additional data setting out the contents of the plot. As there is no direct link between R and our infographics software this will create problems for us later because the infographics software won’t know how to interpret the list object. So, it is generally a good idea to use a straight data.frame by excluding the call to &lt;code&gt;qplot&lt;/code&gt; and adding it later when needed as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)
df2 &amp;lt;- select(pizza, publication_number, publication_year) %&amp;gt;% mutate(n = sum(publication_number = 1)) %&amp;gt;% 
    count(publication_year, wt = n) %&amp;gt;% rename(pubyear = publication_year, publications = nn) %&amp;gt;% 
    filter(pubyear &amp;gt;= 1990, pubyear &amp;lt;= 2012) %&amp;gt;% print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 2
##    pubyear publications
##      &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
##  1    1990         139.
##  2    1991         154.
##  3    1992         212.
##  4    1993         201.
##  5    1994         162.
##  6    1995         173.
##  7    1996         180.
##  8    1997         186.
##  9    1998         212.
## 10    1999         290.
## # ... with 13 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in this case the only change is that we need to explicitly include the reference to the df2 data frame as the data argument in the call to &lt;code&gt;qplot()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
qplot(x = pubyear, y = publications, data = df2, geom = &amp;quot;line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2016-04-20-infographics_files/figure-html/df2_qplot-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;harmonising-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Harmonising data&lt;/h2&gt;
&lt;p&gt;One challenge with creating multiple tables from a baseline dataset is keeping track of subdatasets. At the moment we have two basic objects we will be working with:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;pizza&lt;/code&gt; - our raw dataset&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza_total&lt;/code&gt; - created via &lt;code&gt;pizza_number&lt;/code&gt; limited to 1990_2012.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the remainder of the chapter we will want to create some additional datasets from our pizza dataset. These are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Country trends&lt;/li&gt;
&lt;li&gt;Applicants&lt;/li&gt;
&lt;li&gt;International Patent Classification (IPC) Class&lt;/li&gt;
&lt;li&gt;Phrases&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Google IPC&lt;/li&gt;
&lt;li&gt;Google phrases&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We need to make sure that any data that we generate from our raw dataset matches the period for the &lt;code&gt;pizza_total&lt;/code&gt; dataset. If we do not do this there is a risk that we will generate subdatasets with counts for the raw pizza dataset.&lt;/p&gt;
&lt;p&gt;To handle this we will use &lt;code&gt;filter()&lt;/code&gt; to create a new baseline dataset with an unambiguous name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza_1990_2012 &amp;lt;- rename(pizza, pubyear = publication_year) %&amp;gt;% filter(pubyear &amp;gt;= 
    1990, pubyear &amp;lt;= 2012)
pizza_1990_2012&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8,262 x 31
##    applicants_cleaned  applicants_clean… applicants_organ… applicants_original 
##    &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;               
##  1 &amp;lt;NA&amp;gt;                People            &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  2 Lazarillo De Torme… Corporate         Lazarillo De Tor… LAZARILLO DE TORMES…
##  3 &amp;lt;NA&amp;gt;                People            &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  4 Depoortere, Thomas  People            &amp;lt;NA&amp;gt;              DEPOORTERE, Thomas  
##  5 Frisco Findus Ag    Corporate         Frisco Findus Ag  FRISCO-FINDUS AG    
##  6 Bicycle Tools Inco… Corporate         Bicycle Tools In… Bicycle Tools Incor…
##  7 Castiglioni, Carlo  People            &amp;lt;NA&amp;gt;              CASTIGLIONI, CARLO  
##  8 &amp;lt;NA&amp;gt;                People            &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  9 Bujalski, Wlodzimi… People            &amp;lt;NA&amp;gt;              BUJALSKI, WLODZIMIE…
## 10 Ehrno Flexible A/S… Corporate; People Ehrno Flexible A… &amp;quot;EHRNO FLEXIBLE A/S…
## # ... with 8,252 more rows, and 27 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;,
## #   publication_country_code &amp;lt;chr&amp;gt;, publication_country_name &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we start with a call to &lt;code&gt;rename()&lt;/code&gt; to make this consistent with our pizza_total table and then use a pipe to filter the data on the year. Note here that when filtering raw data on a set of values it is important to inspect it first to check that the field is clean (e.g. not concatenated). If for some reason your data is concatenated (which happens quite a lot with patent data) then lookup &lt;code&gt;?tidyr::separate_rows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We are now in a position to create our country trends table.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;country-trends-using-spread&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Country Trends using &lt;code&gt;spread()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There are two basic data formats: long and wide. Our pizza dataset is in long format because each column is a variable (e.g. &lt;code&gt;publication_country&lt;/code&gt;) and each row in &lt;code&gt;publication_country&lt;/code&gt; contains a country name. This is the most common and useful data format.&lt;/p&gt;
&lt;p&gt;However, in some cases, such as &lt;code&gt;infogr.am&lt;/code&gt; our visualisation software will expect the data to be in wide format. In this case each country name would become a variable (column name) with the years forming the rows and the number of records per year the observations. The key to this is the &lt;code&gt;tidyr()&lt;/code&gt; function &lt;code&gt;spread()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As above we will start off by using &lt;code&gt;select()&lt;/code&gt; to create a table with the fields that we want. We will then use &lt;code&gt;mutate()&lt;/code&gt; to add a numeric field and then count up that data. To illustrate the process run this code (we will not create an object).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
select(pizza_1990_2012, publication_country_name, publication_number, pubyear) %&amp;gt;% 
    mutate(n = sum(publication_number = 1)) %&amp;gt;% count(publication_country_name, pubyear, 
    wt = n) %&amp;gt;% print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 223 x 3
##    publication_country_name pubyear    nn
##    &amp;lt;chr&amp;gt;                      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Canada                      1990   19.
##  2 Canada                      1991   49.
##  3 Canada                      1992   66.
##  4 Canada                      1993   59.
##  5 Canada                      1994   50.
##  6 Canada                      1995   39.
##  7 Canada                      1996   36.
##  8 Canada                      1997   45.
##  9 Canada                      1998   46.
## 10 Canada                      1999   47.
## # ... with 213 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we run this code we will see the results in long format. We now want to take our &lt;code&gt;publication_country_name&lt;/code&gt; column and spread it to form columns with &lt;code&gt;nn&lt;/code&gt; as the values.&lt;/p&gt;
&lt;p&gt;In using spread note that it takes a data argument (&lt;code&gt;pizza_1990_2012&lt;/code&gt;), a key (&lt;code&gt;publication_country_name&lt;/code&gt;), and value column (&lt;code&gt;nn&lt;/code&gt;) (created from &lt;code&gt;count()&lt;/code&gt;). We are using pipes so the data only needs to be named in the first line. For additional arguments see &lt;code&gt;?spread()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
country_totals &amp;lt;- select(pizza_1990_2012, publication_country_name, publication_number, 
    pubyear) %&amp;gt;% mutate(n = sum(publication_number = 1)) %&amp;gt;% count(publication_country_name, 
    pubyear, wt = n) %&amp;gt;% spread(publication_country_name, nn)
country_totals&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 23 x 17
##    pubyear Canada China `Eurasian Patent… `European Paten… Germany Israel Japan
##      &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1    1990    19.   NA                NA               22.      2.    NA    NA 
##  2    1991    49.   NA                NA               29.      2.    NA    NA 
##  3    1992    66.   NA                NA               36.      2.     1.   NA 
##  4    1993    59.   NA                NA               29.      2.    NA    NA 
##  5    1994    50.   NA                NA               26.      5.    NA    NA 
##  6    1995    39.   NA                NA               29.      2.     1.   NA 
##  7    1996    36.    1.               NA               27.      1.     1.   NA 
##  8    1997    45.   NA                NA               34.      1.    NA    NA 
##  9    1998    46.   NA                NA               36.      1.    NA    17.
## 10    1999    47.    2.                2.              60.      4.    NA    26.
## # ... with 13 more rows, and 9 more variables: `Korea, Republic of` &amp;lt;dbl&amp;gt;,
## #   Mexico &amp;lt;dbl&amp;gt;, `Patent Co-operation Treaty` &amp;lt;dbl&amp;gt;, Portugal &amp;lt;dbl&amp;gt;, `Russian
## #   Federation` &amp;lt;dbl&amp;gt;, Singapore &amp;lt;dbl&amp;gt;, `South Africa` &amp;lt;dbl&amp;gt;, Spain &amp;lt;dbl&amp;gt;,
## #   `United States of America` &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have data in wide format.&lt;/p&gt;
&lt;p&gt;In some cases, such as infogr.am, visualisation software may expect the country names to be the name of rows and the column names to be years . We can modify our call to &lt;code&gt;spread()&lt;/code&gt; by replacing the &lt;code&gt;publication_country_name&lt;/code&gt; with &lt;code&gt;pubyear&lt;/code&gt;. Then we will write the data to disk for use in our infographic.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(readr)
country_totals &amp;lt;- select(pizza_1990_2012, publication_country_name, publication_number, pubyear) %&amp;gt;%
  mutate(n = sum(publication_number = 1)) %&amp;gt;% 
  count(publication_country_name, pubyear, wt = n) %&amp;gt;% # note n
  spread(pubyear, nn) # note nn
country_totals&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 24
##    publication_country… `1990` `1991` `1992` `1993` `1994` `1995` `1996` `1997`
##    &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Canada                  19.    49.    66.    59.    50.    39.    36.    45.
##  2 China                   NA     NA     NA     NA     NA     NA      1.    NA 
##  3 Eurasian Patent Org…    NA     NA     NA     NA     NA     NA     NA     NA 
##  4 European Patent Off…    22.    29.    36.    29.    26.    29.    27.    34.
##  5 Germany                  2.     2.     2.     2.     5.     2.     1.     1.
##  6 Israel                  NA     NA      1.    NA     NA      1.     1.    NA 
##  7 Japan                   NA     NA     NA     NA     NA     NA     NA     NA 
##  8 Korea, Republic of      NA     NA     NA      1.    NA     NA      1.     1.
##  9 Mexico                  NA     NA     NA     NA     NA     NA     NA     NA 
## 10 Patent Co-operation…     8.    13.    31.    16.    20.    22.    23.    26.
## 11 Portugal                NA     NA     NA     NA     NA     NA     NA     NA 
## 12 Russian Federation      NA     NA     NA     NA     NA     NA     NA      5.
## 13 Singapore               NA     NA     NA     NA     NA     NA     NA     NA 
## 14 South Africa             2.     3.     3.     3.     3.     1.     9.     7.
## 15 Spain                   NA     NA     NA     NA     NA     NA     NA     NA 
## 16 United States of Am…    86.    58.    73.    91.    58.    79.    81.    67.
## # ... with 15 more variables: `1998` &amp;lt;dbl&amp;gt;, `1999` &amp;lt;dbl&amp;gt;, `2000` &amp;lt;dbl&amp;gt;,
## #   `2001` &amp;lt;dbl&amp;gt;, `2002` &amp;lt;dbl&amp;gt;, `2003` &amp;lt;dbl&amp;gt;, `2004` &amp;lt;dbl&amp;gt;, `2005` &amp;lt;dbl&amp;gt;,
## #   `2006` &amp;lt;dbl&amp;gt;, `2007` &amp;lt;dbl&amp;gt;, `2008` &amp;lt;dbl&amp;gt;, `2009` &amp;lt;dbl&amp;gt;, `2010` &amp;lt;dbl&amp;gt;,
## #   `2011` &amp;lt;dbl&amp;gt;, `2012` &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(country_totals, &amp;quot;pizza_country_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To restore the data to long format we would need to use &lt;code&gt;gather()&lt;/code&gt; as the counterpart to &lt;code&gt;spread()&lt;/code&gt;. &lt;code&gt;gather()&lt;/code&gt; takes a dataset, a key for the name of the column we want to gather the countries into, a value for the numeric count (in this case n), and finally the positions of the columns to gather in. Note here that we need to look up the column positions in &lt;code&gt;country_totals&lt;/code&gt; (e.g. using &lt;code&gt;View()&lt;/code&gt;) or count the columns using &lt;code&gt;ncol(country_totals)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
gather(country_totals, year, n, 2:24) %&amp;gt;% print()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 368 x 3
##    publication_country_name     year      n
##    &amp;lt;chr&amp;gt;                        &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Canada                       1990    19.
##  2 China                        1990    NA 
##  3 Eurasian Patent Organization 1990    NA 
##  4 European Patent Office       1990    22.
##  5 Germany                      1990     2.
##  6 Israel                       1990    NA 
##  7 Japan                        1990    NA 
##  8 Korea, Republic of           1990    NA 
##  9 Mexico                       1990    NA 
## 10 Patent Co-operation Treaty   1990     8.
## # ... with 358 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The combination of spread and gather work really well to prepare data in formats that are expected by other software. However, one of the main issues we encounter with patent data is that our data is not tidy because various fields are concatenated.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidying-data---separating-and-gathering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tidying data - Separating and Gathering&lt;/h2&gt;
&lt;p&gt;In patent data we often see concatenated fields with a separator (normally a &lt;code&gt;;&lt;/code&gt;). These are typically applicant names, inventor names, International Patent Classification (IPC) codes, or document numbers (priority numbers, family numbers). We need to &lt;code&gt;tidy&lt;/code&gt; this data prior to data cleaning (such as cleaning names) or to prepare for analysis and visualisation. For more on the concept of tidy data read &lt;a href=&#34;http://vita.had.co.nz/papers/tidy-data.pdf&#34;&gt;Hadley Wickham’s Tidy Data article&lt;/a&gt;. The new &lt;a href=&#34;http://r4ds.had.co.nz/tidy-data.html&#34;&gt;R for Data Science book&lt;/a&gt; by Garrett Grolemund and Hadley Wickham (see Chapter 12) is also strongly recommended.&lt;/p&gt;
&lt;p&gt;To tidy patent data we will typically need to do two things.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Separate the data so that each cell contains a unique data point (e.g. a name, code or publication number). This normally involves separating data into columns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gathering the data back in. This involves transforming the data in the columns we have created into rows.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Separating data into columns is very easy in tools such as Excel. However, gathering the data back into separate rows is remarkably difficult. Happily, this is very easy to do in R with the &lt;code&gt;tidyr&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tidyr&lt;/code&gt; package contains three functions that are very useful when working with patent data. When dealing with concatenated fields in columns the key function is &lt;code&gt;separate_rows&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here we will work with the &lt;code&gt;applicants_cleaned&lt;/code&gt; field in the pizza dataset. This field contains concatenated names with a &lt;code&gt;;&lt;/code&gt; as the separator. For example, on lines 1_9 there are single applicant names or NA values. However, on lines 10 and line 59 we see:&lt;/p&gt;
&lt;p&gt;Ehrno Flexible A/S; Stergaard, Ole
Farrell Brian; Mcnulty John; Vishoot Lisa&lt;/p&gt;
&lt;p&gt;The problem here is that when we are dealing with thousands of lines of applicant names we don’t know how many names might be concatenated into each cell as a basis for separating the data into columns. Once we had split the columns (for example using Text to Columns in Excel) we would then need to work out how to gather the columns into rows. The &lt;code&gt;separate_rows()&lt;/code&gt; function from &lt;code&gt;tidyr&lt;/code&gt; makes light work of this problem. To use the function we name the dataset, the column we want to separate into rows and the separator (sep).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
pizza1 &amp;lt;- separate_rows(pizza_1990_2012, applicants_cleaned, sep = &amp;quot;;&amp;quot;)
pizza1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12,729 x 31
##    applicants_cleaned applicants_cleane… applicants_organ… applicants_original 
##    &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;               
##  1 &amp;lt;NA&amp;gt;               People             &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  2 Lazarillo De Torm… Corporate          Lazarillo De Tor… LAZARILLO DE TORMES…
##  3 &amp;lt;NA&amp;gt;               People             &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  4 Depoortere, Thomas People             &amp;lt;NA&amp;gt;              DEPOORTERE, Thomas  
##  5 Frisco Findus Ag   Corporate          Frisco Findus Ag  FRISCO-FINDUS AG    
##  6 Bicycle Tools Inc… Corporate          Bicycle Tools In… Bicycle Tools Incor…
##  7 Castiglioni, Carlo People             &amp;lt;NA&amp;gt;              CASTIGLIONI, CARLO  
##  8 &amp;lt;NA&amp;gt;               People             &amp;lt;NA&amp;gt;              &amp;lt;NA&amp;gt;                
##  9 Bujalski, Wlodzim… People             &amp;lt;NA&amp;gt;              BUJALSKI, WLODZIMIE…
## 10 Ehrno Flexible A/S Corporate; People  Ehrno Flexible A… &amp;quot;EHRNO FLEXIBLE A/S…
## # ... with 12,719 more rows, and 27 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;,
## #   publication_country_code &amp;lt;chr&amp;gt;, publication_country_name &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our original dataset contained 8,262 rows. Our new dataset split on applicant names contains 12,729 rows. The function has moved our target column from column 1 to column 31 in the data frame. We can easily move it back to inspect.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza1 &amp;lt;- select(pizza1, 31, 1:30)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;separate_rows()&lt;/code&gt; has done a great job but one of the problems with concatenated names is extra white space around the separator. We will deal with this next.&lt;/p&gt;
&lt;div id=&#34;trimming-with-stringr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Trimming with &lt;code&gt;stringr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;If we inspect the bottom of the column by subsetting into it using &lt;code&gt;$&lt;/code&gt; we will see that a lot of the names have a leading whitespace space. This results from the separate exercise where the &lt;code&gt;;&lt;/code&gt; is actually &lt;code&gt;;space&lt;/code&gt;. Take a look at the last few rows of the data using &lt;code&gt;tail()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(pizza1$applicants_cleaned, 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Yahoo! Inc&amp;quot;                        &amp;quot;Clarcor Inc&amp;quot;                      
##  [3] &amp;quot;Holden Jeffrey A&amp;quot;                  &amp;quot; Vengroff Darren E&amp;quot;               
##  [5] &amp;quot;Casper Jeffrey L&amp;quot;                  &amp;quot; Erickson Braden J&amp;quot;               
##  [7] &amp;quot; Oppenheimer Alan A&amp;quot;               &amp;quot; Ray Madonna M&amp;quot;                   
##  [9] &amp;quot; Weber Jean L&amp;quot;                     &amp;quot;Pandey Neena&amp;quot;                     
## [11] &amp;quot; Sharma Sudhanshu&amp;quot;                 &amp;quot; Verizon Patent And Licensing Inc&amp;quot;
## [13] &amp;quot;Pandey Neena&amp;quot;                      &amp;quot; Sharma Sudhanshu&amp;quot;                
## [15] &amp;quot;Brown Michael&amp;quot;                     &amp;quot; Urban Scott&amp;quot;                     
## [17] &amp;quot;Brown Michael&amp;quot;                     &amp;quot; Urban Scott&amp;quot;                     
## [19] &amp;quot;Cole Lorin R&amp;quot;                      &amp;quot; Middleton Scott W&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a big issue because any counts that we make later on using the applicants_cleaned field will treat “Oppenheimer Alan A” and &amp;quot; Oppenheimer Alan A&amp;quot; as separate names when they should be grouped together.&lt;/p&gt;
&lt;p&gt;We can address this in a couple of ways. One approach is to recognise that actually our separator is not a simple &lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt; but &lt;code&gt;&amp;quot;;space&amp;quot;&lt;/code&gt; in our call to &lt;code&gt;separate_rows()&lt;/code&gt;. In that case the call to &lt;code&gt;separate_rows()&lt;/code&gt; would actually be &lt;code&gt;sep = &amp;quot;; &amp;quot;&lt;/code&gt;. We will add a line of code to illustrate the impact of this change.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmp &amp;lt;- separate_rows(pizza_1990_2012, applicants_cleaned, sep = &amp;quot;; &amp;quot;)
tail(tmp$applicants_cleaned, 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Yahoo! Inc&amp;quot;                       &amp;quot;Clarcor Inc&amp;quot;                     
##  [3] &amp;quot;Holden Jeffrey A&amp;quot;                 &amp;quot;Vengroff Darren E&amp;quot;               
##  [5] &amp;quot;Casper Jeffrey L&amp;quot;                 &amp;quot;Erickson Braden J&amp;quot;               
##  [7] &amp;quot;Oppenheimer Alan A&amp;quot;               &amp;quot;Ray Madonna M&amp;quot;                   
##  [9] &amp;quot;Weber Jean L&amp;quot;                     &amp;quot;Pandey Neena&amp;quot;                    
## [11] &amp;quot;Sharma Sudhanshu&amp;quot;                 &amp;quot;Verizon Patent And Licensing Inc&amp;quot;
## [13] &amp;quot;Pandey Neena&amp;quot;                     &amp;quot;Sharma Sudhanshu&amp;quot;                
## [15] &amp;quot;Brown Michael&amp;quot;                    &amp;quot;Urban Scott&amp;quot;                     
## [17] &amp;quot;Brown Michael&amp;quot;                    &amp;quot;Urban Scott&amp;quot;                     
## [19] &amp;quot;Cole Lorin R&amp;quot;                     &amp;quot;Middleton Scott W&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to address this, is to use the &lt;code&gt;str_trim()&lt;/code&gt; function from the &lt;code&gt;stringr&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;We can address this problem using a function from the &lt;code&gt;stringr&lt;/code&gt; package &lt;code&gt;str_trim()&lt;/code&gt;. We have a choice with &lt;code&gt;str_trim()&lt;/code&gt; on whether to trim the whitespace on the right, left or both. Here we will choose both.&lt;/p&gt;
&lt;p&gt;Because we are seeking to modify an existing column (not to create a new vector or data.frame) we will use &lt;code&gt;$&lt;/code&gt; to select the column and as the data for the &lt;code&gt;str_trim()&lt;/code&gt; function. That will apply the function to the applicants column in pizza1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stringr)
pizza1$applicants_cleaned &amp;lt;- str_trim(pizza1$applicants_cleaned, side = &amp;quot;both&amp;quot;)
tail(pizza1$applicants_cleaned, 20)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Yahoo! Inc&amp;quot;                       &amp;quot;Clarcor Inc&amp;quot;                     
##  [3] &amp;quot;Holden Jeffrey A&amp;quot;                 &amp;quot;Vengroff Darren E&amp;quot;               
##  [5] &amp;quot;Casper Jeffrey L&amp;quot;                 &amp;quot;Erickson Braden J&amp;quot;               
##  [7] &amp;quot;Oppenheimer Alan A&amp;quot;               &amp;quot;Ray Madonna M&amp;quot;                   
##  [9] &amp;quot;Weber Jean L&amp;quot;                     &amp;quot;Pandey Neena&amp;quot;                    
## [11] &amp;quot;Sharma Sudhanshu&amp;quot;                 &amp;quot;Verizon Patent And Licensing Inc&amp;quot;
## [13] &amp;quot;Pandey Neena&amp;quot;                     &amp;quot;Sharma Sudhanshu&amp;quot;                
## [15] &amp;quot;Brown Michael&amp;quot;                    &amp;quot;Urban Scott&amp;quot;                     
## [17] &amp;quot;Brown Michael&amp;quot;                    &amp;quot;Urban Scott&amp;quot;                     
## [19] &amp;quot;Cole Lorin R&amp;quot;                     &amp;quot;Middleton Scott W&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that when using &lt;code&gt;str_trim()&lt;/code&gt; we use subsetting to modify the applicants column in place. There is possibly a more efficient way of doing this with pipes but this appears difficult because the data.frame needs to exist for &lt;code&gt;str_trim()&lt;/code&gt; to act on in place or we end up with a vector of applicant names rather than a data.frame. A solution to this problem is provided on Stack Overflow&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In practice, the most efficient solution in this case is to recognise that the separator for &lt;code&gt;separate_rows&lt;/code&gt; is &lt;code&gt;&amp;quot;;space&amp;quot;&lt;/code&gt;. However, that will not always be true making the tools in &lt;code&gt;stringr&lt;/code&gt; invaluable. To learn more about string manipulation in R try &lt;a href=&#34;http://r4ds.had.co.nz/strings.html&#34;&gt;Chapter 14 of R for Data Science by Garrett Grolemund and Hadley Wickham&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can tie the steps so far together using pipes into the following simpler code that we will become the applicants table for use in the infographic. We will add a call to rename and rename applicants_cleaned to tidy up.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
library(stringr)
applicants &amp;lt;- rename(pizza, pubyear = publication_year) %&amp;gt;% filter(pubyear &amp;gt;= 1990, 
    pubyear &amp;lt;= 2012) %&amp;gt;% separate_rows(applicants_cleaned, sep = &amp;quot;; &amp;quot;) %&amp;gt;% rename(applicants = applicants_cleaned) %&amp;gt;% 
    select(31, 1:30)  # moves separated column to the beginning
applicants&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12,729 x 31
##    title_original applicants applicants_clea… applicants_orga… applicants_orig…
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;           
##  1 PIZZA          &amp;lt;NA&amp;gt;       People           &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;            
##  2 IMPROVED PIZZA Lazarillo… Corporate        Lazarillo De To… LAZARILLO DE TO…
##  3 Pizza separat… &amp;lt;NA&amp;gt;       People           &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;            
##  4 Pizza separat… Depoorter… People           &amp;lt;NA&amp;gt;             DEPOORTERE, Tho…
##  5 PIZZA PREPARA… Frisco Fi… Corporate        Frisco Findus Ag FRISCO-FINDUS AG
##  6 Pizza Cutter   Bicycle T… Corporate        Bicycle Tools I… Bicycle Tools I…
##  7 PIZZA BOX      Castiglio… People           &amp;lt;NA&amp;gt;             CASTIGLIONI, CA…
##  8 PIZZA BOX      &amp;lt;NA&amp;gt;       People           &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;            
##  9 MORE ATTRACTI… Bujalski,… People           &amp;lt;NA&amp;gt;             BUJALSKI, WLODZ…
## 10 PIZZA PACKAGI… Ehrno Fle… Corporate; Peop… Ehrno Flexible … &amp;quot;EHRNO FLEXIBLE…
## # ... with 12,719 more rows, and 26 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;,
## #   publication_country_code &amp;lt;chr&amp;gt;, publication_country_name &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will want to create a plot with the applicants data in our infographic software. For that we need to introduce a field to count on. We might also want to establish a cut off point based on the number of records per applicant.&lt;/p&gt;
&lt;p&gt;In this code we will simply print the applicants ranked in descending order. The second to last line of the code provides a filter on the number of records. This value can be changed after inspecting the data. The final line omits NA values (otherwise the top result) where an applicant name is not available.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)
library(dplyr)
applicant_count &amp;lt;- select(applicants, applicants, publication_number) %&amp;gt;% mutate(n = sum(publication_number = 1)) %&amp;gt;% 
    count(applicants, wt = n) %&amp;gt;% arrange(desc(nn)) %&amp;gt;% filter(nn &amp;gt;= 1) %&amp;gt;% na.omit()
applicant_count&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6,178 x 2
##    applicants                              nn
##    &amp;lt;chr&amp;gt;                                &amp;lt;dbl&amp;gt;
##  1 Graphic Packaging International, Inc  154.
##  2 Kraft Foods Holdings, Inc             132.
##  3 Google Inc                            123.
##  4 Microsoft Corporation                  88.
##  5 The Pillsbury Company                  83.
##  6 General Mills, Inc                     77.
##  7 Nestec                                 77.
##  8 The Procter &amp;amp; Gamble Company           59.
##  9 Pizza Hut, Inc                         57.
## 10 Yahoo! Inc                             54.
## # ... with 6,168 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we inspect applicant count using &lt;code&gt;View(applicant_count)&lt;/code&gt; we have 6,178 rows. That is far too many to display in an infographic. So, next we will filter the data on the value for the top ten (54). Then we will write the data to a .csv file using the simple &lt;code&gt;write_csv()&lt;/code&gt; from &lt;code&gt;readr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
library(readr)
applicant_count &amp;lt;- select(applicants, applicants, publication_number) %&amp;gt;% mutate(n = sum(publication_number = 1)) %&amp;gt;% 
    count(applicants, wt = n) %&amp;gt;% arrange(desc(nn)) %&amp;gt;% filter(nn &amp;gt;= 54) %&amp;gt;% na.omit()
applicant_count&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    applicants                              nn
##    &amp;lt;chr&amp;gt;                                &amp;lt;dbl&amp;gt;
##  1 Graphic Packaging International, Inc  154.
##  2 Kraft Foods Holdings, Inc             132.
##  3 Google Inc                            123.
##  4 Microsoft Corporation                  88.
##  5 The Pillsbury Company                  83.
##  6 General Mills, Inc                     77.
##  7 Nestec                                 77.
##  8 The Procter &amp;amp; Gamble Company           59.
##  9 Pizza Hut, Inc                         57.
## 10 Yahoo! Inc                             54.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(applicant_count, &amp;quot;pizza_applicants_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we inspect &lt;code&gt;applicant_count&lt;/code&gt; we will see that Graphic Packaging International is the top result with 154 results with Google ranking third with 123 results followed by Microsoft. This could suggest that Google and Microsoft are suddenly entering the market for online pizza sales or pizza making software or, as is more likely, that there are uses other uses of the word pizza in patent data that we are not aware of.&lt;/p&gt;
&lt;p&gt;As part of our infographic we will want to explore this intriguing result in more detail. We can do this by creating a subdataset for Google using &lt;code&gt;filter()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;selecting-applicants-using-filter&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Selecting applicants using &lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;As we saw above, while &lt;code&gt;select()&lt;/code&gt; functions with columns, &lt;code&gt;filter()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; works with rows. Here we will filter the data to select the rows in the applicants column that contain Google Inc. and then write that to a .csv for use in our infographic. Note the use of double &lt;code&gt;==&lt;/code&gt; and the quotes around “Google Inc”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(readr)
google &amp;lt;- filter(applicants, applicants == &amp;quot;Google Inc&amp;quot;)
google&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 123 x 31
##    title_original applicants applicants_clea… applicants_orga… applicants_orig…
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;           
##  1 Location base… Google Inc Corporate; Peop… Google Inc       Hafsteinsson Gu…
##  2 AUTHORITATIVE… Google Inc Corporate        Google Inc       GOOGLE INC.     
##  3 Location-Base… Google Inc Corporate; Peop… Google Inc       GOOGLE INC.;HAF…
##  4 Controlling t… Google Inc Corporate; Peop… Google Inc       GOOGLE, INC.;BE…
##  5 METHOD AND SY… Google Inc Corporate        Google Inc       GOOGLE INC.     
##  6 Routing queri… Google Inc Corporate        Google Inc       GOOGLE INC.     
##  7 METHODS AND S… Google Inc Corporate        Google Inc       GOOGLE INC.     
##  8 Aspect-based … Google Inc Corporate; Peop… Google Inc       Reis George;Goo…
##  9 Interpreting … Google Inc Corporate        Google Inc       GOOGLE INC.     
## 10 Interpreting … Google Inc Corporate        Google Inc       GOOGLE INC.     
## # ... with 113 more rows, and 26 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;,
## #   publication_country_code &amp;lt;chr&amp;gt;, publication_country_name &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(google, &amp;quot;google_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the correct result for the period 1990 to 2012 for Google is 123 records from 191 records across the whole pizza dataset. The correct result will be achieved only where you use the filtered, separated and trimmed data we created in the applicants data frame.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generating-ipc-tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generating IPC Tables&lt;/h2&gt;
&lt;p&gt;In the next step we will want to generate two tables containing International Patent Classification (IPC) data. IPC codes and the Cooperative Patent Classification (CPC, not present in this dataset) provide information on the technologies involved in a patent document. The IPC is hierarchical and proceeds from the general class level to the detailed group and subgroup level. Experience reveals that the majority of patent documents receive more than one IPC code to more fully describe the technological aspects of patent documents.&lt;/p&gt;
&lt;p&gt;The pizza dataset contains IPC codes on the class and the subclass level in concatenated fields. One important consideration in using IPC data is that the descriptions are long and can be difficult for non-specialists to grasp. This can make visualising the data difficult and often requires manual efforts to edit labels for display.&lt;/p&gt;
&lt;p&gt;We now want to generate three IPC tables.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A general IPC table for the pizza dataset&lt;/li&gt;
&lt;li&gt;A general IPC table for the Google dataset&lt;/li&gt;
&lt;li&gt;A more detailed IPC subclass table for the Google dataset&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For ease of presentation in an infographic we will use the &lt;code&gt;ipc_class&lt;/code&gt; field. For many patent analytics purposes this will be too general. However it has the advantage of being easy to visualise.&lt;/p&gt;
&lt;p&gt;To generate the table we can use a generic function based on the code developed for dealing with the applicants data. We will call the function patent_count().&lt;/p&gt;
&lt;!--- updated to tidyeval in 2018. Note that the whitespace was not trimmed in the earlier version due to an oversight and counts will now be higher.. and correct... as a result. ---&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;patent_count &amp;lt;- function(data, col, count_col, sep, n_results) {
    p_count &amp;lt;- dplyr::select(data, !!col, !!count_col) %&amp;gt;% tidyr::separate_rows(col, 
        sep = sep) %&amp;gt;% dplyr::mutate(`:=`(!!col, stringr::str_trim(.[[col]], side = &amp;quot;both&amp;quot;))) %&amp;gt;% 
        dplyr::mutate(n = sum(count_col = 1)) %&amp;gt;% dplyr::group_by(`:=`(!!col, .[[col]])) %&amp;gt;% 
        dplyr::tally(sort = TRUE) %&amp;gt;% dplyr::rename(records = nn) %&amp;gt;% na.omit() %&amp;gt;% 
        head(n_results)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;patent_count()&lt;/code&gt; function is based on the the code we developed for applicants. It contains variations to make it work as a function. The function takes four arguments:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;col = the concatenated column that we want to split and gather back in&lt;/li&gt;
&lt;li&gt;col_count = a column for generating counts (in this dataset the publication_number)&lt;/li&gt;
&lt;li&gt;n_results = the number of results we want to see in the new table (typically 10 or 20 for visualisation). This is equivalent to the number of rows that you want to see.&lt;/li&gt;
&lt;li&gt;sep = the separator to use to separate the data in col. With patent data this is almost always “;” (as &lt;code&gt;;space&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To generate the &lt;code&gt;ipc_class&lt;/code&gt; data we can do the following and then write the file to .csv. Note that we have set the number of results &lt;code&gt;n_results&lt;/code&gt; to 10.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza_ipc_class &amp;lt;- patent_count(data = pizza_1990_2012, col = &amp;quot;ipc_class&amp;quot;, count_col = &amp;quot;publication_number&amp;quot;, 
    n_results = 10, sep = &amp;quot;;&amp;quot;)
pizza_ipc_class&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    ipc_class                                           records
##    &amp;lt;chr&amp;gt;                                                 &amp;lt;dbl&amp;gt;
##  1 A21: Baking                                           2233.
##  2 A23: Foods Or Foodstuffs                              1843.
##  3 B65: Conveying                                        1383.
##  4 G06: Computing                                        1326.
##  5 A47: Furniture                                         932.
##  6 H04: Electric Communication Technique                  747.
##  7 H05: Electric Techniques Not Otherwise Provided For    613.
##  8 F24: Heating                                           512.
##  9 A61: Medical Or Veterinary Science                     318.
## 10 G07: Checking                                          226.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(pizza_ipc_class, &amp;quot;pizza_ipcclass_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this dataset is based on the main &lt;code&gt;pizza_1990_2012&lt;/code&gt; dataset (including cases where no applicant name is available). The reason we have not used the applicants dataset is because that dataset will duplicate the IPC field for each split of an applicant name. As a result it will over count the IPCs by the number of applicants on a document name. As this suggests, it is important to be careful when working with data that has been tidied because of the impact on other counts.&lt;/p&gt;
&lt;p&gt;This problem does not apply in the case of our Google data because the only applicant listed in that data is Google (excluding co-applicants). We can therefore safely use the Google dataset to identify the IPC codes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;google_ipc_class &amp;lt;- patent_count(data = google, col = &amp;quot;ipc_class&amp;quot;, count_col = &amp;quot;publication_number&amp;quot;, 
    n_results = 10, sep = &amp;quot;;&amp;quot;)
google_ipc_class&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 2
##   ipc_class                             records
##   &amp;lt;chr&amp;gt;                                   &amp;lt;dbl&amp;gt;
## 1 G06: Computing                           105.
## 2 H04: Electric Communication Technique     17.
## 3 G01: Measuring                            14.
## 4 G09: Educating                            11.
## 5 G10: Musical Instruments                   7.
## 6 A63: Sports                                1.
## 7 G08: Signalling                            1.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(google_ipc_class, &amp;quot;google_ipcclass_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are only 7 classes and as we might expect they are dominated by computing. We might want to dig into this in a little more detail and so let’s also create an IPC subclass field.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;google_ipc_subclass &amp;lt;- patent_count(data = google, col = &amp;quot;ipc_subclass_detail&amp;quot;, count_col = &amp;quot;publication_number&amp;quot;, 
    n_results = 10, sep = &amp;quot;;&amp;quot;)
google_ipc_subclass&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    ipc_subclass_detail                                                  records
##    &amp;lt;chr&amp;gt;                                                                  &amp;lt;dbl&amp;gt;
##  1 G06F: Electric Digital Data Processing                                   89.
##  2 G06Q: Data Processing Systems Or Methods, Specially Adapted For Adm…     24.
##  3 G01C: Measuring Distances, Levels Or Bearings                            14.
##  4 G09B: Educational Or Demonstration Appliances                             9.
##  5 G10L: Speech Analysis Or Synthesis                                        7.
##  6 H04W: Wireless Communication Networks                                     7.
##  7 G09G: Arrangements Or Circuits For Control Of Indicating Devices Us…      5.
##  8 H04B: Transmission                                                        4.
##  9 H04L: Transmission Of Digital Information, E.G. Telegraphic Communi…      4.
## 10 H04M: Telephonic Communication                                            4.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(google_ipc_subclass, &amp;quot;google_ipcsubclass_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the data on technology areas that we need to understand our data. The next and final step is to generate data from the text fields.&lt;/p&gt;
&lt;div id=&#34;phrases-tables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Phrases Tables&lt;/h3&gt;
&lt;p&gt;We will be using data from words and phrases in the titles of patent documents for use in a word cloud in our infographic. It is possible to generate this type of data in R directly using the &lt;code&gt;tm&lt;/code&gt; and &lt;code&gt;NLP&lt;/code&gt; packages. Our pizza dataset already contains a title field broken down into phrases using Vantagepoint software and so we will use that. We will use the field &lt;code&gt;title_nlp_multiword_phrases&lt;/code&gt; as phrases are generally more informative than individual words. Once again we will use our general &lt;code&gt;patent_count()&lt;/code&gt; function although experimentation may be needed to identify the number of phrases that visualise well in a word cloud.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza_phrases &amp;lt;- patent_count(data = pizza_1990_2012, col = &amp;quot;title_nlp_multiword_phrases&amp;quot;, 
    count_col = &amp;quot;publication_number&amp;quot;, n_results = 15, sep = &amp;quot;;&amp;quot;)
pizza_phrases&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15 x 2
##    title_nlp_multiword_phrases records
##    &amp;lt;chr&amp;gt;                         &amp;lt;dbl&amp;gt;
##  1 Food Product                   179.
##  2 Microwave Ovens                137.
##  3 Making Same                     48.
##  4 conveyor Oven                   46.
##  5 Crust Pizza                     44.
##  6 microwave Heating               41.
##  7 Bakery Product                  40.
##  8 pizza Box                       40.
##  9 Microwave Cooking               39.
## 10 Pizza Oven                      37.
## 11 pizza Dough                     35.
## 12 Cook Food                       34.
## 13 Baked Product                   33.
## 14 Related Method                  32.
## 15 Food Item                       29.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(pizza_phrases, &amp;quot;pizza_phrases_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we do the same with the Google data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;google_phrases &amp;lt;- patent_count(data = google, col = &amp;quot;title_nlp_multiword_phrases&amp;quot;, 
    count_col = &amp;quot;publication_number&amp;quot;, n_results = 15, sep = &amp;quot;;&amp;quot;)
google_phrases&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 15 x 2
##    title_nlp_multiword_phrases           records
##    &amp;lt;chr&amp;gt;                                   &amp;lt;dbl&amp;gt;
##  1 Digital Map System                        10.
##  2 conversion Path Performance Measures       9.
##  3 Mobile Device                              8.
##  4 Search Results                             8.
##  5 Geographical Relevance                     4.
##  6 Local Search Results                       4.
##  7 Location Prominence                        4.
##  8 Network Speech Recognizers                 4.
##  9 Processing Queries                         4.
## 10 Search Query                               4.
## 11 aspect-Based Sentiment Summarization       3.
## 12 authoritative Document Identification      3.
## 13 Business Listings Search                   3.
## 14 Content Providers                          3.
## 15 indexing Documents                         3.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(google_phrases, &amp;quot;google_phrases_1990_2012.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have the following .csv files.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;pizza_total_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza_country_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza_applicants_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza_ipcclass_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza_phrases_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google_ipclass_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google_ipcsubclass_1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Google_phrases-1990_2012&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-an-infographic-in-infogr.am&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating an infographic in infogr.am&lt;/h2&gt;
&lt;p&gt;If you are starting this chapter here then download the datasets we will be using as a single zip file from the Manual repository &lt;a href=&#34;https://github.com/wipo-analytics/opensource-patent-analytics/blob/master/2_datasets/infographic/infographic.zip?raw=true&#34;&gt;here&lt;/a&gt; and then unzip the file.&lt;/p&gt;
&lt;p&gt;We first need to sign up for a free account with &lt;a href=&#34;https://infogr.am/&#34;&gt;infogr.am&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/infogram/fig1_infogram_front.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We will then see a page with some sample infographics to provide ideas to get you started.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/infogram/fig2_infogram_login.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;
Click on one of the infograms with a graph such as Trends in Something and then click inside the graph box itself and select the edit button in the top right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/infogram/fig3_infogram_findedit.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This will open up a data panel with the toy data displayed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/infogram/fig4_infogram_datapanel.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We want to replace this data by choosing the upload button and selecting our &lt;code&gt;pizza_country_1990_2012.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/infogram/fig5_infogram_panelgraph.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We now have a decent looking graph for our country trends data where we can see the number of records per country and year by hovering over the relevant data points. While some of the countries with low frequency data are crunched at the bottom (and would be better displayed in a separate graph), hovering over the data or over a country name will display the relevant country activity. We will therefore live with this.&lt;/p&gt;
&lt;p&gt;We now want to start adding story elements by clicking on the edit button in the title. Next we can start adding new boxes using the menu icons on the right. Here we have changed the title, added a simple body text for the data credit and then a quote from someone describing themselves as the Head of Pizza Analytics.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/infogram/fig6_infogram_paneltext.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next we need to start digging into the data using our IPC, applicants and phrases data.&lt;/p&gt;
&lt;p&gt;To work with our IPC class data we will add a bar chart and load the data. To do this select the graph icon in the right and then Bar. Once again we will choose edit and then load our &lt;code&gt;pizza_ipcclass_1990_2012&lt;/code&gt; dataset. Then we can add a descriptive text box. We can then continue to add elements as follows:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;applicants bar chart&lt;/li&gt;
&lt;li&gt;pizza phrases by selecting graph and word cloud&lt;/li&gt;
&lt;li&gt;Google ipc-subclass&lt;/li&gt;
&lt;li&gt;Google word cloud.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One useful approach to developing an infographic is to start by adding the images and then add titles and text boxes to raise key points. In infogram new text boxes appear below existing boxes but can be repositioned by dragging and dropping boxes onto each other.&lt;/p&gt;
&lt;p&gt;One nice feature of infogram is that it is easy to share the infographic with others through a url, an embed code or on facebook or via twitter.&lt;/p&gt;
&lt;p&gt;At the end of the infographic it is a good idea to provide a link where the reader can obtain more information, such as the full report or the underlying data. In this case we will add a link to the Tableau workbook on pizza patent activity that we developed in an earlier &lt;a href=&#34;https://public.tableau.com/profile/wipo.open.source.patent.analytics.manual#!/vizhome/pizzapatents/Overview&#34;&gt;chapter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our final infographic should look something like &lt;a href=&#34;https://infogr.am/trends_in_something&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Round Up&lt;/h3&gt;
&lt;p&gt;In this chapter we have concentrated on using R to tidy patent data in order to create an online infographic using free software. Using our trusty pizza patent data from WIPO Patentscope we walked through the process of wrangling and tidying patent data first using short lines of code that we then combined into a reusable function. As this introduction to tidying data in R has hopefully revealed, R and packages such as &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;stringr&lt;/code&gt; provide very useful tools for working with patent data, and they are free and well supported.&lt;/p&gt;
&lt;p&gt;In the final part of the chapter we used the data we had generated in RStudio to create an infographic using infogr.am that we then shared online. Infogram is just one of a number of online infographic services and it is well worth trying other services such as &lt;a href=&#34;https://www.easel.ly&#34;&gt;easel.ly&lt;/a&gt; to find a service that meets your needs.&lt;/p&gt;
&lt;p&gt;As regular users of R will already know, it is already possible to produce all of these graphics (such as word clouds) directly in R using tools such as &lt;code&gt;ggplot2&lt;/code&gt;, &lt;code&gt;plotly&lt;/code&gt; and word clouds using packages such as &lt;code&gt;wordcloud&lt;/code&gt;. Some of these topics have been covered in other chapters and for more on text mining and word clouds in R see this recent article on &lt;a href=&#34;http://www.r-bloggers.com/building-wordclouds-in-r/&#34;&gt;R-bloggers&lt;/a&gt;. None of the infographic services we viewed appeared to offer an API that would enable a direct connection with R. There also seems to be a gap in R’s packages where infographics might sit with this &lt;a href=&#34;http://www.r-bloggers.com/r-how-to-layout-and-design-an-infographic/&#34;&gt;2015 R-bloggers article&lt;/a&gt; providing a walk through on how to create a basic infographic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/25975827/how-to-feed-the-result-of-a-pipe-chain-magrittr-to-an-object&#34; class=&#34;uri&#34;&gt;http://stackoverflow.com/questions/25975827/how-to-feed-the-result-of-a-pipe-chain-magrittr-to-an-object&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Scientific Literature with rplos</title>
      <link>/rplos-walkthrough/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/rplos-walkthrough/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this chapter we look at the use of the &lt;a href=&#34;https://github.com/ropensci/rplos&#34;&gt;&lt;code&gt;rplos&lt;/code&gt;&lt;/a&gt; package from &lt;a href=&#34;https://ropensci.org&#34;&gt;rOpenSci&lt;/a&gt; to access the scientific literature from the &lt;a href=&#34;https://www.plos.org&#34;&gt;Public Library of Science&lt;/a&gt; using the &lt;a href=&#34;http://api.plos.org/solr/faq/&#34;&gt;PLOS Search API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Public Library of Science (PLOS) is the main champion of open access peer reviewed scientific publications and has published somewhere in the region of 140,000 articles. These articles are a fantastic resource. PLOS includes the following titles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PLOS ONE&lt;/li&gt;
&lt;li&gt;PLOS Biology&lt;/li&gt;
&lt;li&gt;PLOS Medicine&lt;/li&gt;
&lt;li&gt;PLOS Computational Biology&lt;/li&gt;
&lt;li&gt;PLOS Genetics&lt;/li&gt;
&lt;li&gt;PLOS Pathogens&lt;/li&gt;
&lt;li&gt;PLOS Neglected Tropical Diseases&lt;/li&gt;
&lt;li&gt;PLOS Clinical Trials ()&lt;/li&gt;
&lt;li&gt;PLOS Collections (collections of articles)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PLOS is important because it provides open access to the full text of peer reviewed research. For researchers interested in working with R, &lt;code&gt;rplos&lt;/code&gt; and its bigger sister package, the &lt;a href=&#34;https://ropensci.org/tutorials/fulltext_tutorial.html&#34;&gt;rOpenSci &lt;code&gt;fulltext&lt;/code&gt; package&lt;/a&gt; are very important tools for gaining access to research.&lt;/p&gt;
&lt;p&gt;This article is part of work in progress for the WIPO Manual on Open Source Patent Analytics. The Manual is intended to introduce open source analytics tools to patent researchers in developing countries and to be of wider use to the science and technology research community. An important part of patent research is being able to access and analyse the scientific literature.&lt;/p&gt;
&lt;p&gt;This article makes no assumptions about knowledge of R or programming. &lt;code&gt;rplos&lt;/code&gt; is a good place to start with learning how to access scientific literature in R using Application Programming Interfaces (APIs). Because &lt;code&gt;rplos&lt;/code&gt; is well organised and the data is very clean it is also a good place to learn some of the basics of working with data in R. This provides a good basis for working with the ROpenSci &lt;a href=&#34;https://github.com/ropensci/fulltext&#34;&gt;fulltext package&lt;/a&gt;. &lt;code&gt;fulltext&lt;/code&gt; allows you to retrieve scientific literature from multiple data sources and we will deal with that next.&lt;/p&gt;
&lt;p&gt;We will also use this as an opportunity to introduce some of the popular packages for working with data in R, notably the family of packages for tidying and wrangling data developed by Hadley Wickham at RStudio (namely, &lt;code&gt;plyr&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;stringr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt;). We will only touch on these but we include then as everyday working packages that you will find useful in learning more about R.&lt;/p&gt;
&lt;p&gt;The first step is to make sure that you have R and RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-r-and-rstudio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Install R and RStudio&lt;/h2&gt;
&lt;p&gt;To get up and running you need to install a version of R for your operating system. You can do that from &lt;a href=&#34;http://cran.rstudio.com/&#34;&gt;here&lt;/a&gt;. Then download RStudio Desktop for your operating system from &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;here&lt;/a&gt; using the installer for your system. Then open RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-project&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create A Project&lt;/h2&gt;
&lt;p&gt;Projects are probably the best way of organising your work in RStudio. To create a new project select the dropdown menu in to top right where you see the blue R icon. Navigate to where you want to keep your R materials and give your project a name (e.g. rplos). Now you will be able to save you work into an rplos project folder and R will keep everything together when you save the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;install-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Install Packages&lt;/h2&gt;
&lt;p&gt;First we need to install some packages to help us work with the data. This list of packages are common “go to” packages for daily use.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;rplos&amp;quot;)  #the main event
install.packages(&amp;quot;readr&amp;quot;)  #for reading data
install.packages(&amp;quot;plyr&amp;quot;)  #for wrangling data
install.packages(&amp;quot;dplyr&amp;quot;)  #for wrangling data
install.packages(&amp;quot;tidyr&amp;quot;)  #for tidying data
install.packages(&amp;quot;stringr&amp;quot;)  #for manipulating strings
install.packages(&amp;quot;tm&amp;quot;)  #for text mining
install.packages(&amp;quot;XML&amp;quot;)  #for dealing with text in xml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we load the libraries. Note that &lt;code&gt;rplos&lt;/code&gt; will install and load any other packages that it needs (in this case ggplot2 for graphing) so we don’t need to worry about that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rplos)
library(readr)
library(plyr)  # load before dplyr to avoid errors
library(dplyr)
library(tidyr)
library(stringr)
library(tm)
library(XML)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next let’s take a look at the wide range of functions that are available for searching using &lt;code&gt;rplos&lt;/code&gt; by moving over to the Packages tab in RStudio and clicking on &lt;code&gt;rplos&lt;/code&gt;. A very useful tutorial on using &lt;code&gt;rplos&lt;/code&gt; can be found &lt;a href=&#34;https://ropensci.org/tutorials/rplos_tutorial.html&#34;&gt;here&lt;/a&gt; and can be cited as “Scott Chamberlain, Carl Boettiger and Karthik Ram (2015). rplos: Interface to PLOS Journals search API. R package version 0.5.0 &lt;a href=&#34;https://github.com/ropensci/rplos&#34; class=&#34;uri&#34;&gt;https://github.com/ropensci/rplos&lt;/a&gt;”. If you are already comfortable working in R you might want to head to that introductory tutorial as this article contains a lot more in the way of explanation. However, we will also add some new examples and code for working with the results to add to the resource base for &lt;code&gt;rplos&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;key-functions-in-rplos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Key functions in rplos&lt;/h2&gt;
&lt;p&gt;R is an object oriented language meaning that it works on objects such as a vector, table, list, or matrix. These are easy to create. We then apply functions to the data from &lt;code&gt;base R&lt;/code&gt; or from packages we have installed for particular tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;searchplos()&lt;/code&gt;, the basic function for searching plos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plosauthor()&lt;/code&gt;, search on author name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plostitle()&lt;/code&gt;, search the title&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plosabstract()&lt;/code&gt;, search the abstract&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plossubject()&lt;/code&gt;, search by subject&lt;/li&gt;
&lt;li&gt;&lt;code&gt;citations()&lt;/code&gt;, search the &lt;a href=&#34;http://api.richcitations.org/&#34;&gt;PLOS Rich Citations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plos_fulltext()&lt;/code&gt;, retrieve full text using a DOI&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highplos()&lt;/code&gt;, highlight search terms in the results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highbrow()&lt;/code&gt;, browse search terms in a browser with hyperlinks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functions in R take (accept) arguments which are options for the type of data we want to obtain when using an API or the calculations that we want to run on the data. For &lt;code&gt;rplos&lt;/code&gt; we will mainly use arguments setting out our search query, the fields that we want to search, and the number of results.&lt;/p&gt;
&lt;p&gt;If you are new to R this will typically takes the form of a short piece of code that is structured like this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newobject &amp;lt;- function(yourdata, argument1, argument2, other_arguments)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A new object is likely to be a table or list containing data. the sign &lt;code&gt;&amp;lt;-&lt;/code&gt; gets or passes the results of the function (such as seachplos) to the new object. To specify what we want we first include our data (&lt;code&gt;yourdata&lt;/code&gt;) and then one or more arguments which control what we get, such as the number of records or the title etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-fields-in-rplos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data Fields in rplos&lt;/h2&gt;
&lt;p&gt;There are quite a number of fields that can be searched with &lt;code&gt;rplos&lt;/code&gt; or used to refine a search. We will only use a few of them. To see the range of fields type &lt;code&gt;plosfields&lt;/code&gt; into the console and press Enter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plosfields&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, if we wanted to search the title, abstract and conclusions we would use these fields in building the query (see below). If we wanted to search everything but those fields we would probably use body. If we wanted to retrieve the references then we would include &lt;code&gt;reference&lt;/code&gt; in the fields. In &lt;code&gt;rplos&lt;/code&gt; a field is denoted by &lt;code&gt;fl =&lt;/code&gt; with the fields in quotes such as &lt;code&gt;fl = &amp;quot;title&amp;quot;&lt;/code&gt; and so on as we will see below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-searching-using-searchplos-navigating-and-exporting-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Basic Searching using &lt;code&gt;searchplos()&lt;/code&gt;, Navigating and Exporting Data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;searchplos()&lt;/code&gt; is the basic &lt;code&gt;rplos&lt;/code&gt; search function and returns a list of document identifiers (DOIs) or other data fields. The basic search result is a set of DOIs that can be used for further work. To get help for a function, or to find working examples, use &lt;code&gt;?&lt;/code&gt; in front of the function in the console:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`?`(searchplos)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will bring up the help page for that function with a description of the arguments that are available and with examples at the bottom of the page.&lt;/p&gt;
&lt;p&gt;The examples are there to help you. In &lt;code&gt;rplos&lt;/code&gt; they presently focus on the use of single search terms such as ecology. However, as we will see below, it is possible to use phrases in searching and to use multiple terms. There are quite a number of arguments (options) available for refining the results and we will include some of these in the examples.&lt;/p&gt;
&lt;p&gt;The author of this article is a big fan of pizza. So, in the first example we will carry out a simple search for the term pizza and then specify the results we want to see using the argument &lt;code&gt;fl =&lt;/code&gt; (for fields) and the number of results that we want to see using &lt;code&gt;limit = 20&lt;/code&gt;. In specifying the fields we will use &lt;code&gt;c()&lt;/code&gt; to combine them together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fl = c(&amp;quot;id&amp;quot;,&amp;quot;publication_date&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), limit = 20)
p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What &lt;code&gt;searchplos()&lt;/code&gt; has done in the background is to send a request to the PLOS API to bring back the id, publication_date, title and abstract for 20 records across the PLOS journals. To see the results type:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results in R are stored in objects (in this case the object is a list). To see the type of object in R use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When working with R it is generally more useful to understand the structure of the data so that you can work out how to access it. That can be done using &lt;code&gt;str()&lt;/code&gt; for structure. This is one of the most useful functions in R and well worth writing down.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(p)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results might seem a little confusing at first but what this is telling us is that we have an R object that is a list consisting of two components. The first is an item called &lt;code&gt;meta&lt;/code&gt; that reports the number of records found and the type of object (a data.frame). The second is &lt;code&gt;data&lt;/code&gt; which contains the information on the two results in the form of a data frame (basically a table) containing the id, date, title and abstract information that we asked PLOS for.&lt;/p&gt;
&lt;p&gt;Note that the list contains a marker &lt;code&gt;$&lt;/code&gt; for the beginning of the two lists with the data they contain appearing as &lt;code&gt;..$&lt;/code&gt; signifying that they are nested under &lt;code&gt;meta&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt;. This hierarchy helps us with accessing the data using subsetting in R. For example, if we wanted to access the &lt;code&gt;meta&lt;/code&gt; data (and we do) we can use the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p$meta&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will just print the full &lt;code&gt;meta&lt;/code&gt; data entries. If we wanted to just access the number of records (num$Found) then we would extend this a little by moving to that position in the hierarchy with:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will print out just the number of records returned by our search. An alternative way of subsetting is to use the “[” and “[[” and the numeric position in the list. In &lt;a href=&#34;http://www.amazon.com/Hands-On-Programming-Write-Functions-Simulations/dp/1449359019&#34;&gt;Hands on Programming with R&lt;/a&gt; Garrett Grolemund compares this to a train with numbered carriages where “[]” selects the train carriage e.g. [1] and “[[1]]” selects the contents of carriage number 1. We don’t need to worry about this but it is very helpful as a way of remembering the difference. For example the following selects the contents of the first item in our list (&lt;code&gt;meta&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and is the same as &lt;code&gt;p$meta&lt;/code&gt;. While:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p[[1]][[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is the same as &lt;code&gt;p$meta$numFound&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Subsetting the data by its numeric position rather than its name makes life much easier when working with lists with lots of items. As we will see below, when applying a function to a list with multiple items we can also use “[[”, 2. This will retrieve the second item in each of our line of train carriages.&lt;/p&gt;
&lt;p&gt;Another useful tip for navigating the data in RStudio is using autocomplete. Try typing the following into the console.&lt;/p&gt;
&lt;p&gt;p&lt;span class=&#34;math inline&#34;&gt;\(meta\)&lt;/span&gt; #type me in the console, do not cut and paste&lt;/p&gt;
&lt;p&gt;When we type the $ a popup will appear and display two entries as tables for &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;. Click on meta, then add another $ sign at the end. It will now display three items in purple (for vectors). Select &lt;code&gt;numFound&lt;/code&gt; and hey presto! As you work with RStudio you will notice that when you start to type a function name, lists of names will start to pop up. Type &lt;code&gt;search&lt;/code&gt; into the console but do not press enter and wait a moment. A list with three items should pop up with search {base}, searchpaths {base}, and searchplos {rplos}. This is really helpful because it saves a lot of typing. As you become more familiar with R it also helpfully displays what a function does and a reminder of its arguments. The soft brackets around {base} indicate the package where the function can be found (this can be useful for discovering functions when you get stuck).&lt;/p&gt;
&lt;p&gt;Finally, you can also see the items in your project in the Environment pane. Click on the blue arrow for &lt;code&gt;p&lt;/code&gt; in the Environment pane under Values and you will see the structure of the data in &lt;code&gt;p&lt;/code&gt; and some of its content.&lt;/p&gt;
&lt;div id=&#34;creating-a-new-object-and-writing-to-file&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a New Object and Writing to File&lt;/h3&gt;
&lt;p&gt;Ok so we have a list with some results containing &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;. We now want to export &lt;code&gt;data&lt;/code&gt; to a .csv file that we can work with in Excel or another programme.&lt;/p&gt;
&lt;p&gt;While we will want to make a note of the total number of results in &lt;code&gt;meta&lt;/code&gt;, what we really want will be in &lt;code&gt;data&lt;/code&gt;. We can simply create a new object using the code above and assign it to a name using &lt;code&gt;&amp;lt;-&lt;/code&gt;. Note that there is no space here and &lt;code&gt;&amp;lt; -&lt;/code&gt; will not work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- p$data
dat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we look at the class of this object (&lt;code&gt;class(dat)&lt;/code&gt;) we now have a data.frame (a table) that we can write to a .csv file to use later. We can do this easily using &lt;code&gt;write.csv()&lt;/code&gt; and start by naming the object we want to write (&lt;code&gt;dat&lt;/code&gt;) and then giving it a file name. Because we created an &lt;code&gt;rplos&lt;/code&gt; project in RStudio earlier (didn’t we), the file will be saved into the project folder. If you didn’t create a project or want to check the directory then use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will show your current working directory. If you do not see the name of your &lt;code&gt;rplos&lt;/code&gt; project then copy the full file path so that it looks something like this (don’t forget the &amp;quot;&amp;quot; around the path):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;setwd(&amp;quot;/Users/pauloldham/Desktop/open_source_master/rplos&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, we now know where we are. So, let’s save the file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(dat, &amp;quot;dat.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we open this up in Excel or Open Office Calc then we will see two blank entries in the abstract fields. Blank cells can create calculation problems. Inside R we can handle this by filling in the blanks with NA as follows [2]. In this case we are subsetting into dat and then asking R to identify those cells that exactly match &lt;code&gt;==&lt;/code&gt; with &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;. We then fill those cells in dat with NA (for Not Available).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat[dat == &amp;quot;&amp;quot;] &amp;lt;- NA
dat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then simply write the file as before. If we wanted to remove the NAs we have just introduced then we could use &lt;code&gt;write.csv(dat, &amp;quot;dat.csv&amp;quot;, row.names = FALSE, na = &amp;quot;&amp;quot;)&lt;/code&gt; which will convert them back to blank spaces.&lt;/p&gt;
&lt;p&gt;A faster way to deal with writing files is to use the recent &lt;code&gt;readr&lt;/code&gt; package as this will not add row numbers to exported files. Here we will use the &lt;code&gt;write_csv()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(dat, &amp;quot;dat.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The advantage of &lt;code&gt;readr&lt;/code&gt; is that it is fast and does not require the same number of arguments as the standard &lt;code&gt;write.csv&lt;/code&gt; such as specifying row names or with &lt;code&gt;read.csv&lt;/code&gt; specifying stringsAsFactors = FALSE.&lt;/p&gt;
&lt;p&gt;Finally, if we wanted to write the entire list &lt;code&gt;p&lt;/code&gt;, including &lt;code&gt;meta&lt;/code&gt; to file then we could use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(p, &amp;quot;p.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have now retrieved some data containing pizza through the PLOS API using &lt;code&gt;rplos&lt;/code&gt; and we have written the data to a file as a table we can use later. We will now move on to some more sophisticated things we can do with &lt;code&gt;rplos&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;limit-by-journal&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Limit by journal&lt;/h2&gt;
&lt;p&gt;As we have seen above, PLOS contains 7 journals and in &lt;code&gt;rplos&lt;/code&gt; the results for a search can be limited to specific journals such as PLOS ONE or PLOS Biology. Note that the short journal names appear to use the old format for PLOS consisting of mixed upper and lowercase characters (e.g. PLoSONE not PLOSONE). A nice easy way to find the short journal names is to use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;journalnamekey()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we will limit the search to PLOS ONE by adding &lt;code&gt;fq =&lt;/code&gt; to the arguments and then the &lt;code&gt;cross_published_journal_key&lt;/code&gt; argument. Note that the &lt;code&gt;fq=&lt;/code&gt; argument takes the same options as &lt;code&gt;fl=&lt;/code&gt;. But, &lt;code&gt;fq =&lt;/code&gt; filters the results returned by PLOS to only those specified in &lt;code&gt;fq =&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fl = c(&amp;quot;id&amp;quot;, &amp;quot;publication_date&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), fq = &amp;#39;cross_published_journal_key:PLoSONE&amp;#39;, start = 0, limit = 20)
head(pizza$data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have retrieved 20 records here using &lt;code&gt;limit = 20&lt;/code&gt; (the default is 10). It is generally a good idea to start with a small number of results to test that we are getting what we expect back rather than lots of irrelevant data. What if we wanted to retrieve all of the results? Here we will need to do a bit more work using the meta field.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;obtaining-the-full-number-of-results&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obtaining the full number of results&lt;/h2&gt;
&lt;p&gt;One way to do this is to take our original number of results and then subset in to the data and create a new object containing the value for the number of records in &lt;code&gt;numFound&lt;/code&gt;. Note that the number of records for a particular query below may well have gone up by the time that you read this article.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r &amp;lt;- pizza$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run a new search we can now insert &lt;code&gt;r&lt;/code&gt; into the limit = value. This will be interpreted as the numeric value of &lt;code&gt;r&lt;/code&gt; (210).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fl = c(&amp;quot;id&amp;quot;, &amp;quot;publication_date&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), fq = &amp;#39;cross_published_journal_key:PLoSONE&amp;#39;, start = 0, limit = r)
head(pizza$data)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternative way of doing this is to make life a bit easier for ourselves by first running our query and setting the limit as &lt;code&gt;limit = 0&lt;/code&gt;. This will only return the &lt;code&gt;meta&lt;/code&gt; data. We then add the subset for number found to the end of the code as &lt;code&gt;$meta$numFound&lt;/code&gt;. That will pull back the value directly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fq = &amp;quot;cross_published_journal_key:PLoSONE&amp;quot;, limit = 0)$meta$numFound
r&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then run the query again using the value of &lt;code&gt;r&lt;/code&gt; in limit = :&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fl = c(&amp;quot;id&amp;quot;, &amp;quot;publication_date&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), fq = &amp;#39;cross_published_journal_key:PLoSONE&amp;#39;, start = 0, limit = r) 
head(pizza$data)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;obtaining-the-number-of-records-across-plos-journals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obtaining the number of records across PLOS Journals&lt;/h2&gt;
&lt;p&gt;That has returned the full 210 results for PLOS ONE. We could attempt to make life even easier by first getting the results across all PLOS journals. We do this by removing the &lt;code&gt;fq =&lt;/code&gt; argument limiting the data to PLOS ONE and saving the result in and object we will call &lt;code&gt;r1&lt;/code&gt;. Note that the number of records will probably have gone up by the time you read this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r1 &amp;lt;- searchplos(&amp;quot;pizza&amp;quot;, limit = 0)$meta$numFound
r1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This produces 352 results at the time of writing. What happens now if we run our original query using the value of &lt;code&gt;r1&lt;/code&gt; (352 records) but limiting the results only to PLOS ONE?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- searchplos(q = &amp;quot;pizza&amp;quot;, fl = c(&amp;quot;id&amp;quot;, &amp;quot;publication_date&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), fq = &amp;#39;cross_published_journal_key:PLoSONE&amp;#39;, start = 0, limit = r1)
pizza$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The answer is that the 210 results in PLOS ONE are returned from the total of 244 across the PLOS journals. Why? The reason this works is that &lt;code&gt;searchplos()&lt;/code&gt; initially pulls back all of the data from the PLOS API and then applies our entry in &lt;code&gt;fq =&lt;/code&gt; as a filter. So, in reality the full 244 records are fetched and then filtered down to the 210 from PLOS ONE. In this case, this makes our lives easier because we can use the results across PLOS journals and then restrict the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-the-results-and-using-a-codebook&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing the results and using a codebook&lt;/h2&gt;
&lt;p&gt;We now have a total of 210 results for pizza. We can simply write the results to a .csv file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(pizza, &amp;quot;plosone_pizza.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this illustrates, it is very easy to use &lt;code&gt;rplos()&lt;/code&gt; and rapidly create a file that can be used for other purposes.&lt;/p&gt;
&lt;p&gt;When working in R you will often create multiple tables and take multiple steps. To keep track of what you do it is a good idea to create a text file as a codebook. Use the codebook to note down the important steps you take. The idea of a codebook is taken from Jeffrey Leek’s &lt;a href=&#34;https://leanpub.com/datastyle&#34;&gt;Elements of Data Analytic Sytle&lt;/a&gt; which provides a very accessible introduction to staying organised. To create a codebook in RStudio simply use &lt;code&gt;File &amp;gt; New File &amp;gt; Text File&lt;/code&gt;. This will open a text file that can be saved with your project. The codebook allows you to recall what actions you performed on the data months or years later. It also allows others to follow and reproduce your results and is important for &lt;a href=&#34;https://ropensci.org/blog/2014/06/09/reproducibility/&#34;&gt;reproducible research&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;proximity-searching&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Proximity Searching&lt;/h2&gt;
&lt;p&gt;We will typically want to carry out a search by first retrieving a rough working set of results to get a feel for the data and then experimenting until we are happy with the data to noise ratio (see this &lt;a href=&#34;http://rsta.royalsocietypublishing.org/content/372/2031/20140065&#34;&gt;article&lt;/a&gt; for an example).&lt;/p&gt;
&lt;p&gt;In thinking about ways to refine our search criteria we can also use proximity searching. Proximity searching focuses on the distance between words that we are interested in. To read more about this use &lt;code&gt;?searchplos&lt;/code&gt; in the console and scroll down to example seven in the help list. We reproduce that example here using the words synthetic and biology as our terms.&lt;/p&gt;
&lt;p&gt;We can set the proximity of terms using tilde &lt;code&gt;~&lt;/code&gt; and a value. For example, &lt;code&gt;~15&lt;/code&gt; will find instances of the terms synthetic and biology within 15 words of each other in the full texts of PLOS articles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;searchplos(q = &amp;quot;everything:\&amp;quot;synthetic biology\&amp;quot;~15&amp;quot;, fl = &amp;quot;title&amp;quot;, fq = &amp;quot;doc_type:full&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that while synthetic and biology appear inside quotes (suggesting they are a phrase to be searched) in reality the API will treat this as synthetic AND biology. That is, the query will look first for documents that contain the words synthetic AND biology and then for those cases where the words appear within 15 words of each other. In this case we get 1,684 results across PLOS (everything) and full texts (&lt;code&gt;fq = &amp;quot;doc_type:full&lt;/code&gt;) as we can see from this code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;searchplos(q = &amp;quot;everything:\&amp;quot;synthetic biology\&amp;quot;~15&amp;quot;, fl = &amp;quot;title&amp;quot;, fq = &amp;quot;doc_type:full&amp;quot;)$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can narrow the search horizon to ~1 to capture those cases where the terms appear next to each other (within 1 word either to the left or the right) which produces 1001 results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;searchplos(q = &amp;quot;everything:\&amp;quot;synthetic biology\&amp;quot;~1&amp;quot;, fl = &amp;quot;title&amp;quot;, fq = &amp;quot;doc_type:full&amp;quot;)$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is actually about 10 records higher than the total returned on an exact match for the phrase suggesting that there could be cases of “biology synthetic” or other issues (such as punctuation) or API performance that account for the variance. As noted in the &lt;code&gt;searchplos()&lt;/code&gt; documentation:&lt;/p&gt;
&lt;p&gt;“Don’t be surprised if queries you perform in a scripting language, like using rplos in R, give different results than when searching for articles on the PLOS website. I am not sure what exact defaults they use on their website.”&lt;/p&gt;
&lt;p&gt;As a result, it is a good idea to try different approaches. Even if it is not possible to get to the bottom of any variance it is very useful to note it down in your codebook to highlight the issue to others who may try and repeat your work.&lt;/p&gt;
&lt;p&gt;It is also important to emphasise that when using &lt;code&gt;rplos()&lt;/code&gt; it is possible to return a fragment of the text with the highlighted terms using &lt;code&gt;highplos()&lt;/code&gt; and the &lt;code&gt;hl.fragsize&lt;/code&gt; argument to set the horizon for the fragment of text around the search. This is particularly useful for text mining.&lt;/p&gt;
&lt;p&gt;In many cases the most useful information comes from searching using phrases and multiple terms. Unlike words, phrases can articulate concepts. This generally makes them more useful than single words for searching for information.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;searching-using-multiple-phrases&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Searching Using Multiple Phrases&lt;/h2&gt;
&lt;p&gt;To search by phrases we start by creating an object containing our phrases and put the phrases inside double quotation marks. If we do not use double quotation marks the search will look for documents containing both words rather than the complete phrase (e.g. synthetic AND biology rather than “synthetic biology”). Note that the code below will display &amp;quot;&amp;quot; as &amp;quot;&amp;quot; but you don’t need to enter the &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will use the search query developed in this &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0034368&#34;&gt;PLOS ONE article on synthetic biology&lt;/a&gt; in this example and retrieve the id, data, author, title and abstract across the PLOS journals.&lt;/p&gt;
&lt;p&gt;First we create the search query. Note that we use &lt;code&gt;c()&lt;/code&gt;, for combine, to combine the list of terms into a vector inside the object called &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s &amp;lt;- c(&amp;quot;\&amp;quot;synthetic biology\&amp;quot;&amp;quot;, &amp;quot;\&amp;quot;synthetic genomics\&amp;quot;&amp;quot;, &amp;quot;\&amp;quot;synthetic genome\&amp;quot;&amp;quot;, 
    &amp;quot;\&amp;quot;synthetic genomes\&amp;quot;&amp;quot;)
s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now want to get the maximum number of results returned by one of the search terms. This is slightly tricky because &lt;code&gt;rplos&lt;/code&gt; will return a list containing four list items (one for each of our search terms). Each of those lists will contain &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; items. What we want to do is find out which of the search terms returns the highest number of results inside &lt;code&gt;meta&lt;/code&gt; in &lt;code&gt;numFound&lt;/code&gt;. Then we can use that number as our limit.&lt;/p&gt;
&lt;p&gt;This involves more than one step.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First we need to fetch the data.&lt;/li&gt;
&lt;li&gt;Then we need to extract &lt;code&gt;meta&lt;/code&gt; from each list.&lt;/li&gt;
&lt;li&gt;Then we need to select &lt;code&gt;numFound&lt;/code&gt; and find and return the maximum value across the lists of results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiest way to do this is to create a small function that we will call &lt;code&gt;plos_records&lt;/code&gt;. To load the function into your Environment copy it and paste it into your console and press enter. The comments following &lt;code&gt;#&lt;/code&gt; explain what is happening will be ignored when the function runs. When you have done this if you move over to Environment you will see &lt;code&gt;plos_records&lt;/code&gt; under Functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plos_records &amp;lt;- function(q) {
  library(plyr) #for ldply
  library(dplyr) #for pipes, select and filter
    lapply(q, function(x) searchplos(x, limit = 0)) %&amp;gt;%
    ldply(&amp;quot;[[&amp;quot;, 1) %&amp;gt;% #get meta from the lists
    select(numFound) %&amp;gt;% #select numFound column of meta
    filter(numFound == max(numFound)) %&amp;gt;% #filter on max numFound
      print() #print max value of numFound
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the following code using &lt;code&gt;s&lt;/code&gt; as our query (q = s) in the function. If all goes well a result will be printed in the console with the maximum number of results. It can take a few moments for the results to come back from the API.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r2 &amp;lt;- plos_records(q = s)
r2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now see a number around 1151 (at the time of writing). Yay!&lt;/p&gt;
&lt;p&gt;Now we can use &lt;code&gt;r2&lt;/code&gt; in the limit to return all of the records. We will write this in the standard way and then display a simpler way using pipes &lt;code&gt;%&amp;gt;%&lt;/code&gt; below. Note that we use &lt;code&gt;s&lt;/code&gt; as our search terms (see &lt;code&gt;q = s&lt;/code&gt;) and we have used &lt;code&gt;r2&lt;/code&gt; for the limit (limit = r2). Because we are calling a chunk of data this can take around a minute to run.&lt;/p&gt;
&lt;p&gt;Note that at each step in the code below we are creating and then overwriting an object called &lt;code&gt;results&lt;/code&gt;. We are also naming &lt;code&gt;results&lt;/code&gt; as the first argument in each step. This can take a few moments to run.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plyr)
results &amp;lt;- lapply(s, function(x) searchplos(x, fl = c(&amp;#39;id&amp;#39;,&amp;#39;author&amp;#39;, &amp;#39;publication_date&amp;#39;, &amp;#39;title&amp;#39;, &amp;#39;abstract&amp;#39;), limit = r2))
results &amp;lt;- setNames(results, s) #add query terms to the relevant results in the list
results &amp;lt;- ldply(results, &amp;quot;[[&amp;quot;, 2) #extract the data into a single data.frame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can make life simpler by using pipes &lt;code&gt;%&amp;gt;%&lt;/code&gt; to simplify the code. The advantage of using pipes is that we do not have to keep creating and overwriting temporary objects (see above for &lt;code&gt;results&lt;/code&gt;). The code is also much easier to read and faster. To learn more about using pipes see this article from &lt;a href=&#34;http://seananderson.ca/2014/09/13/dplyr-intro.html&#34;&gt;Sean Anderson&lt;/a&gt;. Again the query might be a bit slow as the data is fetched back.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plyr)
library(dplyr)
results &amp;lt;- lapply(s, function(x) searchplos(x, fl = c(&amp;#39;id&amp;#39;, &amp;#39;author&amp;#39;, &amp;#39;publication_date&amp;#39;, &amp;#39;title&amp;#39;, &amp;#39;abstract&amp;#39;), limit = r2)) %&amp;gt;%
    setNames(s) %&amp;gt;% 
    ldply(&amp;quot;[[&amp;quot;, 2)
results&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pipes are a relatively recent innovation in R (see the &lt;code&gt;magrittr&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; packages) and most code you will see will be written in the traditional way. However, pipes make R code faster and much easier to follow. While you will need to be familiar with regular R code to follow most existing work, pipes are becoming increasingly popular because the code is simpler and has a clearer logic (e.g. do this then that).&lt;/p&gt;
&lt;p&gt;We now have our data consisting of 1,405 records in a single data frame that we can view.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;View(results)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could now simply write this to a .csv file. But there are a number of things that we might want to do first. Most of these tasks fall into the category of wrangling and tidying up data so that we can carry on working with it in R or other software such as Excel.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidying-and-organising-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tidying and Organising the Data&lt;/h2&gt;
&lt;p&gt;Many useful data cleaning and organisational tasks can be easily performed using the &lt;code&gt;dplyr()&lt;/code&gt; and &lt;code&gt;tidyr()&lt;/code&gt; packages developed by Hadley Wickham at RStudio. Other important packages include &lt;code&gt;stringr()&lt;/code&gt;(for working with text strings), &lt;code&gt;plyr()&lt;/code&gt; and &lt;code&gt;reshape2()&lt;/code&gt; (general wrangling) and &lt;code&gt;lubridate()&lt;/code&gt; (for working with dates). These packages were developed by Hadley Wickham and colleagues with the specific aim of making it easier to work with data in R in a consistent way. We will mainly use &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; in the examples below and a very useful &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;RStudio cheatsheet&lt;/a&gt; can help you with working with &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;renaming-a-column&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Renaming a column&lt;/h3&gt;
&lt;p&gt;First we might want to tidy up by renaming a column. For example we might want to rename &lt;code&gt;.id&lt;/code&gt; to something more meaningful. We can use &lt;code&gt;rename()&lt;/code&gt; from &lt;code&gt;dplyr()&lt;/code&gt; to do that (see &lt;code&gt;?rename&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- rename(results, search_terms = .id)
results&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;filling-blank-spaces&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Filling Blank Spaces&lt;/h2&gt;
&lt;p&gt;It is good practice to fill blank cells with NA for “Not Available”&amp;quot; to avoid calculation problems. For example, as in the earlier example, we have some blank cells in the abstract field and there may be others somewhere else. Following this &lt;a href=&#34;http://r.789695.n4.nabble.com/How-to-convert-blanks-to-NA-td895155.html&#34;&gt;StackOverflow answer&lt;/a&gt; we can do this easily.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results[results == &amp;quot;&amp;quot;] &amp;lt;- NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If for some reason we wanted to remove the NA values we can handle that at the time of exporting to a file (see above).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;converting-dates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Converting Dates&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;publication_date&lt;/code&gt; field is a character vector. We can easily turn this into a Date format that can be used in R and drop the T00:00:00 for time information using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results$publication_date &amp;lt;- as.Date(results$publication_date)
head(results$publication_date)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding columns&lt;/h2&gt;
&lt;p&gt;When dealing with dates we might want to simply split the &lt;code&gt;publication_date&lt;/code&gt; field into three columns for year, month and day. We can do that using &lt;code&gt;separate()&lt;/code&gt; from &lt;code&gt;tidyr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- separate(results, publication_date, c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;), sep = &amp;quot;-&amp;quot;, 
    remove = FALSE)
head(select(results, year, month, day))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have specified the data (results), the column we want to separate (results) and then the three new columns that we want to create by closing them in &lt;code&gt;c()&lt;/code&gt; and placing them in quotes. This creates three new columns. The &lt;code&gt;remove&lt;/code&gt; argument specifies whether we want to remove the original column (the default is TRUE) or keep it.&lt;/p&gt;
&lt;p&gt;Because working with dates can be quite awkward (to put it mildly) it makes sense to have a range of options available to you early on in working with your data rather than having to go back to the beginning much later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;add-a-count&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Add a count&lt;/h2&gt;
&lt;p&gt;One feature of pulling back literature from an API for scientific literature is that the fields tend to be character fields rather than numeric. Character vectors in R are quoted with &amp;quot;&amp;quot;. This can make life awkward if we want to start counting things later on. To add a count column we can use &lt;code&gt;mutate&lt;/code&gt; from the &lt;code&gt;dplyr()&lt;/code&gt; package to create a new column &lt;code&gt;number&lt;/code&gt;. &lt;code&gt;number&lt;/code&gt; is based on assigning the value 1 to the id columns using &lt;code&gt;mutate()&lt;/code&gt;. We are avoiding the term count because it is the name of a function &lt;code&gt;count()&lt;/code&gt;. There are other ways of doing this but this approach points to the very useful &lt;code&gt;mutate()&lt;/code&gt; function in &lt;code&gt;dplyr&lt;/code&gt; for adding a new variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
results &amp;lt;- mutate(results, number = sum(id = 1))
head(select(results, title, number))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we view results we will now see a new column number that contains the value 1 for each entry.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;remove-a-column&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remove a column&lt;/h2&gt;
&lt;p&gt;We will often end up with more data than we want, or create more columns than we need. The standard way to remove a column is to use the trusty &lt;code&gt;$&lt;/code&gt; to select the column and assign it to NULL.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results$columnname &amp;lt;- NULL  #dummy example&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way of doing this, which can be used for multiple columns, is to use &lt;code&gt;select()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; (see &lt;code&gt;?select()&lt;/code&gt;). Select will only keep the columns that we name. We can do this using the column names or position. For example the following will keep the first 8 columns (1:8) but will drop the unnamed 9th column because the default is to drop columns that are not named. We could also write out the column names but using the position numbers is faster in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- select(results, 1:8)
length(test)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also drop columns by position using the following (to remove column 5 and 6). This approach is useful when there are lots of columns to deal with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- select(results, 1:4, 7:9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An easier approach in this case is to explicitly drop columns using &lt;code&gt;-&lt;/code&gt; and keep the others.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- select(results, -month, -day)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Select is also very useful for reordering columns. Let’s imagine that we wanted to move the &lt;code&gt;id&lt;/code&gt; column to the first column. We can simply put &lt;code&gt;id&lt;/code&gt; as the first entry in &lt;code&gt;select()&lt;/code&gt; and then the total columns to reorder.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- select(results, id, 1:9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The select function is incredibly useful for rapidly organising data as we will see below.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arranging-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arranging the Data&lt;/h2&gt;
&lt;p&gt;We might want to arrange our rows (which can be quite difficult to do in base R). The &lt;code&gt;arrange()&lt;/code&gt; function in &lt;code&gt;dplyr&lt;/code&gt; makes this easy and arranges a column’s values in ascending order by default. Here we will specify descending &lt;code&gt;desc()&lt;/code&gt; because we want to see the most recent publications that mention our search terms at the top.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- arrange(results, desc(publication_date))
head(results$publication_date)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we use &lt;code&gt;View(results)&lt;/code&gt; we will see that the most recent data is at the top. We will also see that some of the titles towards the top are duplicates of the same article because they include all the terms in our search. So, the next thing we will want to do is to address duplicates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dealing-with-duplicates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dealing with Duplicates&lt;/h2&gt;
&lt;p&gt;How you deal with duplicates depends on what you are trying to achieve. If you are attempting to develop data on trends then duplicates will result in overcounting unless you take steps to count only distinct records. Duplicates of the same data will also distort text mining of the frequencies of terms. So, from that perspective duplicates are bad. On the other hand. If we are interested in the use of terms over time within an emerging area of science and technology, then we might well want to look in detail at the use of particular terms. For example, synthetic genomics is an alternative term for synthetic biology favoured by the J. Craig Venter group. We could look at whether this term is more widely used. Do synthetic biologists also use terms such as engineering biology, genome engineering or the fashionable new genome editing technique? In these cases duplicate records using terms are good because shifts in language can be mapped over time. This suggests a need for a strategy that uses different data tables to answer different questions.&lt;/p&gt;
&lt;p&gt;As we have already seen, it is very easy in R to create new objects (typically data.frames), take some kind of action, and write the data to a file. In thinking about duplicates we would probably first want to find out what we are dealing with by identifying unique records. There are multiple ways to do this, here are two:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique(results$id)  #displays unique DOIs (base R)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_distinct(results$id)  #displays the count of distinct DOIs (dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells us there are 1,098 unique DOIs meaning there were 307 duplicates at the time of writing.&lt;/p&gt;
&lt;p&gt;Next we have two main options.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We can spread the duplicate results across the table&lt;/li&gt;
&lt;li&gt;We can identify and delete the duplicates.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;spreading-data-using-spread-from-tidyr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Spreading data using &lt;code&gt;spread()&lt;/code&gt; from &lt;code&gt;tidyr&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Rather than simply deleting our duplicate DOIs, we could create new columns for each search term and its associated DOI. This will be useful because it will tell us which terms are associated with which records over time. This is easy to do with &lt;code&gt;spread()&lt;/code&gt; by providing a &lt;code&gt;key&lt;/code&gt; and a &lt;code&gt;value&lt;/code&gt; in the arguments. In this case, we want to use &lt;code&gt;search_terms&lt;/code&gt; as the &lt;code&gt;key&lt;/code&gt; (column names) to spread across the table and the DOIs in the &lt;code&gt;id&lt;/code&gt; column as the &lt;code&gt;value&lt;/code&gt; for the rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spread_results &amp;lt;- spread(results, search_terms, id)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a column for each search term with the relevant DOIs as the values. Note that the default is to drop the original column (in this case &lt;code&gt;search_terms&lt;/code&gt;) when creating the new columns. Things will go badly wrong if you try to keep the existing column because R will be simultaneously trying to spread the data, thus reducing the size of the table, and keep the table in the same size. So, we will leave the default to drop the column as is.&lt;/p&gt;
&lt;p&gt;We now have a data.frame with 1098 rows and the search terms identified in each column. If we briefly inspect &lt;code&gt;spread_results&lt;/code&gt; on the terms at the end we can detect a potentially interesting pattern where some documents are only using terms such as synthetic genome or synthetic genomics while others are using only synthetic biology or a mix of terms.&lt;/p&gt;
&lt;p&gt;We have now reduced our data to unique records while preserving our search terms as reference points. The limitation of this approach is that by spreading the DOIs across 4 columns we no longer have a tidy single column of DOIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deleting-duplicates&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Deleting Duplicates&lt;/h3&gt;
&lt;p&gt;As an alternative, or complement, to spread we can use a logical TRUE/FALSE test to filter our dataset. There are a number of functions that perform logical tests in R (see also &lt;code&gt;which()&lt;/code&gt;, &lt;code&gt;%in%&lt;/code&gt;, &lt;code&gt;within()&lt;/code&gt;). In this case the most appropriate choice is probably &lt;code&gt;duplicated()&lt;/code&gt;. &lt;code&gt;duplicated()&lt;/code&gt; will mark duplicate records as TRUE and non-duplicated records as FALSE. We will add a column to our data using the trusty &lt;code&gt;$&lt;/code&gt; when creating the new column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results$duplicate &amp;lt;- duplicated(results$id)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we use View(results) a new column will have been added to results. Records that are not duplicates are marked FALSE while records that are duplicates are marked TRUE. We now want to filter that table down to the results that are not duplicated (are FALSE) from our logical test. We will use &lt;code&gt;filter()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; (see above). While &lt;code&gt;select()&lt;/code&gt; works exclusively with columns &lt;code&gt;filter()&lt;/code&gt; works with rows and allows us to easily filter the data on the values contained in a row.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unique_results &amp;lt;- filter(results, duplicate == FALSE) %&amp;gt;%
  select(- search_terms) 
#drop search_terms column&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have asked &lt;code&gt;filter()&lt;/code&gt; to show us only those values in the duplicate column that exactly match with FALSE. We now have a data from with 1097 unique results with the DOIs in one column.&lt;/p&gt;
&lt;p&gt;The creation of logical TRUE/FALSE vectors is very useful in creating conditions to filter data. In this case however, in the process note that we will lose information from the &lt;code&gt;search_terms&lt;/code&gt; column which will become incomplete. To avoid potential confusion later on we drop the &lt;code&gt;search_terms&lt;/code&gt; column using &lt;code&gt;select(- search_terms)&lt;/code&gt; in the code above. If we wanted to keep the terms we would use the spread method above.&lt;/p&gt;
&lt;p&gt;We now have three data.frames, &lt;code&gt;results&lt;/code&gt;, &lt;code&gt;spread_results&lt;/code&gt;, and &lt;code&gt;unique_results&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;results&lt;/code&gt; is our core or reference set. If we planned to do a significant amount of work with this data we would save a copy of &lt;code&gt;results&lt;/code&gt; to .csv and label it as &lt;code&gt;raw&lt;/code&gt; with notes in our codebook on its origins and the actions taken to generate it. It can be a good idea to &lt;code&gt;.zip&lt;/code&gt; a raw file so that it is more difficult to access by accident.&lt;/p&gt;
&lt;p&gt;Going forward we would use the &lt;code&gt;spread_results&lt;/code&gt; and &lt;code&gt;unique_results&lt;/code&gt; for further work.&lt;/p&gt;
&lt;p&gt;As we did earlier, use either write.csv(x, “x.csv”, row.names = FALSE) or the simpler and faster &lt;code&gt;write_csv()&lt;/code&gt;. R can write multiple files in a blink. This will write all three files to the rplos project folder (use &lt;code&gt;getwd()&lt;/code&gt; and &lt;code&gt;setwd()&lt;/code&gt; if you want to do something different).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(results, &amp;quot;results.csv&amp;quot;)
write_csv(spread_results, &amp;quot;spread_results.csv&amp;quot;)
write_csv(unique_results, &amp;quot;unique_results.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, so we have now a dataset containing the records for a range of terms and we have come a long way. Quite a lot of this has been about what to do with PLOS data once we have accessed it in terms of turning it into tables that we can work with. In the next section we will look at how to restrict searches by section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;restricting-searches-by-section&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Restricting searches by section&lt;/h2&gt;
&lt;p&gt;The default for searching with &lt;code&gt;rplos&lt;/code&gt; is to search everything. This can produce many passing results and be overwhelming. There are quite a number of options for restricting searches in &lt;code&gt;rplos&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;by-author&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;By author&lt;/h2&gt;
&lt;p&gt;In creating the results dataset above we included the &lt;code&gt;author&lt;/code&gt; field. However, there are some complexities to searching with author names and working with author data that it is important to understand. We will start by searching on author names and then look at how to process the data.&lt;/p&gt;
&lt;p&gt;To restrict a search by author name we can use either the full name or the surname:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plosauthor(q = &amp;quot;Paul Oldham&amp;quot;, fl = c(&amp;quot;author&amp;quot;, &amp;quot;id&amp;quot;), fq = &amp;quot;doc_type:full&amp;quot;, 
    limit = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example we have specified &lt;code&gt;doc_type:full&lt;/code&gt; to return only the results for full articles. If you do not use this then the search will return a large number of repeated results based on article sections. So, in this case, Paul Oldham - the author of this article on &lt;code&gt;rplos&lt;/code&gt; - has published two articles in PLOS ONE. If &lt;code&gt;doc_type:full&lt;/code&gt; isn’t specified more than 20 results are returned that display different sections of the two articles. This will create a duplication issue later on, so a sensible default approach is to use &lt;code&gt;doc_type:full&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a general observation, considerable caution should be exercised when working with author names because of problems with the lumping of names and splitting of names as described in this &lt;a href=&#34;http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0070299&#34;&gt;PLOS ONE article&lt;/a&gt;. If a large number of results are encountered on a single author name consider using match criteria from other available data fields to ensure that separate persons are not being lumped together by name. Above all, do not assume that simply because a name is the same, or very similar to the target name, that the name designates the same person.&lt;/p&gt;
&lt;p&gt;The next issue we need to address is what to do with the author data when we have retrieved it. The reason for this is that the author field in the results is generally a concatenated field containing the names of the authors of a particular article. We will start with the &lt;code&gt;oldham&lt;/code&gt; results set.&lt;/p&gt;
&lt;p&gt;In this case we will make the call to &lt;code&gt;plosauthor()&lt;/code&gt; and then use &lt;code&gt;ldply()&lt;/code&gt; from &lt;code&gt;plyr&lt;/code&gt; to return a data frame containing &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;. Then we will use &lt;code&gt;fill&lt;/code&gt; from &lt;code&gt;tidyr&lt;/code&gt; to take the &lt;code&gt;numFound&lt;/code&gt; and fill down that column. We will remove the start column using &lt;code&gt;select()&lt;/code&gt; and finally &lt;code&gt;filter()&lt;/code&gt; to limit the table to data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham &amp;lt;- plosauthor(q = &amp;quot;Paul Oldham&amp;quot;, fl = c(&amp;quot;author&amp;quot;, &amp;quot;id&amp;quot;), fq = &amp;quot;doc_type:full&amp;quot;, limit = 20) %&amp;gt;%
  ldply(&amp;quot;[&amp;quot;, 1:2) %&amp;gt;%
  fill(numFound, start) %&amp;gt;%
  select(- start) %&amp;gt;%
  filter(.id == &amp;quot;data&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a two records with the author and id (DOI) data. The next thing we want to do is to separate the author names out. We can do this using &lt;code&gt;separate()&lt;/code&gt;. Note that &lt;code&gt;separate()&lt;/code&gt; will need to know the number of names involved before hand. In the oldham data case there are three authors of each article. We will deal with how to calculate the number of author names shortly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;oldham &amp;lt;- separate(oldham, author, 1:3, sep = &amp;quot;;&amp;quot;, remove = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have some other choices. We could simply keep only the first author name. To do that, in this particular case, we could use &lt;code&gt;select()&lt;/code&gt; and the numeric position of the columns that we want to remove.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;first_author &amp;lt;- select(oldham, -7, -8)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As an alternative, we could place each author name on its own row so that we can focus in on a specific author later. For that we can use &lt;code&gt;gather()&lt;/code&gt; from &lt;code&gt;tidyr&lt;/code&gt; and the column position numbers (not their names in this case) of the columns we want to gather.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;authors &amp;lt;- gather(oldham, number, authors, 5:7)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As above &lt;code&gt;gather()&lt;/code&gt; requires a key and value field. In this case we have used the number as our key and authors as our value. We have then specified that we want to gather columns 6 to 8 into the new column authors.&lt;/p&gt;
&lt;p&gt;That was easy because we are dealing with a small number of results with a uniform number of authors. However, our &lt;code&gt;results&lt;/code&gt; data is more complicated than this because we have multiple author names for each article and the number of authors for the articles could vary considerably.&lt;/p&gt;
&lt;p&gt;We will need to organise the data and to run some simple calculations to make this work. This will take six steps. The full working code is below.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We calculate the number of columns in our dataset. We do this because the number may vary depending on what fields we retrieve from &lt;code&gt;rplos&lt;/code&gt;. We will use &lt;code&gt;ncols()&lt;/code&gt; to make the calculation.&lt;/li&gt;
&lt;li&gt;We use a short function from &lt;code&gt;stringr&lt;/code&gt; to calculate the number of authors based on the author name separator “;” (+1 to capture the final names in the sequence). This gives us the maximum number of authors across the dataset that we need to split the data into (in this case 83 as the value of n). Copy and paste the function below into the console to access it.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;author_count &amp;lt;- function(data, col = &amp;quot;&amp;quot;, sep = &amp;quot;[^[:alnum:]]+&amp;quot;) {
    library(stringr)
    authcount &amp;lt;- str_count(data[[col]], pattern = sep)
    n &amp;lt;- as.integer(max(authcount) + 1)
    print(n)
}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We use &lt;code&gt;select()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; to move our target column to the first column. This simply makes it easier to specify column positions in &lt;code&gt;separate()&lt;/code&gt; and &lt;code&gt;gather()&lt;/code&gt; later on.&lt;/li&gt;
&lt;li&gt;We use the value of &lt;code&gt;n&lt;/code&gt; to separate the author names into multiple columns&lt;/li&gt;
&lt;li&gt;We then gather them back in using the value of &lt;code&gt;n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Splitting on a separator such as &lt;code&gt;;&lt;/code&gt; normally generates invisible leading and trailing white space. This will prevent author names from ranking correctly (e.g. in Excel or Tableau). The &lt;code&gt;str_trim()&lt;/code&gt; function from &lt;code&gt;stringr&lt;/code&gt; provides an easy way of removing the white space (specify side as right, left or both).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Copy and paste the code below and then hit Enter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#---calculations---
colno &amp;lt;- ncol(unique_results)  #calculate number of columns
n &amp;lt;- author_count(unique_results, &amp;quot;author&amp;quot;, &amp;quot;;&amp;quot;)  # See function above. Calculate n as an integer to meet requirement for separate()
#---select, separate and gather---
full_authors &amp;lt;- select(unique_results, author, 1:colno)  #bring author to the front
full_authors &amp;lt;- separate(full_authors, author, 1:n, sep = &amp;quot;;&amp;quot;, remove = TRUE, 
    convert = FALSE, extra = &amp;quot;merge&amp;quot;, fill = &amp;quot;right&amp;quot;)  #separate
full_authors &amp;lt;- gather(full_authors, value, authors, 1:n, na.rm = TRUE)  #gather
#---trim authors----
full_authors$authors &amp;lt;- str_trim(full_authors$authors, side = &amp;quot;both&amp;quot;)  #trim leading and trailing whitespace&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can simplify this with pipes to bring together the actions on the new full_authors object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#---calculations---
colno &amp;lt;- ncol(unique_results)
n &amp;lt;- author_count(unique_results, &amp;quot;author&amp;quot;, &amp;quot;;&amp;quot;)
#---select, separate, gather---
full_authors &amp;lt;- select(unique_results, author, 1:colno) %&amp;gt;% separate(author, 
    1:n, sep = &amp;quot;;&amp;quot;, remove = TRUE, convert = FALSE, extra = &amp;quot;merge&amp;quot;, fill = &amp;quot;right&amp;quot;) %&amp;gt;% 
    gather(value, authors, 1:n, na.rm = TRUE)
#---trim authors----
full_authors$authors &amp;lt;- str_trim(full_authors$authors, side = &amp;quot;both&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In running this code we will remove the original author column (column 1) by specifying &lt;code&gt;remove = TRUE&lt;/code&gt; in &lt;code&gt;separate()&lt;/code&gt;. &lt;code&gt;gather()&lt;/code&gt; will place the new &lt;code&gt;authors&lt;/code&gt; column at the end. So, make sure you scroll to the final column when viewing the results. We could also drop unwanted columns.&lt;/p&gt;
&lt;p&gt;We now have a complete list of individual author names that could be used to look up individual authors, to clean up author names for statistical use and for author network mapping. As a brief example, if we wanted to look up contributions by Jean Peccoud who leads the &lt;a href=&#34;http://blogs.plos.org/synbio/&#34;&gt;PLOS SynBio blog&lt;/a&gt; we might use the following based on this useful &lt;a href=&#34;http://stackoverflow.com/questions/22850026/filtering-row-which-contains-a-certain-string-using-dplyr&#34;&gt;Stack Overflow answer&lt;/a&gt;. See ?grepl for more info.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Peccoud &amp;lt;- filter(full_authors, grepl(&amp;quot;Peccoud&amp;quot;, authors))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will not go into depth on these topics, but generating this type of author list is an important step in enabling wider analytics and visualisation. While the code used to get to this list of authors may appear quite involved, once the basics are understood it can be used over and over again.&lt;/p&gt;
&lt;p&gt;Let’s write that data to a .csv file to explore later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(full_authors, &amp;quot;full_authors.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;title-search-using-plostitle&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Title search using &lt;code&gt;plostitle()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For a title search we can use &lt;code&gt;plostitle()&lt;/code&gt;. As above you may want to count the number of records first using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t &amp;lt;- plostitle(q = &amp;quot;synthetic biology&amp;quot;, limit = 0)$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we run the search to return the number of results we would like. Here we have set it to the value of t above (11). We have limited the results to the data field by subsetting with $data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;title &amp;lt;- plostitle(q = &amp;quot;synthetic biology&amp;quot;, fl = &amp;quot;title&amp;quot;, limit = t)$data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;abstract-search-using-plosabstract&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Abstract search using &lt;code&gt;plosabstract()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For confining the searches to abstracts we can use &lt;code&gt;plosabstract()&lt;/code&gt;. We will start with a quick count of records.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- plosabstract(q = &amp;quot;synthetic biology&amp;quot;, limit = 0)$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To retrieve the results we could use the value of &lt;code&gt;a&lt;/code&gt;. As an alternative we could set it arbitrarily high and the correct results will be returned. Of course if we don’t know what the total number of results are then we will be unsure whether we have captured the universe. But, an arbitrary number can be useful for exploration.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abstract &amp;lt;- plosabstract(q = &amp;quot;synthetic biology&amp;quot;, fl = &amp;quot;id, title, abstract&amp;quot;, 
    limit = 200)
abstract$data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, we can easily create a new object containing the data.frame. In this case we will also include the meta data and then use &lt;code&gt;fill()&lt;/code&gt; from &lt;code&gt;tidyr()&lt;/code&gt; to fill down the &lt;code&gt;numFound&lt;/code&gt; field and the start with 0. Note that &lt;code&gt;meta&lt;/code&gt; will appear at the top of the list and will create a largely blank row. To avoid this, while keeping number of records for reference, we will use filter from &lt;code&gt;tidyr()&lt;/code&gt;. This short code will do that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abstract_df &amp;lt;- ldply(abstract, &amp;quot;[&amp;quot;, 1:2) %&amp;gt;% fill(numFound, start) %&amp;gt;% filter(.id == 
    &amp;quot;data&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;subject-area-using-plossubject&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Subject Area using &lt;code&gt;plossubject()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To search by subject area use &lt;code&gt;plossubject&lt;/code&gt;. The default return is 10 results of the total results. So, try starting with a search such as this to get an idea of how many results there are. In this case the query has been limited to PLOS ONE and full text articles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sa &amp;lt;- plossubject(q = &amp;quot;\&amp;quot;synthetic+biology\&amp;quot;&amp;quot;, fq = list(&amp;quot;cross_published_journal_key:PLoSONE&amp;quot;, 
    &amp;quot;doc_type:full&amp;quot;))$meta$numFound&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the time of writing this returns 739 results. We will simply pull back 10 results. To pull back all of the results replace 10 with &lt;code&gt;sa&lt;/code&gt; above or type the number into &lt;code&gt;limit =&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plossubject(q = &amp;quot;\&amp;quot;synthetic+biology\&amp;quot;&amp;quot;, fl = &amp;quot;id&amp;quot;, fq = list(&amp;quot;cross_published_journal_key:PLoSONE&amp;quot;, 
    &amp;quot;doc_type:full&amp;quot;), limit = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As noted in the documentation, the results we return from the API and the results on the website are not necessarily the same because the settings used by PLOS on the website are not clear.&lt;/p&gt;
&lt;p&gt;In this case we return 740 results while, at the time of writing, PLOS ONE lists 417 articles in the &lt;a href=&#34;http://www.plosone.org/browse/Synthetic+biology?startPage=0&amp;amp;filterAuthors=&amp;amp;filterSubjectsDisjunction=&amp;amp;filterArticleTypes=&amp;amp;pageSize=13&amp;amp;filterKeyword=&amp;amp;filterJournals=PLoSONE&amp;amp;query=&amp;amp;ELocationId=&amp;amp;id=&amp;amp;resultView=&amp;amp;sortValue=&amp;amp;unformattedQuery=*%3A*&amp;amp;sortKey=Most+views%2C+all+time&amp;amp;filterSubjects=Synthetic%20biology&amp;amp;volume=&amp;amp;&#34;&gt;Synthetic Biology subject area&lt;/a&gt;. This will merit clarification of the criteria for counts used on the PLOS website and the API returns.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;highlighting-terms-and-text-fragments-with-highplos&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Highlighting terms and text fragments with highplos()&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;highplos()&lt;/code&gt; is a great function for research in PLOS, particularly when combined with opening results in a browser using &lt;code&gt;highbrow()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Highlighting will pull back a chunk of text with the search term highlighted with the emphasis &lt;em&gt; &lt;/em&gt; tag enclosing the individual words in a search phrase. It is possible that an entire phrase can be highlighted (see hl.usePhraseHighlighter) but this requires further exploration.&lt;/p&gt;
&lt;p&gt;In this example we will simply use the term synthetic biology and then highlight the terms in the abstract &lt;code&gt;hl.fl =&lt;/code&gt; and limit this to 10 rows of results. We will also add the function &lt;code&gt;highbrow()&lt;/code&gt; (for highlight browse) at the end. This will open the results in our browser. In the examples we use a pipe (%&amp;gt;%) meaning &lt;code&gt;this %then% that&lt;/code&gt;. This means that we do not have to enter the name snippet into the highbrow function and simplifies the code.&lt;/p&gt;
&lt;p&gt;When reviewing the results in a browser note that we can click on the DOI to see the full article. This is a really useful tool for assessing which articles we might want to take a closer look at.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;highplos(q = &amp;#39;&amp;quot;synthetic biology&amp;quot;&amp;#39;, hl.fl = &amp;#39;abstract&amp;#39;, fq = &amp;quot;doc_type:full&amp;quot;, rows = 10) %&amp;gt;%
  highbrow() #launches the browser&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in some cases, even though we are restricting to &lt;code&gt;doc-type:full&lt;/code&gt;, we retrieve entries with no data. In one case this is because we are highlighting terms in the abstract when the term appears in the full text. In a second case we have picked up a correction where one of the authors is at a synthetic biology centre but neither the abstract or text mention synthetic biology. So, bear in mind that some further exploration may be required to understand why particular results are being returned. These issues are minor and this is a great tool.&lt;/p&gt;
&lt;p&gt;There are two additional options (arguments) for &lt;code&gt;highplos()&lt;/code&gt; that we can use. The first of these is snippets using &lt;code&gt;hl.snippets =&lt;/code&gt; and the second is &lt;code&gt;hl.fragsize =&lt;/code&gt;. Both can be used in conjunction with &lt;code&gt;highbrow()&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;snippets-using-hl.snippets&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Snippets using hl.snippets&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;snippet &amp;lt;- highplos(q = &amp;#39;&amp;quot;synthetic biology&amp;quot;&amp;#39;, hl.fl = list(&amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), hl.snippets = 10, rows = 100) %&amp;gt;%
  highbrow()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snippets argument is handy (the default value for a snippet is 1 but goes up to as many as you like). It become very interesting when we add &lt;code&gt;hl.mergeContiguous = &#39;true&#39;&lt;/code&gt;. This will display the entries captured in the order of the articles to provide a sense of its uses by the author(s).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;highplos(q=&amp;#39;&amp;quot;synthetic biology&amp;quot;&amp;#39;, hl.fl = &amp;quot;abstract&amp;quot;, hl.snippets = 10, hl.mergeContiguous = &amp;#39;true&amp;#39;, rows = 10) %&amp;gt;%
  highbrow()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;fragment-size-using-hl.fragsize&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;fragment size using hl.fragsize&lt;/h3&gt;
&lt;p&gt;Greater control over what we are seeing is provided using the &lt;code&gt;hl.fragsize&lt;/code&gt; option. This allows us to specify the number of characters (including spaces) that we want to see in relation to our target terms.&lt;/p&gt;
&lt;p&gt;In the first example we will highlight the phrase synthetic biology in the titles and abstracts and set the fragment size (using hl.fragsize ) to a high 500. This will return the first 500 characters including spaces rather than words. We will set the number of rows to a somewhat arbitrary 200. This can easily be pushed a lot higher but expect to wait for a few moments if you move this to 1000 rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;highplos(q = &amp;#39;&amp;quot;synthetic biology&amp;quot;&amp;#39;, hl.fl = list(&amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), hl.fragsize = 500, rows = 200) %&amp;gt;%
  highbrow()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also do the reverse of a larger search by reducing the fragment size to say up to 100 characters. At the moment it is unclear whether it is possible to control whether characters are selected to the right or the left of our target terms. Note that results will display up to 100 characters where they are available (short results will be for sentences such as titles that are less than 100 characters)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;highplos(q = &amp;#39;&amp;quot;synthetic biology&amp;quot;&amp;#39;, hl.fl = list(&amp;quot;title&amp;quot;, &amp;quot;abstract&amp;quot;), hl.fragsize = 100, rows = 200) %&amp;gt;%
  highbrow()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is great about this is that we can easily control the amount of text that we are seeing and then select articles of interest to read straight from the browser. We can also start to think about ways to use this information for text mining to identify terms used in conjunction with synthetic biology or types of synthetic biology.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;get-the-full-text-of-one-or-more-articles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Get the full text of one or more articles&lt;/h2&gt;
&lt;p&gt;We will finish this article by briefly demonstrating how to retrieve and save the full text of one or more articles. &lt;code&gt;rplos&lt;/code&gt; uses a combination of the &lt;code&gt;XML&lt;/code&gt; and the &lt;code&gt;tm&lt;/code&gt; (for text mining) package.&lt;/p&gt;
&lt;p&gt;Retrieving full text should initially be used rather sparingly because you could pull back a lot of data in XML format that you may then struggle to process. So, it is probably best to start small.&lt;/p&gt;
&lt;p&gt;Using the unique_results data that we created above we have a list of DOIs in the id field. We can create a vector of these using the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;doi &amp;lt;- unique_results$id&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That has created a vector of 1097 dois. To limit those results, let’s create a shorter version where we select five rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;short_doi &amp;lt;- doi[1:5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use &lt;code&gt;plos_fulltext()&lt;/code&gt; to retrieve the full text.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ft &amp;lt;- plos_fulltext(short_doi)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we pull back the two articles an object is created of class &lt;code&gt;plosft&lt;/code&gt;. To see the full text of one of the individual articles we use the trusty &lt;code&gt;$&lt;/code&gt; and then select a doi.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ft$`10.1371/journal.pone.0140969`&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This displays a lot of the XML tags inside the text. We would now like to extract the text without the XML tags. The &lt;code&gt;rplos&lt;/code&gt; documentation for &lt;code&gt;plos_fulltext()&lt;/code&gt; helps us to do this using the following code. The first part of the code uses the XML package to parse the results removing the xml tags in the process.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tm)
library(XML)
ft_parsed &amp;lt;- lapply(ft, function(x) {
    xpathApply(xmlParse(x), &amp;quot;//body&amp;quot;, xmlValue)
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we type &lt;code&gt;ft_parsed&lt;/code&gt; we will now see the text (the body without title and abstract) fly by without all of the tags.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ft_parsed&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The object returned by this is a list (use &lt;code&gt;class(ft_parsed)&lt;/code&gt;). Next, we can transform this into a corpus (a text or collection of texts) that we can save to disk using the following code from the &lt;code&gt;rplos&lt;/code&gt; &lt;code&gt;plos_fulltext()&lt;/code&gt; example.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tmcorpus &amp;lt;- Corpus(VectorSource(ft_parsed))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we type tmcorpus$ into the console then we will see 1 to 5 pop up, but this will return NULL if selected. The data is there but we need to use &lt;code&gt;str(tmcorpus&lt;/code&gt;) to see the structure of the corpus. If we want to view a text within the corpus we can use &lt;code&gt;writeLines()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;writeLines(as.character(tmcorpus[[2]]))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also view the five texts in our corpus (be prepared for a lot of scrolling) by using lapply to read over the two texts as character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lapply(tmcorpus[1:5], as.character)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information see the &lt;a href=&#34;https://cran.r-project.org/web/packages/tm/vignettes/tm.pdf&#34;&gt;Ingo Feinerer (2015) Introduction to the tm package&lt;/a&gt; (also available in the tm documentation) from which the above is drawn.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-corpus-to-disk&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing a corpus to disk&lt;/h2&gt;
&lt;p&gt;To write a corpus we first need to create a folder where the files will be housed (otherwise they will simply be written into your project folder with everything else).&lt;/p&gt;
&lt;p&gt;The easiest way to create a new folder is to head over to the Files Tab in RStudio (normally in the bottom right pane) and choose &lt;code&gt;New Folder&lt;/code&gt;. We will call it &lt;code&gt;tm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now use &lt;code&gt;getwd()&lt;/code&gt; and copy the file path into the following function, from the writeCorpus examples, adding &lt;code&gt;/tm&lt;/code&gt; at the end. It will look something like this but replace the path with your own, not forgetting the &lt;code&gt;/tm&lt;/code&gt;. Then press Enter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;writeCorpus(tmcorpus, path = &amp;quot;/Users/paul/Desktop/open_source_master/rplos/tm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you look in the tm folder inside rplos (use the Files tab in RStudio) you will now see five texts with the names 1 to 5. For more details, such as naming files and specifying file types, see &lt;code&gt;?writeCorpus&lt;/code&gt; and the tm package documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;In this chapter we have focused on using the &lt;code&gt;rplos&lt;/code&gt; package to access scientific articles from the Public Library of Science (PLOS). As we have seen, with short pieces of code it is easy to search and retrieve data from PLOS on a whole range of subjects whether it be pizza or synthetic biology.&lt;/p&gt;
&lt;p&gt;One of the most powerful features of R is that it is quite easy to access free online data using APIs. &lt;code&gt;rplos&lt;/code&gt; is a very good starting point for learning how to retrieve data using an API because it is well written and the data that comes back is remarkably clean.&lt;/p&gt;
&lt;p&gt;Perhaps the biggest challenge facing new users of R is what to do with data once you have retrieved it. This can result in many hours of frustration staring at a list or object with the data you need without the tools to access it and transform it into the format you need. In this article we have focused on using the &lt;code&gt;plyr&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;stringr&lt;/code&gt; suite of packages to turn &lt;code&gt;rplos&lt;/code&gt; data into something you can use. These packages are rightly very popular for everyday work in R and becoming more familiar with them will reap rewards in learning R for practical work. At the close of the article we used the &lt;code&gt;tm&lt;/code&gt; (text mining) package to save the full text of articles. This is only a very small part of this package and &lt;code&gt;rplos&lt;/code&gt; provides some useful examples to begin text mining using &lt;code&gt;tm&lt;/code&gt; (see the &lt;code&gt;plos_fulltext()&lt;/code&gt; examples). R now has a rich range of text mining packages and we will address this in a future article.&lt;/p&gt;
&lt;p&gt;In the meantime, if you would like to learn more about R try the resources below. If you would like to learn R inside R then try the very useful Swirl package (details below).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cookbook-r.com/&#34;&gt;Winston Chang’s R Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/training/online-learning/&#34;&gt;RStudio Online Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.r-bloggers.com/&#34;&gt;r-bloggers.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datacamp.com/&#34;&gt;Datacamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swirl (developed by the &lt;a href=&#34;https://www.coursera.org/course/rprog&#34;&gt;free Coursea R Programming course&lt;/a&gt; team at John Hopkins University. If you would like to get started with Swirl run the code chunk below to install the package and load the library.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;swirl&amp;quot;)
library(swirl)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Accessing Patent Data with the Lens</title>
      <link>/lens/</link>
      <pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/lens/</guid>
      <description>&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this article we provide a brief introduction to &lt;a href=&#34;https://www.lens.org/lens/&#34;&gt;The Lens&lt;/a&gt; patent database as a free source of data for patent analytics.&lt;/p&gt;
&lt;p&gt;The Lens is a patent database based in Australia that describes itself as “an open global cyberinfrastructure to make the innovation system more efficient and fair, more transparent and inclusive.” The main way it seeks to do this is by providing access to patent information with a particular focus on sequence information as well as analysis of issues such as DNA related patent activity. An important feature of The Lens for those working on biotechnology related subjects is &lt;a href=&#34;https://www.lens.org/lens/bio&#34;&gt;PatSeq&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is now a chapter in the &lt;a href=&#34;https://wipo-analytics.github.io/&#34;&gt;WIPO Manual on Open Source Patent Analytics&lt;/a&gt;. You can read the chapter in electronic book format &lt;a href=&#34;https://wipo-analytics.github.io/the-lens-1.html&#34;&gt;here&lt;/a&gt; and find all the materials including presentations at the &lt;a href=&#34;https://github.com/wipo-analytics&#34;&gt;WIPO Analytics Github homepage&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;To get the most out of the Lens the first step is to sign up for an account from the front page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig1_front.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is possible to begin searching directly from the front page. However, selecting the small button next to the search box takes you to the search controls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig2_controls.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As we can see we can use boolean queries, for searching a range of fields including the full text, title, abstract or claims (a major plus). We can also select one or multiple jurisdictions. In addition the results can be refined to patent applications or grants, and there are options for full text or one doc per family (which greatly reduces the number of results).&lt;/p&gt;
&lt;p&gt;We used our standard query “pizza”, all jurisdictions, and one document per family. We turned stemming off.&lt;/p&gt;
&lt;p&gt;Our search for pizza returned 13,714 families from a total of 29,617 publications containing the term in the full text. This approach assists with refining searches by reducing duplication.&lt;/p&gt;
&lt;p&gt;The Lens allows users to create collections of up to 10,000 results from a search. To create a collection use the &lt;code&gt;Create Collection&lt;/code&gt; button and name the collection. How you add records to a collection is not obvious and involves 2 steps.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Check the arrow next to Document as in the image below. When the mouse hovers over the arrow a menu will pop up. Choose &lt;code&gt;Top 10k Results&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the box displaying the name of the collection above the results press the + arrow to add the 10,000 documents to the Collection.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig3_addtocollection.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once you understand this process it is easy to add documents to collections. One very nice feature of the Lens is that when a collection has been created we can share it with others using the &lt;code&gt;Share&lt;/code&gt; button. Users have the option of maintaining a private collection or publicly sharing. The URL for the collection we just generated is &lt;a href=&#34;https://www.lens.org/lens/collection/9606&#34; class=&#34;uri&#34;&gt;https://www.lens.org/lens/collection/9606&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We could imagine that for more restricted searches, and taking confidentiality issues into account, this could be a useful way of sharing patent data with colleagues. One useful addition would be the ability to share with groups based on email addresses or something similar (although that may be possible by choosing a private link and sharing it).&lt;/p&gt;
&lt;p&gt;Using the small icons above &lt;code&gt;Document&lt;/code&gt; on the left we can save our query for later use, limit the data to simple families or expand to publications, and download the data.&lt;/p&gt;
&lt;p&gt;There are two main options for downloading data. The first is to download 1000 records by selecting the export button above &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we select the export button we will be presented with a choice on the number of records to export and whether to export in JSON (for programmatic use), RIS for bibliographic software or .csv for use in tools such as Excel or other programmes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig4_exportoptions.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The outputs of the export are clean and clear about what they represent when compared with some patent databases. A &lt;code&gt;url&lt;/code&gt; link to the relevant file on the Lens is also provided which can assist in reviewing documents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig5_export.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The JSON output (in the lower right of the image above) is also nice and clean.&lt;/p&gt;
&lt;p&gt;The second route to exporting data is to download up to 10,000 results using the collections. When we select the &lt;code&gt;Work Area&lt;/code&gt; icon at the top of the screen and select &lt;code&gt;Collections&lt;/code&gt; we will see a new screen with a range of icons next to an individual collection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig5a_export_collection.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we select the download icon we can now download the 10,000 records in the collection in either .csv, ris or JSON formats. This is very easy to use once you understand how to navigate the interface.&lt;/p&gt;
&lt;p&gt;We also have an option to upload documents into a collection using the upload button and then enter comma separated identifiers. However, at the time of writing we were not able to make this very useful function work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-features&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additional features&lt;/h2&gt;
&lt;p&gt;In addition to these features, it is also important to note that data exports include a cited count that counts the number of patent/non-patent records &lt;code&gt;cited&lt;/code&gt; by the applicant.&lt;/p&gt;
&lt;p&gt;The online data also shows the citing documents. For example &lt;a href=&#34;https://www.lens.org/lens/patent/US_3982033_A/citations#c/out&#34;&gt;US 3982033 A Process for Coating Pizza Shells With Sauce&lt;/a&gt; cites three patent documents but has &lt;a href=&#34;https://www.lens.org/lens/patent/US_3982033_A/citations#c/in&#34;&gt;11 forward citations by later applicants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While the citing documents are not included with the downloaded data it is possible to visit a record of interest online and then create a new set with the citing documents. Where a number of documents of interest have been identified this could be the basis for creating a new collection of cited or citing literature on a topic of interest linked to a core query.&lt;/p&gt;
&lt;p&gt;As such, one possible workflow using the Lens would involve initial exploratory queries and refinement, downloading the results of a refined query for closer inspection and then selecting documents of interest to explore the backward (cited) and forward (citing) citations and generate a new dataset.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualisation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualisation&lt;/h2&gt;
&lt;p&gt;The Lens makes good use of online visualisation options using &lt;a href=&#34;http://www.highcharts.com&#34;&gt;Highcharts&lt;/a&gt; and HTML5. To access the visualisations choose the small icon on the right above the &lt;code&gt;Sort by&lt;/code&gt; pull down menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig6_visual.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We now see a set of charts for our results. Using the up icon in the top right of each image we can get an expanded view and work with the charts. The Lens uses the Highcharts Javascript library and a very nice feature of this approach is that it the visuals are interactive and can be used to refine search results. In the image below we have opened the applicants image. As an aside, note that each image can be copied as an iframe to embed in your own web page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig7_applicants.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This suggests that Google is the top user of the word pizza in the patent system with &lt;a href=&#34;https://www.lens.org/lens/collection/9608&#34;&gt;880 documents in 353 families&lt;/a&gt;. We can then select the top result and the charts will regenerate focusing on our selection (in this case Google). To view the results we need to select the results button (the first on the right above the charts) to see the following.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig8_google.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What is very useful about is that it is easy to create a &lt;a href=&#34;https://www.lens.org/lens/collection/9608&#34;&gt;new collection&lt;/a&gt; for an applicant of interest, to download the results or select areas of a portfolio based on a jurisdiction or technology area or to explore highly cited patents. In short, we can easily dig into the data.&lt;/p&gt;
&lt;p&gt;Other interesting features of the chart area are references to authors, DOIs, and PubMed Ids for exploration of data extracted from the documents. This reflects the interest at the Lens in researching the relationship between basic scientific research and innovation. Accessing the literature related information requires opening a chart (for example authors) and selecting the top result and the moving into the results view. We then select one of the results such as &lt;a href=&#34;https://www.lens.org/lens/patent/US_8200847_B2/citations#c/publications&#34;&gt;Voice Actions On Computing Devices&lt;/a&gt; and the Citations tab. This reveals a publication from a workshop on Wireless Geographical Information Systems from 2003 as we can see below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig9_crossref.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;An impressive feature of this approach is the effort that has been made to link the citation data to the publication using &lt;a href=&#34;http://www.crossref.org&#34;&gt;crossref&lt;/a&gt;. According to the documentation around 15 million non-patent literature citations have been linked so far. Note that one additional feature of the Lens download data is that it includes a non-patent literature citation field. For example, downloading the &lt;a href=&#34;https://www.lens.org/lens/collection/9608&#34;&gt;google pizza portfolio&lt;/a&gt; and a search for the citation above will reveal the citation but without the added value of the DOI. As such, the download provided the raw NPL data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;working-with-texts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Working with texts&lt;/h2&gt;
&lt;p&gt;In common with other free databases, the Lens is not designed to allow downloads of multiple full texts. However, you can access the full text of documents, including .pdf files, and you can make notes that will be stored with a collection in your account. The image below provides an example of our ongoing efforts to understand why Google is so dominant in the results of searches for pizza in patent documents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig10_notes.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;patseq&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;PatSeq&lt;/h2&gt;
&lt;p&gt;One important focus of the development of the Lens has been DNA sequence data including an &lt;a href=&#34;https://www.lens.org/about/&#34;&gt;ongoing series of articles&lt;/a&gt; on the interpretation and significance of sequence data in patent activity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig11_patseq.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Patseq includes a number of tools.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;PatSeq data permits access to patent documents disclosing sequences available for bulk download from a growing number of countries. This is a very useful site for obtaining sequence data. Note that you will need to request access to download sequence data in your account area.&lt;/li&gt;
&lt;li&gt;Species finder and keyword search focuses on searching documents that contain a sequence for a species name or key term.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig12_patseq_species.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A series of patent portfolios have been generated for some major plant and animal species, e.g. rice, maize, humans, chickens etc. That can be downloaded as collections.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The PatSeq Explorer allows the exploration of sequence data for four genomes (at present), notably the human and mouse genome for animals and the soybean, maize and rice genome for plants.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig13_patseq_explorer.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is an area where researchers with &lt;a href=&#34;http://www.cambia.org/daisy/cambia/home.html&#34;&gt;Cambia&lt;/a&gt;, the non-profit organisation behind the Lens, have invested considerable effort and it is well worth reading the research articles listed on the Cambia and Lens websites on this topic. PatSeq Analyzer is closely related to the Explorer and presently provides details on the genomes mentioned above with a detailed summary of sequences by document including the region, sequence, transcript, single nucleotide polymorphisms (SNPs) and grants with sequences in the patent claims.&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;PatSeq Finder&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The PatSeq Finder allows a user to enter a DNA or amino acid sequence into the search box and find applications and grants with identical or similar sequences. We selected a sequence at random from the WIPO Patentscope sequence listings browser &lt;a href=&#34;http://www.wipo.int/patentscope/search/en/detail.jsf?LANGUAGE=ENG&amp;amp;KEY=16/026850&amp;amp;ELEMENT_SET=F&#34;&gt;W016/026850&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig14_seq_explorer.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After processing we will see a list of results that can be downloaded in a variety of formats. The results indicate that our random sequence does not appear in the claims of a granted patent or a patent application but does appear in a number of applications and grants. Further details are provided by hovering over the individual entries and additional controls are available for similarity and other scores to refine the results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/lens/fig15_seq_results.png&#34; width=&#34;600px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As far as we could tell, while the data can be downloaded, it is not presently possible to generate a collection of documents from the results of the PatSeq Finder.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;The Lens is a very useful patent database that, when you have worked out the meaning of icons, is easy to use. The ease with which collections can be shared and up to 10,000 records downloaded is a real plus for the Lens. In addition, the use of HTML5 and Highcharts makes this a highly interactive experience. The ability to use charts to drill down into the data is very welcome. The link to the &lt;code&gt;crossref&lt;/code&gt; service for non-patent literature is very useful but it would be good to see this data included in some way as a field in the data downloads.&lt;/p&gt;
&lt;p&gt;With the addition of data downloads (in 2015) the Lens is becoming a very useful platform for searching, refining, visualizing and downloading patent data. What would perhaps be useful would be a set of demonstration walkthroughs or use cases that explain the way in which the Lens can be used in common work flows. For example, developing and refining a search, testing results, then retrieving backward and forward citations for refinement and visualization are quite common tasks in patent landscape analysis. Use cases would help users make the most of what the Lens has to offer.&lt;/p&gt;
&lt;p&gt;The Lens also stands out for its distinctive long term work on sequence data in patents and this will be of particular interest to researchers working on biotech particularly in exploring the analytical tools.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graphing Patent Data with ggplot2 part2</title>
      <link>/graphing-patent-data-with-ggplot2-part2/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/graphing-patent-data-with-ggplot2-part2/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-grammar-of-graphics&#34;&gt;The Grammar of Graphics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-pie-chart-aaaargh&#34;&gt;Creating a Pie Chart (aaaargh)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is Part 2 of an article introducing R for patent analytics that focuses on visualising patent data in R using the ggplot2 package.&lt;/p&gt;
&lt;p&gt;In Part 1 we introduced the basics of wrangling patent data in R using the &lt;code&gt;dplyr&lt;/code&gt; package to select and add data. In this article we will go into more detail on these functions. We then focused on using &lt;code&gt;qplot&lt;/code&gt; from the &lt;code&gt;ggplot2&lt;/code&gt; package to illustrate the ease with which graphics can be created and edited in R. In this article we will focus on &lt;code&gt;ggplot&lt;/code&gt; and the Grammar of Graphics. As in Part 1 we assume that you are new to R and make no assumptions about familiarity with R. However, you must have &lt;a href=&#34;https://www.rstudio.com/products/rstudio/#Desktop&#34;&gt;RStudio&lt;/a&gt; installed on your computer (see Part 1) for instructions. We will also move a little faster on some of the initial steps than in Part 1.&lt;/p&gt;
&lt;p&gt;The majority of examples in this article are based on the list of recipes for generating graphics using ggplot2 in &lt;code&gt;Winston Chang&#39;s R Graphics Cookbook&lt;/code&gt; and the accompanying &lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a work in progress and will be updated as solutions are identified to some of the issues encountered in graphing using ggplot2. Please feel welcome to add comments to this post, particularly where you identify a solution to issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-grammar-of-graphics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Grammar of Graphics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; is an implementation of Leland Wilkinson’s Grammar of Graphics by Hadley Wickham at RStudio as described in &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;this article&lt;/a&gt; and &lt;a href=&#34;http://www.amazon.co.uk/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403&#34;&gt;ggplot2 book&lt;/a&gt;. Hadley Wickham’s grammar differs from the original by focusing on layered approach to building statistical graphics.&lt;/p&gt;
&lt;p&gt;The grammar of graphics is an approach to building graphics based on the idea that any statistical graphic can be built from the following components:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A data set&lt;/li&gt;
&lt;li&gt;A set of aesthetic or &lt;code&gt;aes&lt;/code&gt; attributes such as size, shape &amp;amp; colour&lt;/li&gt;
&lt;li&gt;Statistical transformations&lt;/li&gt;
&lt;li&gt;A geometric object &lt;code&gt;geom&lt;/code&gt; or set of objects (&lt;code&gt;geoms&lt;/code&gt;) for the type of plot e.g. line, bar or map&lt;/li&gt;
&lt;li&gt;scales for the above&lt;/li&gt;
&lt;li&gt;A coordinate system (e.g. a grid or map)&lt;/li&gt;
&lt;li&gt;Faceting (trellising)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In practice, this breaks down into three main elements:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;A base object. The first two of these components combine into a base object consisting of the data set and aesthetic mappings or &lt;code&gt;aes&lt;/code&gt; for the particular data we want to see. That includes the axes and any fill or line colours.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;geoms&lt;/code&gt; or geometric objects. We then add one or more &lt;code&gt;geom&lt;/code&gt; to specify the form in which we want to see the data we have selected in 1. This tends to also involve a statistical transformation (such as placing data into bins for a bar chart). Defaults deal with some of this. However, a statistical transformation or &lt;code&gt;stat&lt;/code&gt; can also be specified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A coordinate system. We normally don’t need to think about this. The default is a standard Cartesian grid. However, this can be changed to a fixed grid or a polar grid.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An easy way to think about it is that&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The base object defines what we want to see.&lt;/li&gt;
&lt;li&gt;The geoms define the form we want to see it in.&lt;/li&gt;
&lt;li&gt;The coordinate system defines the framework for the visualisation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with any grammar it can take a while to get used to its terms and peculiarities. The good news is that there are plenty of free resources out there for this very popular package.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Winston Chang’s &lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;R Graphics Cookbook website&lt;/a&gt; is a very valuable practical guide to most things you will want to do with ggplot2. The full R Graphics Cookbook goes into a lot more detail and is an invaluable reference if you will be doing a lot of work with graphics in R. Those with budgets may also want to invest in Hadley Wickham’s book ggplot2 published by Springer.&lt;/li&gt;
&lt;li&gt;RStudio have developed a very helpful cheat sheet that you can download &lt;a href=&#34;http://www.rstudio.com/wp-content/uploads/2015/05/ggplot2-cheatsheet.pdf&#34;&gt;here&lt;/a&gt; or view &lt;a href=&#34;http://www.rstudio.com/resources/cheatsheets/&#34;&gt;here&lt;/a&gt;. We suggest downloading and printing the cheat sheet when using ggplot2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##Getting Started&lt;/p&gt;
&lt;p&gt;If you don’t have these packages already then install each of them below by pressing command and Enter at the end of each line. As an alternative select &lt;strong&gt;&lt;em&gt;Packages &amp;gt; Install&lt;/em&gt;&lt;/strong&gt; in the pane displaying a tab called Packages. Then enter the names of the packages one at a time without the quotation marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;readr&amp;quot;)
install.packages(&amp;quot;dplyr&amp;quot;)
install.packages(&amp;quot;ggplot2&amp;quot;)
install.packages(&amp;quot;ggthemes&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then make sure the packages have loaded to make them available. Press command and enter at the end of each line below (or, if you are feeling brave, select them all and then click the icon marked Run).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(dplyr)
library(ggplot2)
library(ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are now good to go.&lt;/p&gt;
&lt;p&gt;###Loading the Data&lt;/p&gt;
&lt;p&gt;We will load the pizza dataset directly from the &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/tree/master/2_datasets/pizza_medium_clean&#34;&gt;Github datasets repository&lt;/a&gt; using &lt;code&gt;read_csv&lt;/code&gt; from the &lt;code&gt;readr&lt;/code&gt; package. If downloading from the repository note that it is the View Raw file that you want. If loading from a downloaded file include the full file path inside quotation marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- read_csv(&amp;quot;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/pizza_medium_clean/pizza.csv?raw=true&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As in Part 1 we will use &lt;code&gt;dplyr&lt;/code&gt; to create a count field using the publication number, rename some of the fields and then select fields we want to count.&lt;/p&gt;
&lt;p&gt;###Reviewing and Preparing the Dataset with &lt;code&gt;dplyr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inspecting our data is a first step. Type &lt;code&gt;View(pizza)&lt;/code&gt; in the console to see the table and &lt;code&gt;str(pizza)&lt;/code&gt; to see its structure.&lt;/p&gt;
&lt;p&gt;In practice we have a number of issues that we will want to fix.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;We have a blank row at the bottom of the dataset that we will want to remove because it will produce a red error message. It does not have to be removed but this will help in interpreting any error messages.&lt;/li&gt;
&lt;li&gt;Patent data commonly doesn’t contain numeric fields. Data fields are mainly characters or dates with the exception at times of cited and citing counts. We will want to add a count column.&lt;/li&gt;
&lt;li&gt;We will not be working with all 31 columns in &lt;code&gt;pizza&lt;/code&gt; and so we will want to select just those we will be working with.&lt;/li&gt;
&lt;li&gt;To save typing we may want to rename some of the columns (and we can revert the names later if need be).&lt;/li&gt;
&lt;li&gt;Some data may be missing for particular countries. For example, for Canada some of the entries are missing a year field. That may be fine for raw totals but not for charting by year.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To handle these tasks we can use the very useful functions in &lt;code&gt;dplyr&lt;/code&gt;. For other tasks we might also want to use &lt;code&gt;tidyr&lt;/code&gt; or &lt;code&gt;plyr&lt;/code&gt; as sister packages to &lt;code&gt;dplyr&lt;/code&gt;. &lt;code&gt;dplyr&#39;s&lt;/code&gt; main functions are described &lt;a href=&#34;http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html&#34;&gt;here&lt;/a&gt;. These are the functions we think you will find most useful with patent data.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;filter() and slice()&lt;/li&gt;
&lt;li&gt;arrange()&lt;/li&gt;
&lt;li&gt;select()&lt;/li&gt;
&lt;li&gt;distinct()&lt;/li&gt;
&lt;li&gt;mutate()&lt;/li&gt;
&lt;li&gt;summarise()&lt;/li&gt;
&lt;li&gt;group_by()&lt;/li&gt;
&lt;li&gt;count()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; functions are important because they will help you to easily extract elements of the data for graphing. They can also be very useful for basic patent analysis workflows where tools such as Excel or Open Office will struggle. For more on wrangling data using &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; see the &lt;a href=&#34;http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;RStudio Data Wrangling Cheatsheet&lt;/a&gt;. &lt;code&gt;dplyr&lt;/code&gt; also includes pipes, such as %&amp;gt;% (meaning then) that can be used to string together chunks of code in an efficient and easy to use way. We will illustrate the use of pipes in this article but will not use pipes throughout as we are adopting a simple step by step approach. As you become more familiar and comfortable with R we suggest that you increasingly start to work with pipes to make your life easier. We caution against leaping into pipes when learning R. While they are very easy to use and efficient, they are still relatively new. That can make reading ‘normal’ R code difficult until you are more familiar with it.&lt;/p&gt;
&lt;p&gt;We will now use two &lt;code&gt;dplyr&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;First we will add a column with a numeric value for each publication number in the dataset using &lt;code&gt;mutate&lt;/code&gt;. &lt;code&gt;mutate&lt;/code&gt; takes an argument applied to the values of one or more columns and adds a new column based on that argument. Here, as in Part 1 we simply add a new column called &lt;code&gt;n&lt;/code&gt; that uses &lt;code&gt;sum()&lt;/code&gt; to award each publication number the value of 1. We now have a numeric count column &lt;code&gt;n&lt;/code&gt; from our character vectors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- mutate(pizza, n = sum(publication_number = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we will rename the columns to make life easier using &lt;code&gt;rename()&lt;/code&gt;. The code has been indented to make it easier to read. To run this code, select the code and press Run in R or press command and enter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizza &amp;lt;- rename(pizza, 
                pubcountry = publication_country_name,
                pubcode = publication_country_code, 
                pubyear = publication_year
                )
pizza&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9,996 x 32
##    applicants_cleaned    applicants_clean… applicants_orga… applicants_original
##    &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;              
##  1 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
##  2 Ventimeglia Jamie Jo… People            &amp;lt;NA&amp;gt;             Ventimeglia Jamie …
##  3 Cordova Robert; Mart… People            &amp;lt;NA&amp;gt;             Cordova Robert;Mar…
##  4 Lazarillo De Tormes … Corporate         Lazarillo De To… LAZARILLO DE TORME…
##  5 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
##  6 Depoortere, Thomas    People            &amp;lt;NA&amp;gt;             DEPOORTERE, Thomas 
##  7 Frisco Findus Ag      Corporate         Frisco Findus Ag FRISCO-FINDUS AG   
##  8 Bicycle Tools Incorp… Corporate         Bicycle Tools I… Bicycle Tools Inco…
##  9 Castiglioni, Carlo    People            &amp;lt;NA&amp;gt;             CASTIGLIONI, CARLO 
## 10 &amp;lt;NA&amp;gt;                  People            &amp;lt;NA&amp;gt;             &amp;lt;NA&amp;gt;               
## # ... with 9,986 more rows, and 28 more variables: inventors_cleaned &amp;lt;chr&amp;gt;,
## #   inventors_original &amp;lt;chr&amp;gt;, ipc_class &amp;lt;chr&amp;gt;, ipc_codes &amp;lt;chr&amp;gt;,
## #   ipc_names &amp;lt;chr&amp;gt;, ipc_original &amp;lt;chr&amp;gt;, ipc_subclass_codes &amp;lt;chr&amp;gt;,
## #   ipc_subclass_detail &amp;lt;chr&amp;gt;, ipc_subclass_names &amp;lt;chr&amp;gt;,
## #   priority_country_code &amp;lt;chr&amp;gt;, priority_country_code_names &amp;lt;chr&amp;gt;,
## #   priority_data_original &amp;lt;chr&amp;gt;, priority_date &amp;lt;chr&amp;gt;, pubcode &amp;lt;chr&amp;gt;,
## #   pubcountry &amp;lt;chr&amp;gt;, publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;, n &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now want to create 4 data tables:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;p1 as a reference set with four columns&lt;/li&gt;
&lt;li&gt;pc = publication country totals&lt;/li&gt;
&lt;li&gt;pt = publication totals by year&lt;/li&gt;
&lt;li&gt;pcy = publication country by year&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will create a new working table called &lt;code&gt;p1&lt;/code&gt; that contains just the data we want to work with using &lt;code&gt;dplyr&#39;s&lt;/code&gt; &lt;code&gt;select()&lt;/code&gt;. &lt;code&gt;select()&lt;/code&gt; will only include columns that we name and will drop the others from the new table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- select(pizza, pubcountry, pubcode, pubyear, n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;p1 will be our reference set and contains 4 columns, use &lt;code&gt;View(p1)&lt;/code&gt; to see it.&lt;/p&gt;
&lt;p&gt;If we were to inspect this data we would see that we have some sparse results dating back to the 1940s. In the last article we controlled for this in graphs using &lt;code&gt;xlim&lt;/code&gt; to limit the x axis to specific years. Here we will remove that data.&lt;/p&gt;
&lt;p&gt;To remove the sparse years we need to use &lt;code&gt;dplyrs&lt;/code&gt; filter function. &lt;code&gt;filter&lt;/code&gt; is basically the equivalent of &lt;code&gt;select&lt;/code&gt; for rows. Rather than naming each of the years that we want to remove we will us an operator for values equal or greater than 1970 &lt;code&gt;&amp;gt;=&lt;/code&gt;. We will also want to pull back from the data cliff in more recent years as discussed in Part 1. To do that we will add a second argument to filter for years that are equal to or below 2012 &lt;code&gt;&amp;lt;=&lt;/code&gt;. Note here that &lt;code&gt;dplyr&lt;/code&gt; functions can take more than one argument at a time. So we do not need to repeat the function for each filter operation. For a list of other operators see this quick &lt;a href=&#34;http://www.statmethods.net/management/operators.html&#34;&gt;table&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p1 &amp;lt;- filter(p1, pubyear &amp;gt;= 1970, pubyear &amp;lt;= 2012)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now go ahead and create a publication total table &lt;code&gt;pt&lt;/code&gt; using &lt;code&gt;count()&lt;/code&gt; in &lt;code&gt;dplyr&lt;/code&gt;. &lt;code&gt;count&lt;/code&gt; is actually a wrapper for two other &lt;code&gt;dplyr&lt;/code&gt; functions, &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;summarise&lt;/code&gt;. We do not need to use those because &lt;code&gt;count&lt;/code&gt; does that for us. Note here that &lt;code&gt;wt&lt;/code&gt; for &lt;code&gt;weight&lt;/code&gt; will sum the value of n for us (see &lt;code&gt;?count&lt;/code&gt; for details).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt &amp;lt;- count(p1, pubyear, wt = n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we inspect &lt;code&gt;pt&lt;/code&gt; we will see that we now have totals for each year. We might want to add a rank or percentage column to that for later use. There are a variety of ways of going about this. However, staying with &lt;code&gt;dplyr&lt;/code&gt;, behind the scenes &lt;code&gt;count&lt;/code&gt; function has grouped the data for us (see &lt;code&gt;?count&lt;/code&gt;). To understand this use &lt;code&gt;str(pt)&lt;/code&gt; in the console to view the data. This will reveal that we have a grouped data frame with attributes. To go further we will ungroup the table first. [Note that ungrouping is not normally necessary but is used here because of an unexpected problem calculating a percentage on a grouped table using &lt;code&gt;sum(n)&lt;/code&gt; in &lt;code&gt;dplyr&lt;/code&gt;].&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt &amp;lt;- ungroup(pt)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with filter we can pass multiple arguments to &lt;code&gt;mutate&lt;/code&gt;. To demonstrate this we will add a column with a percentage score, then use &lt;code&gt;ntile&lt;/code&gt; to split the data into 3 groups and then calculate the percent rank using &lt;code&gt;percent_rank(nn)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt &amp;lt;- mutate(pt, group = ntile(nn, 3),
             percent = nn / sum(nn) * 100, 
             rank = percent_rank(nn))
pt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 43 x 5
##    pubyear    nn group percent   rank
##      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1    1970    2.     1  0.0223 0.    
##  2    1971    6.     1  0.0668 0.0238
##  3    1972   14.     1  0.156  0.119 
##  4    1973    9.     1  0.100  0.0714
##  5    1974    7.     1  0.0780 0.0476
##  6    1975   11.     1  0.123  0.0952
##  7    1976   27.     1  0.301  0.190 
##  8    1977   24.     1  0.267  0.143 
##  9    1978   30.     1  0.334  0.214 
## 10    1979   26.     1  0.290  0.167 
## # ... with 33 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This neatly demonstrates how easy it is to use mutate to add columns based on different calculations.&lt;/p&gt;
&lt;p&gt;The reason that we are focusing on adding counts to the publication total table is that when graphing later we can use these columns to split and order the graphics. This is particularly helpful because with patent data we normally have widely varying scores that produce crunched graphs. The availability of either buckets or percentages is very helpful for creating ranked bar charts or plots and faceting (trellis graphs). As we often want to see what happens with a graph before deciding how to proceed or drop data it is useful to have a ranking system. We can then filter the data using function at a later stage.&lt;/p&gt;
&lt;p&gt;###Creating a Publication Country Table&lt;/p&gt;
&lt;p&gt;We will follow the same procedure for the publication country table. However, in this case we will illustrate the use of pipes to simplify the process. We will use the most common pipe &lt;code&gt;%&amp;gt;%&lt;/code&gt;, which means “then”. This basically says, “this” then “that”. Select and run the code.&lt;/p&gt;
&lt;!--- could probably use n() here. Note that if attempt to use n then it thinks it is the function.---&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pc &amp;lt;- count(p1, pubcountry, pubcode, wt = n) %&amp;gt;%
    ungroup() %&amp;gt;%
    mutate(group = ntile(nn, 3),
           percent = nn / sum(nn) * 100,
           rank = percent_rank(nn)) %&amp;gt;%
    arrange(desc(nn)) 
print(pc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 6
##    pubcountry                   pubcode    nn group percent   rank
##    &amp;lt;chr&amp;gt;                        &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 United States of America     US      4267.     3 47.5    1.000 
##  2 Patent Co-operation Treaty   WO      1390.     3 15.5    0.933 
##  3 Canada                       CA      1316.     3 14.7    0.867 
##  4 European Patent Office       EP      1184.     3 13.2    0.800 
##  5 Korea, Republic of           KR       308.     3  3.43   0.733 
##  6 Japan                        JP       205.     2  2.28   0.667 
##  7 Germany                      DE        89.     2  0.991  0.600 
##  8 South Africa                 ZA        72.     2  0.802  0.533 
##  9 China                        CN        60.     2  0.668  0.467 
## 10 Israel                       IL        35.     2  0.390  0.400 
## 11 Mexico                       MX        23.     1  0.256  0.333 
## 12 Portugal                     PT        10.     1  0.111  0.200 
## 13 Russian Federation           RU        10.     1  0.111  0.200 
## 14 Eurasian Patent Organization EA         4.     1  0.0446 0.133 
## 15 Spain                        ES         3.     1  0.0334 0.0667
## 16 Singapore                    SG         2.     1  0.0223 0.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we will not focus on using pipes in this article, they simplify the writing of code in R and make it clearer. The above code is identical to the code below. However, note that in the code below we have to keep overwriting each time we add an element. Also note that in the code above we only mention our reference table, p1, once at the beginning whereas in the version without pipes or chaining, we have to mention it as the first argument of each function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pc &amp;lt;- count(p1, pubcountry, pubcode, wt = n)
   pc &amp;lt;- ungroup(pc)
   pc &amp;lt;- mutate(pc, group = ntile(nn, 3), 
                percent = nn / sum(nn) * 100, 
                rank = percent_rank(nn))
   pc &amp;lt;- arrange(pc, desc(nn))
   pc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 6
##    pubcountry                   pubcode    nn group percent   rank
##    &amp;lt;chr&amp;gt;                        &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 United States of America     US      4267.     3 47.5    1.000 
##  2 Patent Co-operation Treaty   WO      1390.     3 15.5    0.933 
##  3 Canada                       CA      1316.     3 14.7    0.867 
##  4 European Patent Office       EP      1184.     3 13.2    0.800 
##  5 Korea, Republic of           KR       308.     3  3.43   0.733 
##  6 Japan                        JP       205.     2  2.28   0.667 
##  7 Germany                      DE        89.     2  0.991  0.600 
##  8 South Africa                 ZA        72.     2  0.802  0.533 
##  9 China                        CN        60.     2  0.668  0.467 
## 10 Israel                       IL        35.     2  0.390  0.400 
## 11 Mexico                       MX        23.     1  0.256  0.333 
## 12 Portugal                     PT        10.     1  0.111  0.200 
## 13 Russian Federation           RU        10.     1  0.111  0.200 
## 14 Eurasian Patent Organization EA         4.     1  0.0446 0.133 
## 15 Spain                        ES         3.     1  0.0334 0.0667
## 16 Singapore                    SG         2.     1  0.0223 0.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we have added the function &lt;code&gt;arrange&lt;/code&gt; and given it the value of &lt;code&gt;n&lt;/code&gt;. Arrange will sort a table on a column in ascending order by default and descending order using &lt;code&gt;desc&lt;/code&gt; inside the function as in this case. Use &lt;code&gt;View(pc)&lt;/code&gt; to take a look. To reverse the order try the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pc &amp;lt;- arrange(pc, nn)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will arrange the &lt;code&gt;pc&lt;/code&gt; data by the value of &lt;code&gt;n&lt;/code&gt; in the default ascending order.&lt;/p&gt;
&lt;p&gt;###Creating a Publication Country by Year Table&lt;/p&gt;
&lt;p&gt;For the publication country by year we do the same but retain all the columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pcy &amp;lt;- count(p1, pubcountry, pubcode, pubyear, wt = n) %&amp;gt;% ungroup()
pcy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 296 x 4
##    pubcountry pubcode pubyear    nn
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Canada     CA         1971    2.
##  2 Canada     CA         1972    4.
##  3 Canada     CA         1974    1.
##  4 Canada     CA         1975    1.
##  5 Canada     CA         1976    1.
##  6 Canada     CA         1977    1.
##  7 Canada     CA         1978    4.
##  8 Canada     CA         1979    8.
##  9 Canada     CA         1980   11.
## 10 Canada     CA         1981   14.
## # ... with 286 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a table that sums up the values by country and year. However, we are now presented with a conundrum. We have lost our groups and ranks. We cannot simply repeat what we did before (e.g. ntile) because the data is now split by year and it will not assign correctly. In addition, using other functions is made difficult by the fact our columns are character columns.&lt;/p&gt;
&lt;p&gt;One solution to this conundrum is to join the &lt;code&gt;pcy&lt;/code&gt; and the &lt;code&gt;pc&lt;/code&gt; tables together using the &lt;code&gt;join&lt;/code&gt; functions in &lt;code&gt;dplyr&lt;/code&gt;. We will start by creating a temporary table that we will call &lt;code&gt;df&lt;/code&gt; and use &lt;code&gt;select&lt;/code&gt; to drop the columns we don’t want, then we will create a new &lt;code&gt;pcy&lt;/code&gt; using &lt;code&gt;left_join&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; (see &lt;code&gt;join&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- select(pc, pubcode, group)
  pcy &amp;lt;- left_join(pcy, df)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a publication country by year table where groups are assigned as in the previous table. Note that for a join to be made the table must possess one or more shared columns that serve as a key for the join (in this case the shared key is &lt;code&gt;pubcode&lt;/code&gt;). It can be a very good idea to retain a field to use as a shared key where you expect to be joining data at a later stage. Also note that this is one solution, it is not necessarily the best or most efficient solution.&lt;/p&gt;
&lt;p&gt;We could also break our publication countries into separate tables using to select only those rows in a group we want. Here we create three tables based on the groups assigned to them where they match the group number using ==.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;main &amp;lt;- filter(pcy, group == 3)
other &amp;lt;- filter(pcy, group == 2)
low &amp;lt;- filter(pcy, group == 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In practice, we do not always need to create separate tables, however, as we can now see the combination of &lt;code&gt;select&lt;/code&gt; for columns and &lt;code&gt;filter&lt;/code&gt; for rows in makes it easy to create subsets of our data. We have also seen that functions such as &lt;code&gt;left_join&lt;/code&gt; can come in useful where we cannot easily repeat the creation of a variable in a table divided on different variables. While there are almost always other ways of doing things in R, &lt;code&gt;dplyr&lt;/code&gt; and its sister packages &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;plyr&lt;/code&gt; aim to make everyday data preparation and analysis tasks easier.&lt;/p&gt;
&lt;p&gt;We now have four data tables and in the following sections we will work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pt = the publication total data&lt;/li&gt;
&lt;li&gt;pc = the publication country data&lt;/li&gt;
&lt;li&gt;pcy = the publication country by year table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be working through graph creation in a step wise direction so that you can see what is happening at each step. In the process we will create multiple objects. This is not the fastest way to proceed. However, it is transparent in mapping out the steps and the consequences of small chunks of code. Faster ways include using pipes as we have seen above. We have initially chosen the slower route to explain what is going on. However, you may want to experiment with pipes on some of the code at the end of this article.&lt;/p&gt;
&lt;p&gt;This section has usefully reminded us that data preparation is a fundamental step in any patent analysis task including visualisation. Choices made at this stage will determine the ease or difficulty with which we can perform particular visualisation tasks later. However, there is nothing to stop us returning to our data wrangling functions at a later stage. For example, we may well discover that the three bins we have created using &lt;code&gt;ntile&lt;/code&gt; should be 4 or we might want to use a calculation to determine the number of bins. This need for adjustment is a normal part of data analysis. For more information on data wrangling in R using &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; see the &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;RStudio Data Wrangling Cheatsheet&lt;/a&gt; and Garrett Grolemund’s excellent &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;Data Wrangling with R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;##Getting Going with ggplot in ggplot2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot()&lt;/code&gt; basically builds graphics from separate layers. Those layers are added, adjusted and specified in the ggplot function using small chunks of code describing different elements of the graph. Essential background reading here is &lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;Winston Chang’s Cookbook for R Graphics website&lt;/a&gt; and book along with &lt;a href=&#34;http://www.r-bloggers.com/search/ggplot2&#34;&gt;R-bloggers posts on ggplot2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;###Establishing the Base Object&lt;/p&gt;
&lt;p&gt;Most ggplot2 tutorials do not refer to a base object, possibly because it is obvious. However, this term was used in Hadley Wickham’s 2010 article &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;A Layered Grammar of Graphics&lt;/a&gt; and helps us to understand the layering process. The base object consists of the data we want to graph and the aesthetic mappings or &lt;code&gt;aes&lt;/code&gt;. This is basically what we want to see on a graphic. Using the &lt;code&gt;pt&lt;/code&gt; (totals) table we can create a base object &lt;code&gt;t&lt;/code&gt; for total as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t &amp;lt;- ggplot(pt, aes(pubyear, weight = nn))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This follows the pattern of:&lt;/p&gt;
&lt;p&gt;data = pt, aesthetic mappings = (x = publication year, y = the sum of n)&lt;/p&gt;
&lt;p&gt;We now have a base object with the &lt;code&gt;aes&lt;/code&gt; mappings. Bear in mind that we will need to change this base object for particular types of graph.&lt;/p&gt;
&lt;p&gt;If we enter &lt;code&gt;t&lt;/code&gt; in the console now then we will see an error message &lt;code&gt;Error: No layers in plot&lt;/code&gt;. That is because we haven’t defined how we want to see the data using a &lt;code&gt;geom&lt;/code&gt;. So let’s add a &lt;code&gt;geom&lt;/code&gt; now.&lt;/p&gt;
&lt;p&gt;###Adding a &lt;code&gt;geom&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The geometric object is basically the form we want to see the data in plus any additional conditions we might want to set.&lt;/p&gt;
&lt;p&gt;For a bar graph (histogram) we would specify &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; for the &lt;code&gt;geom&lt;/code&gt; for a bar graph. Inside the &lt;code&gt;geom_bar()&lt;/code&gt; function we can add some additional details.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;t + geom_histogram(colour = &amp;quot;white&amp;quot;, fill = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig1_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!--- this is not looking as I had expected!---&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig1_gplot2-1.png)---&gt;
&lt;p&gt;When we press command enter (or enter &lt;code&gt;t&lt;/code&gt; in the console) we will now see a bar chart.&lt;/p&gt;
&lt;p&gt;The geom specifies what we want to see. Note here that we have:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Created a white outline around the bars using colour = “white”&lt;/li&gt;
&lt;li&gt;Created a fill using fill = “red”. The default is black.&lt;/li&gt;
&lt;li&gt;We have specified bindwidth = 1 because the default is the range divided by 30. This
has been described as “perverse” by Hadley Wickham. It is intended to encourage thought and experimentation in binning data. In this case our base object is weighted to sum on the values of and we want to see the values in a bin for each year.&lt;/li&gt;
&lt;li&gt;The default for counts in a bar chart is a count of cases (number of observations in the bin), not a count of values. For that reason we specified in the base object for the y axis (weight can also be written as ).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###Changing the Geom&lt;/p&gt;
&lt;p&gt;If we wanted to change the &lt;code&gt;geom&lt;/code&gt; to generate a different kind of graph, such as a line graph we would first need to make an adjustment to our base object. In this case we are specifying that the y axis is &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l &amp;lt;- ggplot(pt, aes(pubyear, nn, weight = nn))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view this we now specify the geom as line:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l + geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig2_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig2_gplot2-1.png)---&gt;
&lt;p&gt;We now have a line graph. Let’s imagine that we wanted to change this to a point (scatter plot).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l + geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig3_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig3_gplot2-1.png)---&gt;
&lt;p&gt;However, now we would like to have a line and a scatterplot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l + geom_point() + 
  geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig4_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig4_gplot2-1.png)---&gt;
&lt;p&gt;This will then draw a line through our scatterplot points. For the sake of illustration we could add another geom to our list to convert to an area graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l + geom_point() + 
  geom_line() + 
  geom_area()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig5_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig5_gplot2-1.png)---&gt;
&lt;p&gt;There is clearly not much point in using this combination because the area geom obliterates the other geoms. But, it illustrates that we can play around with adding and removing geometric objects without going back and changing our base object. We are simply adding and removing layers specifying the geometric object(s) we want to see in the plot.&lt;/p&gt;
&lt;p&gt;For readers following this article from the previous Tableau Public article note that our area graph is the same as in panel 1 of the Tableau Public version &lt;a href=&#34;https://public.tableau.com/views/pizzapatents/Overview?:embed=y&amp;amp;:display_count=yes&amp;amp;:showTabs=y&#34;&gt;here&lt;/a&gt;. To reproduce that in R we will start using themes from the ggthemes package. We will start by creating a base object with no fill specified in &lt;code&gt;l1&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l1 &amp;lt;- ggplot(pt, aes(pubyear, nn, weight = nn, fill=&amp;quot;&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now add layers including the theme. In this case we have chosen &lt;code&gt;theme_igray&lt;/code&gt; and specified the font as Helvetica, then &lt;code&gt;scale_fill_tableau&lt;/code&gt; specifying the “tableau20” palette. Because something for &lt;code&gt;fill&lt;/code&gt; has to be specified in the base object we end up with a legend we don’t need. To remove that when applying the theme we add a + &lt;code&gt;theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt; to drop the legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l2 &amp;lt;- l1+ geom_area() +
  theme_igray(base_family = &amp;quot;Helvetica&amp;quot;) +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;)
l2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig6_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig6_gplot2-1.png)---&gt;
&lt;p&gt;That is very close to the filled graph in our &lt;a href=&#34;https://public.tableau.com/views/pizzapatents/Overview?:embed=y&amp;amp;:display_count=yes&amp;amp;:showTabs=y&#34;&gt;Tableau Public workbook&lt;/a&gt;. A range of themes are available as part of ggthemes the package and are well worth exploring.&lt;/p&gt;
&lt;p&gt;For illustration, we could add information that augments our understanding of the data. First, we could add a line. Second, we could add a rug to the plot. A rug adds a line for each of the observations in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l2 + geom_line() +
  geom_rug()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig7_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig7_gplot2-1.png)---&gt;
&lt;p&gt;What has happened here is that the addition of geom_rug has added a line to the left and the bottom for each of the observations. Thus, on the x axis, each year gets a tick. On the y axis each observation (value) in the data gains a tick.&lt;/p&gt;
&lt;p&gt;What is clear from this is that we do not need a rug for the year. So, let’s change that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;l2 + geom_rug(sides = &amp;quot;l&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig8_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig8_gplot2-1.png)---&gt;
&lt;p&gt;In this case we have specified that the rug should appear on the left (the other options are t, r, b for top, right and bottom respectively).&lt;/p&gt;
&lt;p&gt;A rug plot is useful for spotting outliers in the data. In this case it is telling us where the observations that make up the area plot are concentrated over the years. However, again for illustration, we could also use a different dataset to add a rug layer. Let’s try this with our publication country year or &lt;code&gt;pcy&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;Rather than seeing the distribution of the scores for the overall data, we are now seeing the rug by country. This tells us that no country has a score in any year above 300, with the bulk at under 100 per year. Clearly, this is not the best use of a rug, but it is a simple example of adding a layer from a different dataset to augment the information in another dataset. But, it does suggest that the majority of country observations making up the total are concentrated at less than 100 documents per year and two groupings between 200 to 300. The latter are from the US (see the &lt;code&gt;pcy&lt;/code&gt; table).&lt;/p&gt;
&lt;p&gt;What if we wanted to see the overall trend and the trend for each country on the same graphic? This might initially appear to be difficult because the total data is in the data table and the country year data is in the &lt;code&gt;pcy&lt;/code&gt; table. However, they share the same columns and (thanks to Didzis Efferts answer to this stackoverflow question question) we can do that in two steps.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First we use the ggplot call for the data as before but add +geom_line() to draw the line graph for the total data.&lt;/li&gt;
&lt;li&gt;We add a second &lt;code&gt;geom_line()&lt;/code&gt; and then specify the data that we want to use and its aesthetic mappings inside the function. We will stay with the tableau theme in &lt;code&gt;ggthemes&lt;/code&gt;
and adapt this for a line graph using &lt;code&gt;colour&lt;/code&gt; rather than &lt;code&gt;fill&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will place that in an object called &lt;code&gt;co&lt;/code&gt; for combined.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co &amp;lt;- ggplot(pt, aes(pubyear, nn, weight = nn)) +
  geom_line() +
  geom_line(data = pcy, aes(pubyear, nn, weight = nn, colour = pubcode)) +
  theme_igray() + scale_color_tableau(palette = &amp;quot;tableau20&amp;quot;)
co&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig9_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig9_gplot2-1.png)---&gt;
&lt;p&gt;To view the graph type &lt;code&gt;co&lt;/code&gt; in the console. Note that we have used pubcode (for the two letter country code), rather than the full country name because the graphic is easier to read.&lt;/p&gt;
&lt;p&gt;We could add to this graphic in at least two ways. Let’s try adding a trend line.&lt;/p&gt;
&lt;p&gt;###Adding a trend line&lt;/p&gt;
&lt;p&gt;What we would like to know here is the trend for pizza patent publications using a regression (see &lt;code&gt;?geom_smooth()&lt;/code&gt; and &lt;code&gt;?stat_smooth()&lt;/code&gt; for further details).&lt;/p&gt;
&lt;p&gt;To do that we will work with &lt;code&gt;co&lt;/code&gt; as follows by changing geom_line() on the pt data to geom_point() for a scatter plot and then adding a &lt;code&gt;geom_smooth()&lt;/code&gt;. By default &lt;code&gt;geom_smooth()&lt;/code&gt;
will draw a grey area indicating the standard error interval (se). That interval is set to 0.95 by default. We can do this quite easily by adding &lt;code&gt;geom_smooth()&lt;/code&gt; to &lt;code&gt;co&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co + geom_smooth()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig10_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig10_gplot2-1.png)---&gt;
&lt;p&gt;We will now see a message telling us what is happening “geom_smooth: method=”auto&amp;quot; and size of largest group is &amp;lt;1000, so using loess. Use ‘method = x’ to change the smoothing method.&amp;quot;&lt;/p&gt;
&lt;p&gt;If we leave the standard error interval for the trend line on then our graph becomes hard to understand. We can turn it off we can set an argument inside as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co + geom_smooth(se = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig11_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig11_gplot2-1.png)---&gt;
&lt;p&gt;To experiment with an alternative method try &lt;code&gt;+ geom_smooth(method = &amp;quot;lm&amp;quot;, se = FALSE)&lt;/code&gt; for a linear model and look up &lt;code&gt;?geom_smooth&lt;/code&gt; and associated &lt;code&gt;?stat_smooth&lt;/code&gt;. We would of course want to add a label for the trend line but we will come to labels below. &lt;strong&gt;&lt;em&gt;Add label&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;###Statistical Transformations&lt;/p&gt;
&lt;p&gt;As this suggests there are a range of statistical transformations available in ggplot2 and some are used in the default settings (such as a bar chart and binwidth). Other options include stat_density(), stat_contour() and stat_quantile() with details listed in ggplot2 under Packages and on the second page of the &lt;a href=&#34;https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf&#34;&gt;RStudio Data Visualization cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;###Adding Labels&lt;/p&gt;
&lt;p&gt;To add labels use the function &lt;code&gt;labs()&lt;/code&gt;. Note that the title= , x = and y = must be specified if you want to include labels. Otherwise R will not know what to do with the information.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;co + geom_smooth(se = FALSE) + 
  labs(title = &amp;quot;Patentscope Pizza Patents&amp;quot;,
          x = &amp;quot;Publication Year&amp;quot;,
          y = &amp;quot;Publication Count&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig12_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;%7B%7B%20site.baseurl%20%7D%7D/images/fggplot2/fig12_gplot2-1.png&#34; alt=&#34;_config.yml&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;_config.yml&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In addition to the general labs argument you can also separately use&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;ggtitle(“Patentscope Pizza Patents”) for a main title.&lt;/li&gt;
&lt;li&gt;xlab(“New xlab”) 3. ylab(“New y lab”)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will go into more detail on legends below.&lt;/p&gt;
&lt;p&gt;###Publication Country Charts&lt;/p&gt;
&lt;p&gt;To illustrate different types of charts we will now work with the publication country &lt;code&gt;pc&lt;/code&gt; data frame that we created earlier.&lt;/p&gt;
&lt;p&gt;###A Bar chart&lt;/p&gt;
&lt;p&gt;￼Again first we set the data and aesthetic mappings, specifying the publication country code as the fill (fill with colour) and color as pubcode.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ct &amp;lt;- ggplot(pc, aes(pubcode, weight = nn, fill = pubcode))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we set the geom, in this case for &lt;code&gt;geom_bar()&lt;/code&gt;. Because the x axis will have country code labels we will remove the legend using &lt;code&gt;guides(fill=FALSE)&lt;/code&gt;. Note that the legend arises from &lt;code&gt;fill=pubcode&lt;/code&gt; in the base object. Alternative ways of removing a legend include &lt;code&gt;scale_fill_discrete(guide = FALSE)&lt;/code&gt; or &lt;code&gt;theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ct + geom_bar() + guides(fill=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig13_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig13_gplot2-1.png)---&gt;
&lt;p&gt;Note here that if we changed &lt;code&gt;fill = pubcode&lt;/code&gt; in &lt;code&gt;ct&lt;/code&gt; to &lt;code&gt;colour = pubcode&lt;/code&gt; then the countries would be outlined with colour. Try this, then select Enter at the end of the line to update the object.&lt;/p&gt;
&lt;p&gt;Following Edward Tufte we could also try a simpler approach. To do that we apply &lt;code&gt;theme_tufte()&lt;/code&gt; from &lt;code&gt;ggthemes&lt;/code&gt; and change the font to Helvetica, or something other than the default Serif in this theme, by specifying the &lt;code&gt;base_family&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ct1 &amp;lt;- ct + geom_bar() +
  theme_tufte(base_family = &amp;quot;Helvetica&amp;quot;) +
  guides(fill=FALSE)
ct1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig14_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig14_gplot2-1.png)---&gt;
&lt;p&gt;This is a nice simple example of removing clutter to focus in on what matters: presenting the data. We can also apply the tableau theme for consistency with our trends plots. In this case we will use &lt;code&gt;theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt; to turn off the legend.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ct2 &amp;lt;- ct + geom_bar() +
  theme_igray() +
  scale_color_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;)
ct2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig15_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig15_gplot2-1.png)---&gt;
&lt;p&gt;A range of other options for controlling fonts and legends with practical demonstrations can be found on &lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;Winston Chang’s R Graphics Cookbook website&lt;/a&gt;. Adjusting line weight and backgrounds can contribute to bringing data to the fore while minimising noise and what Tufte in The Visualisation of Quantitative Information called “chart junk”.&lt;/p&gt;
&lt;p&gt;###Adding labels to columns&lt;/p&gt;
&lt;p&gt;We can also add the values to our bars for our new object . We can achieve this using &lt;code&gt;geom_text&lt;/code&gt;. In this case we needed to specify the y axis again inside &lt;code&gt;geom_text&lt;/code&gt;. &lt;code&gt;vjust&lt;/code&gt; specifies the vertical justification with the horizontal being &lt;code&gt;hjust&lt;/code&gt;. In this case we have also specified the font size in &lt;code&gt;geom_text()&lt;/code&gt; as 12.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ct2 + geom_text(aes(y = nn, label = nn, size = 12), vjust= -0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig16_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig16_gplot2-1.png)---&gt;
&lt;p&gt;￼If we wanted to make this more closely resemble the country count chart from our earlier Tableau workbook (a stacked horizontal bar chart) we would need to swap around the axes. To do that we add &lt;code&gt;coord_flip()&lt;/code&gt; to flip around x and y and then we adjust the labelling to use &lt;code&gt;hjust&lt;/code&gt; for horizontal justification rather than &lt;code&gt;vjust&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To create the ranked bar we need to use the function &lt;code&gt;reorder()&lt;/code&gt; with either the x or the y axis. In this case it is the x axis. We need to specify both x and the y inside &lt;code&gt;reorder()&lt;/code&gt; for this to work. In other cases you may need to go back to your original data table to adjust the data.&lt;/p&gt;
&lt;p&gt;Depending on the font used you may have to change the &lt;code&gt;hjust&lt;/code&gt; value or adjust the font size. Note that only the first four lines are essential to this code. The remainder are for our tableau theme and to hide the legend.&lt;/p&gt;
&lt;p&gt;###A Ranked Bar Chart&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctr &amp;lt;- ggplot(pc, aes(x = reorder(pubcode, nn), y = nn, fill = pubcode)) + 
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  coord_flip() +
  geom_text(aes(y = nn, label = nn, size = 12), hjust = -0.1) +
  theme_igray() +
  scale_color_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;) +
  labs(title=&amp;quot;Patentscope Pizza Patents&amp;quot;, x = &amp;quot;Publication Country&amp;quot;, y = &amp;quot;Publication Count&amp;quot;)
ctr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig17_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig17_gplot2-1.png)---&gt;
&lt;p&gt;There is room for improvement here, such as the colour of the country names (or replacing them with actual names) and adjusting the font size to more closely match the axis fonts. It can also be tricky to ensure that the highest value (in this case the label for the US) stays inside the plot. However, it is pretty close. Turning now to our patent country year table &lt;code&gt;pcr&lt;/code&gt; we will look at some other chart forms and coordinate systems.&lt;/p&gt;
&lt;p&gt;###A Dot Plot&lt;/p&gt;
&lt;p&gt;For a simple dot plot of the same data we can make three changes. 1. We change fill to colour in the base object. 2. We change &lt;code&gt;geom_bar&lt;/code&gt; to &lt;code&gt;geom_point&lt;/code&gt; and specify the size of the dots. 3. For the labelled values we change hjust.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctd &amp;lt;- ggplot(pc, aes(x = reorder(pubcode, nn), y = nn, colour = pubcode)) + 
  geom_point(size = 3) +
  coord_flip() +
  geom_text(aes(y = nn, label = nn, size = 12), hjust = -0.4) +
  theme_igray() +
  scale_color_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;) +
  labs(title=&amp;quot;Patentscope Pizza Patents&amp;quot;, x = &amp;quot;Publication Country&amp;quot;, y = &amp;quot;Publication Count&amp;quot;)
ctd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig18_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig18_gplot2-1.png)---&gt;
&lt;p&gt;Note here that one limitation of this dot plot is the adjustment of &lt;code&gt;hjust&lt;/code&gt; where smaller numbers appear closer to the dots than larger numbers. This suggests a need for experimentation with &lt;code&gt;hjust&lt;/code&gt; and possibly the size and assessing whether to retain the labels. Options for recolouring labels might also be considered.&lt;/p&gt;
&lt;p&gt;###A Balloon Plot&lt;/p&gt;
&lt;p&gt;Another way or representing the data would be as a set of balloons sized on the number of records.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ctb &amp;lt;- ggplot(pc, aes(x = pubcode, y = nn, size = nn)) + 
  geom_point(shape = 21, colour = &amp;quot;black&amp;quot;, fill = &amp;quot;cornsilk&amp;quot;) +
  scale_size_area(max_size = 15) + 
  theme_igray() +
  scale_color_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;) +
  labs(title=&amp;quot;Patentscope Pizza Patents&amp;quot;, x = &amp;quot;Publication Country&amp;quot;, y = &amp;quot;Publication Count&amp;quot;)
ctb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig19_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig19_gplot2-1.png)---&gt;
&lt;p&gt;This is a very basic balloon plot and plots of this type could be readily adapted to represent a wide variety of patent data.&lt;/p&gt;
&lt;p&gt;###A Stacked Bar Chart&lt;/p&gt;
&lt;p&gt;To create a stacked bar chart using our &lt;code&gt;pcy&lt;/code&gt; data we can use the following. We will however rapidly run into some of the aesthetic problems that are common with stacked bar charts. In reading this section, consider whether a stacked bar chart is really the best way to represent the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sb &amp;lt;- ggplot(pcy, aes(pubyear, weight = nn, fill = pubcode)) +
  geom_bar(binwidth = 1)
sb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig20_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig20_gplot2-1.png)---&gt;
&lt;p&gt;In practice a filled graph of this type could reasonably be described as a mess. This arises from the number of countries involved and the default colors. It is in fact less clear than the line plot by country created above. Stacked plots also suffer from problems with the order of the data and the legend. That is, as we saw above, simpler is generally better in conveying information.&lt;/p&gt;
&lt;p&gt;It is not a good idea to attempt to prettify a bad graph because it will still be a bad graph. Indeed we encounter multiple issues if we attempt to improve this stacked bar. We will illustrate this with the &lt;code&gt;main&lt;/code&gt; table we created earlier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sm &amp;lt;- ggplot(main, aes(pubyear, weight = nn, fill = pubcode))&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Adding a colour border.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are presently using fill on the pubcode, but what if we specified a colour for the borders of the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sm + geom_bar(binwidth = 1, colour = &amp;quot;black&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig21_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig21_gplot2-1.png)---&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The order of the bars&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The addition of the colour outline is an improvement but the order of the stacked bars is not correct. We can attempt to adjust for this with a quick use of arrange&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;main &amp;lt;- arrange(main, pubcode)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A definite improvement but not earth shattering and we now have a filled legend. We can try changing the palette.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sm + geom_bar(binwidth=1, colour=&amp;quot;black&amp;quot;) +
  theme_igray() +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig22_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig22_gplot2-1.png)---&gt;
&lt;p&gt;We can also start to work on the line colour and the line weight in the function to try to clarify the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sm + geom_bar(binwidth = 1, colour = &amp;quot;gray&amp;quot;, size = .25) +
  theme_igray(base_family = &amp;quot;Helvetica&amp;quot;) +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig23_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig23_gplot2-1.png)---&gt;
&lt;p&gt;That is an improvement of sorts. We could then do the same for the other tables while noting that a means will be needed to ensure that different colours are used on the countries across the summary plots.&lt;/p&gt;
&lt;p&gt;As this suggests stacked bar charts present communication difficulties. That is they take quite a lot of work to get right and the ultimate result may still be difficult for a reader to interpret.&lt;/p&gt;
&lt;p&gt;We could try this as a stacked area graph as follows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sm &amp;lt;- ggplot(main, aes(pubyear, y = nn, fill = pubcode, order = pubcode)) +
   geom_area() +
   theme_igray(base_family = &amp;quot;Helvetica&amp;quot;) +
   scale_fill_tableau(&amp;quot;tableau20&amp;quot;)
sm&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig24_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig24_gplot2-1.png)---&gt;
&lt;p&gt;That looks promising but note that the order of the stack is not correct and can give a misleading impression. Thus the order should be descending from US, WO, CA, EP, KR. At the time of writing an easy way of adjusting this has not been identified. As such, significant energy could be expended attempting to improve what is essentially a bad graph.&lt;/p&gt;
&lt;p&gt;###Faceting&lt;/p&gt;
&lt;p&gt;One of the problems we commonly encounter in patent analysis is that data is compressed by dominant players, whether these be countries, applicants or technology areas. One important approach to addressing this problem is to break the data out into multiple individual plots by faceting that data. The term faceting in ggplot is perhaps more familiar as the creation of trellis graphs.&lt;/p&gt;
&lt;p&gt;To facet our publication by country and year data from the graph above we will start by creating an object with the information below. We will leave out labels. We will however add a control that excludes the legend because it will be redundant and get in the way of the large plot we will be creating.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- ggplot(pcy, aes(x = pubyear, y = nn, color = pubcode)) +
  geom_point() +
  theme_igray(base_family = &amp;quot;Helvetica&amp;quot;) +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;) +
  theme(legend.position=&amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key to creating the facet plot is selecting:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;the right faceting option (either &lt;code&gt;facet_grid&lt;/code&gt; or &lt;code&gt;facet_wrap&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the variable to facet on which is specified using tilde &lt;code&gt;~&lt;/code&gt; in the function e.g &lt;code&gt;~pubcode&lt;/code&gt; to facet only on pubcode or &lt;code&gt;pubcode~group&lt;/code&gt; for both pubcode and group.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For demonstration we will walk through some options:&lt;/p&gt;
&lt;p&gt;If we choose &lt;code&gt;facet_grid&lt;/code&gt; we will see a line of plots. The main issue that arises here is adjusting the labelling on the x axis. We can do that by adding &lt;code&gt;scale_x_continuous&lt;/code&gt; and specifying the breaks and values we want to see. We could also as needed change the labels by adding to the function like this &lt;code&gt;scale_x_continuous(breaks = c(1970, 2010), labels = c(label1, label2))&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_grid(~pubcode, shrink = TRUE) +
  scale_x_continuous(breaks = c(1970, 2010))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig25_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig25_gplot2-1.png)---&gt;
&lt;p&gt;However, the above plot suffers from being too vertical and the labels remain squashed. In future it may be possible to adjust this (using &lt;code&gt;+ theme(panel.margin.x = unit(5, &amp;quot;lines&amp;quot;)&lt;/code&gt; but at the time of writing this did not appear to be working) (see this &lt;a href=&#34;http://stackoverflow.com/questions/12252750/alter-just-horizontal-spacing-between-facets-ggplot2&#34;&gt;Stackoverflow discussion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An alternative option for a clearer plot might be to use the groups that we created in the data table to facet on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_grid(pubcode~group, shrink = TRUE) +
  theme(legend.position = &amp;quot;none&amp;quot;) +
  scale_x_continuous(breaks = c(1970, 2010))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig26_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig26_gplot2-1.png)---&gt;
&lt;p&gt;That is an improvement, as we can see the three groups, but note that the countries are ordered alphabetically rather than by group.&lt;/p&gt;
&lt;p&gt;###facet_wrap&lt;/p&gt;
&lt;p&gt;To create a more reasonable plot we can use &lt;code&gt;facet_wrap()&lt;/code&gt;. Note that the position of the group has been reversed to &lt;code&gt;group~pubcode&lt;/code&gt; to achieve this plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_wrap(group~pubcode) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig27_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig27_gplot2-1.png)---&gt;
&lt;p&gt;What we now see is a facet plot that is ordered from group 1 to group 3. This is pretty good.&lt;/p&gt;
&lt;p&gt;While we would generally want to drop some of the smallest values, to improve this type of plot we might try freeing up the scales. In this case we focus on the y axis by specifying &lt;code&gt;free_y&lt;/code&gt; with the alternative being &lt;code&gt;free_x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_wrap(group~pubcode, scales =&amp;quot;free_y&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig28_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig28_gplot2-1.png)---&gt;
&lt;p&gt;This removes the compression and gives each individual plot its own scale. The default for facets is to show the highest values at the bottom right (the default of argument &lt;code&gt;as.table&lt;/code&gt;). If we specify &lt;code&gt;as.table = FALSE&lt;/code&gt; the facets will show the higher values (in group 3) first. This might improve the plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_wrap(group~pubcode, scales =&amp;quot;free_y&amp;quot;, as.table = FALSE) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig29_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig29_gplot2-1.png)---&gt;
&lt;p&gt;Note that this still presents some problems as ideally the highest value (the US) would appear first and then read in descending order across from left to right. There appear to be some limitations to the controls possible in &lt;code&gt;facet_wrap&lt;/code&gt; and also our data structure.&lt;/p&gt;
&lt;p&gt;We will revert to the ascending order but keep the free y axis. We could if we wished add a regression to show the trend by country by adding &lt;code&gt;geom_smooth()&lt;/code&gt;. We will remove the standard error area by specifying &lt;code&gt;se = FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f + facet_wrap(group~pubcode, scales =&amp;quot;free_y&amp;quot;, as.table = TRUE) +
  geom_smooth(se = FALSE) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig30_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig30_gplot2-1.png)---&gt;
&lt;p&gt;In running this code we will receive a message for each plot informing us of the smoothing method that is being used.&lt;/p&gt;
&lt;p&gt;The issue we encounter here is that a number of countries in group 1 and group 2 have very sparse results with no corresponding meaningful trend to display. In practice we would drop group 1 entirely and focus on group 2 and 3. To conclude, let’s do that.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g &amp;lt;- filter(pcy, group %in% c(2,3))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;%in%&lt;/code&gt; within filter basically says “extract rows falling into group 2 or 3 from within group”. Once again it is a simple &lt;code&gt;dplyr&lt;/code&gt; solution and easy to remember.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g1 &amp;lt;- ggplot(g, aes(x = pubyear, y = nn, color = pubcode)) +
  geom_point() +
  theme_igray(base_family = &amp;quot;Helvetica&amp;quot;) +
  scale_fill_tableau(&amp;quot;tableau20&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now try again with our trend line using &lt;code&gt;geom_smooth&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g1 + facet_wrap(group~pubcode, scales =&amp;quot;free_y&amp;quot;, as.table = TRUE) +
  geom_smooth(se = FALSE) +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig32_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig32_gplot2-1.png)---&gt;
&lt;p&gt;That is a considerable improvement and we will stop there. One limitation of facet wrap is that it appears that renaming the labels, to leave only the country codes, is not possible (although using labeller may provides solutions). It may also be the case that we would prefer to drop some of the other countries with low scores from group 2. We could do that by applying a filter on pubcode. We could also add some labels to the overall plot.&lt;/p&gt;
&lt;p&gt;##Pie and Coxcomb Plots&lt;/p&gt;
&lt;div id=&#34;creating-a-pie-chart-aaaargh&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating a Pie Chart (aaaargh)&lt;/h3&gt;
&lt;p&gt;A pie chart is the plan view of a stacked bar chart using polar coordinates. Pie charts of the familiar variety are widely criticised because they are hard to accurately interpret. They also tend to become laden with what Edward Tufte called “chart junk”, such as 3D rendering, that distracts from the presentation and communication of the data. Edward Tufte has this to say about pie charts in The Visual Display of Quantitative Information:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“A table is nearly always better than a dumb pie chart; the only worse design than a pie chart is several of them, for then the viewer is asked to compare quantities located in spatial disarray both within and between pies… Given their low data-density and failure to order numbers along a visual dimension, pie charts should never be used.”(Tufte 2001: 178)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, Tufte’s criticism has done relatively little to diminish the popularity of the pie chart and it seems, almost everyone knows what a pie chart is.&lt;/p&gt;
&lt;p&gt;Creating a pie chart in ggplot takes some thought. As is often the case when working with R we can find a detailed walk through in the wider user community. In this case we are following the code developed by the &lt;a href=&#34;http://mathematicalcoffee.blogspot.co.uk/2014/06/ggpie-pie-graphs-in-ggplot2.html&#34;&gt;Mathematical Coffee blog entitled ggpie: pie graphs in ggplot2&lt;/a&gt;. For those familiar with R, Mathematical Coffee wraps this into a function called for generating pie charts. We will walk through the steps from the blog post and adapt it to our pizza data.&lt;/p&gt;
&lt;p&gt;The first step is to create an object as a stacked chart. In this case we attribute a single value to the x axis, specify the y axis as percent and then the fill as publication code. This creates a stacked bar chart.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;o1 &amp;lt;- ggplot(pc, aes(x=1, y = percent, fill = pubcode)) + geom_bar(stat = &amp;quot;identity&amp;quot;)
o1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig33_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig33_gplot2-1.png)---&gt;
&lt;p&gt;If we view this it will be a stacked bar. In the second step we create the pie chart by specifying the polar coordinate and &lt;code&gt;theta = y&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- o1 + coord_polar(theta = &amp;quot;y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now enter y in the console we will see a pie chart. The remaining steps involve further defining the aesthetics of the chart, tidying up and adding labels.&lt;/p&gt;
&lt;p&gt;The following adds black lines to define the pie segments. Because these lines are then reflected in the legend the argument overrides this by using colour = NA.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z &amp;lt;- y + geom_bar(stat = &amp;quot;identity&amp;quot;, colour = &amp;quot;black&amp;quot;) +
  guides(fill=guide_legend(override.aes=list(colour=NA)))
z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig34_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig34_gplot2-1.png)---&gt;
&lt;p&gt;Then remove the various tick marks&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z &amp;lt;- z +
    theme(axis.ticks=element_blank(),
          axis.title=element_blank(),
          axis.text.y=element_blank()
          )
z&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig35_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig35_gplot2-1.png)---&gt;
&lt;p&gt;We need to work out the position of the labels that we would like to see on the pie, and in particular the mid-point of each pie. This can be found as the cumulative sum &lt;code&gt;cumsum&lt;/code&gt; of the variable we used for the slices. That is percent expressed as &lt;code&gt;pc$percent&lt;/code&gt; to state the data frame and the column we want in the &lt;code&gt;percent&lt;/code&gt; table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y.breaks &amp;lt;- cumsum(pc$percent) - pc$percent/2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we print y.breaks to the console we will a list of values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;q &amp;lt;- z +
    theme(axis.text.x=element_text(color=&amp;#39;black&amp;#39;)) +
    scale_y_continuous(
        breaks=y.breaks,
        labels=pc$pubcode)
q&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig36_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig36_gplot2-1.png)---&gt;
&lt;p&gt;Thanks to Mathematical Coffee we now have a functional pie chart of the percentage share of pizza patent documents. The only issue with this plot is that some of the labels on the smaller values are crunched. That could however be addressed by filtering rows in accordance with the groups on the &lt;code&gt;pc&lt;/code&gt; table, as we did above for &lt;code&gt;pcy&lt;/code&gt;, to remove the overlap.&lt;/p&gt;
&lt;p&gt;###The Coxcomb Plot&lt;/p&gt;
&lt;p&gt;A coxcomb plot is generally associated with Florence Nightingales representation of the causes of mortality among the British Army in the Korean War that can be viewed &lt;a href=&#34;&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A coxcomb plot begins with a bar chart as follows. Note that we have chosen &lt;code&gt;n&lt;/code&gt; for the y value from the table. We could have used percent.&lt;/p&gt;
&lt;p&gt;￼￼We will use a filtered version of the table that only contains group 3 results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cx &amp;lt;- filter(pc, group %in% 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start the plot by creating a bar chart. Note that we are using the value of &lt;code&gt;n&lt;/code&gt; here for the y axis. This could be changed to percent or another value as needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cx1 &amp;lt;- ggplot(cx, aes(x = pubcode, y = nn, fill= pubcode)) +
  geom_bar(stat=&amp;quot;identity&amp;quot;)
cx1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig37_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig37_gplot2-1.png)---&gt;
&lt;p&gt;We them add a &lt;code&gt;coord_polar&lt;/code&gt; specifying theta in this case as x (the pubcode). The remainder of the code is thematic.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cx1 + coord_polar(theta=&amp;quot;x&amp;quot;) +
   theme_light() +
   theme(legend.position=&amp;quot;none&amp;quot;) +
   labs(x = &amp;quot;Publication Country&amp;quot;, y = &amp;quot;Publication Count&amp;quot;, 
        title  = &amp;quot;Pizza Patent Publications by Country&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-03-graphing-patent-data-with-ggplot2-part-2_files/figure-html/fig38_gplot2-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;!---![_config.yml]({{ site.baseurl }}/images/fggplot2/fig38_gplot2-1.png)---&gt;
&lt;p&gt;In the R Graphics Cookbook, Winston Chang adds three observations about coxcomb plots. The first is that for y variables the smallest value is mapped to the centre of the plot, rather than a data value of 0 being mapped to a radius of 0. Second, for a continuous x (or theta) the smallest and largest values are merged. Third, theta values of polar coordinates do not wrap around. As such changes would need to be made to the limits of the plot (see Chang 2013: 200-203 for discussion).&lt;/p&gt;
&lt;p&gt;##Round Up&lt;/p&gt;
&lt;p&gt;In this article we have covered two main topics.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;How to prepare data for graphing in R using the &lt;code&gt;dplyr&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;How to draw a range of graphs and the issues encountered using ggplot2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this article we have not explored the full potential of visualisation options in ggplot2, such as heat maps and choropleth maps. These topics are regularly covered on sites such as &lt;a href=&#34;http://www.r-bloggers.com&#34;&gt;r-bloggers.com&lt;/a&gt;. However, we have seen that it is possible to construct graphics from the bottom up using simple code and specifying the details we would like to see.&lt;/p&gt;
&lt;p&gt;We have seen that the great strength of ggplot2 is the ability to control all aspects of a graphic. However, in working with our sample data we have also seen that this can lead to complexity in terms of adjusting data such as arranging or labelling. While it will be possible to bundle the code into functions that could be reused, it is equally clear that significant time investments are involved in working towards publication quality graphics using ggplot2. Those time demands will diminish with improved familiarity but are nevertheless a significant factor.&lt;/p&gt;
&lt;p&gt;To go further with ggplot2 we provide a list of resources below. We also suggest installing R tutorials such as (install.packages(“swirl”)) and learning more about the use of pipes in &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;##Useful Resources&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;a href=&#34;http://www.rstudio.com/wp-content/uploads/2015/05/ggplot2-cheatsheet.pdf&#34;&gt;RStudio Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cookbook-r.com/Graphs/&#34;&gt;R Graphics Cookbook&lt;/a&gt; by Winston Chang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;Hadley Wickham 2010 A Layered Grammar of Graphics preprint article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.co.uk/Hadley-Wickham/e/B002BOA9GI/ref=sr_tc_2_0?qid=1435678538&amp;amp;sr=1-2-ent&#34;&gt;Hadley Wickham ggplot2 book from Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swirl tutorials (install.packages(“swirl”)) and &lt;a href=&#34;https://github.com/swirldev/swirl_courses&#34;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.ggplot2.org/0.9.3/index.html#&#34;&gt;ggplot2 online help topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.r-bloggers.com/search/ggplot2&#34;&gt;R-Bloggers on ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/ggplot2&#34;&gt;Stack Overflow questions and answers on ggplot2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/results?search_query=ggplot2&#34;&gt;YouTube ggplot 2 videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mathematicalcoffee.blogspot.co.uk/2014/06/ggpie-pie-graphs-in-ggplot2.html&#34;&gt;Mathematical Coffee Blog Post on Creating a Pie Chart with ggplot2 an the ggpie code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Wrangling Pizza Patents in R</title>
      <link>/wrangling-pizza-patents-in-r/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/wrangling-pizza-patents-in-r/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started-with-r&#34;&gt;Getting Started with R&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#about-the-pizza-patent-dataset&#34;&gt;About the pizza patent dataset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-in-the-data&#34;&gt;Reading in the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-a-numeric-field&#34;&gt;Creating a numeric field&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#renaming-columns&#34;&gt;Renaming Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#selecting-columns-for-plotting&#34;&gt;Selecting Columns for plotting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#creating-counts&#34;&gt;Creating Counts&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#total-by-year&#34;&gt;Total by Year&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#round-up&#34;&gt;Round Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;This is the first part of a two part article on using R and the &lt;code&gt;ggplot2&lt;/code&gt; package to visualise patent data. In a previous article we looked at visualising pizza related patent activity in Tableau Public. In this article we look at how to wrangle our &lt;code&gt;pizza&lt;/code&gt; dataset using &lt;code&gt;dplyr&lt;/code&gt; package in RStudio to prepare the data for graphing. This is intended as a gentle introduction and you do not need to know anything about R to follow this article. You will however need to install &lt;a href=&#34;http://www.rstudio.com/products/rstudio/&#34;&gt;RStudio Desktop&lt;/a&gt; for your operating system (see below).&lt;/p&gt;
&lt;p&gt;Part 1 will introduce the basics of handling data in R in preparation for plotting and will then use the quick plot or &lt;code&gt;qplot&lt;/code&gt; function in &lt;code&gt;ggplot2&lt;/code&gt; to start graphing elements of the pizza patents dataset.&lt;/p&gt;
&lt;p&gt;Part 2 will go into more depth on handling data in R and the use of ggplot2.&lt;/p&gt;
&lt;p&gt;ggplot2 is an implementation of the theory behind the Grammar of Graphics. The theory was originally developed by Leland Wilkinson and reinterpreted with considerable success by Hadley Wickham at Rice University and RStudio. The basic idea behind the Grammar of Graphics is that any statistical graphic can be built using a set of simple layers consisting of:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;A dataset containing the data we want to see (e.g x and y axes and data points)&lt;/li&gt;
&lt;li&gt;A geometric object (or &lt;code&gt;geom&lt;/code&gt;) that defines the form we want to see (points, lines, shapes etc.) known as a &lt;code&gt;geom&lt;/code&gt;. Multiple &lt;code&gt;geoms&lt;/code&gt; can be used to build a graphic (e.g, points and lines etc.).&lt;/li&gt;
&lt;li&gt;A coordinate system (e.g. a grid, a map etc.).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On top of these three basic components, the grammar includes statistical transformations (or &lt;code&gt;stats&lt;/code&gt;) describing the statistics to be applied to the data to create a bar chart or trend line. The grammar also describes the use of faceting (trellising) to break a dataset down into smaller components (see Part 2).&lt;/p&gt;
&lt;p&gt;A very useful article explaining this approach is &lt;a href=&#34;http://vita.had.co.nz/papers/layered-grammar.pdf&#34;&gt;Hadley Wickham’s 2010 A Layered Grammar of Graphics&lt;/a&gt; (preprint) and is recommended reading.&lt;/p&gt;
&lt;p&gt;The power of this approach is that it allows us to build complex graphs from simple layers while being able to control each element and understand what is happening. One way to think of this is as stripping back a graph to its basic elements and allowing you to decide what each element (layer) should contain and look like. In short, you get to decide what your graphs look like.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot2&lt;/code&gt; contains two main functions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;qplot (quick plot)&lt;/li&gt;
&lt;li&gt;ggplot()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main difference between the two is that quick plot makes assumptions for you and, as the name suggests, is used for quick plots. In contrast, with ggplot we build graphics from scratch with helpful defaults that give us full control over what we see.&lt;/p&gt;
&lt;p&gt;In this article we will start with qplot and increasingly merge into developing plots by adding layers in what could be called a ggplot kind of way. We will develop that further in the Part 2.&lt;/p&gt;
&lt;div id=&#34;getting-started-with-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started with R&lt;/h2&gt;
&lt;p&gt;This article assumes that you are new to using R. You do not need any knowledge of programming in R to follow this article. While you don’t need to know anything about R to follow the article, you may find it helpful to know that :&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;R is a statistical programming language. That can sound a bit intimidating. However, R can handle lots of other tasks a patent analyst might need such as cleaning and tidying data or text mining. This makes it a good choice for a patent analyst.&lt;/li&gt;
&lt;li&gt;R works using packages (libraries) for performing tasks such as importing files, manipulating files and graphics. There are around 6,819 packages and they are open source (mainly it seems under the MIT licence). If you can think of it there is probably a package that meets (or almost meets) your analysis needs.&lt;/li&gt;
&lt;li&gt;Packages contain functions that do things such as &lt;code&gt;read_csv()&lt;/code&gt; to read in a comma separated file.&lt;/li&gt;
&lt;li&gt;The functions take arguments that tell them what you want to do, such as specifying the data to graph and the x and y axis e.g. qplot(x = , y = , data = my dataset).&lt;/li&gt;
&lt;li&gt;If you want to learn more, or get stuck, there are a huge number of resources and free courses out there and RStudio lists some of the main resources on their website &lt;a href=&#34;http://www.rstudio.com/resources/training/online-learning/&#34;&gt;here&lt;/a&gt;. With R you are never alone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;R is best learned by doing. The main trick with R is to install and load the packages that you will need and then to work with functions and their arguments. Given that most patent analysts are likely to be unfamiliar with R we will adopt the simplest approach possible to make sure it is clear what is going on at each step.&lt;/p&gt;
&lt;p&gt;The first step is to install R and RStudio desktop for your operating system by following the links and instructions &lt;a href=&#34;http://www.rstudio.com/products/rstudio/download/&#34;&gt;here&lt;/a&gt; and making sure that you follow the link to install R. Follow this very useful &lt;a href=&#34;http://www.computerworld.com/article/2497143/business-intelligence/business-intelligence-beginner-s-guide-to-r-introduction.html?page=2&#34;&gt;Computerworld article&lt;/a&gt; to become familiar with what you are seeing. You may well want to follow the rest of that article. Inside R you can learn a lot by installing the &lt;code&gt;Swirl&lt;/code&gt; package that provides interactive tutorials for learning R. Details are provided in the resources at the end of the article.&lt;/p&gt;
&lt;p&gt;The main thing you need to do to get started other than installing R and RStudio is to open RStudio and install some packages.&lt;/p&gt;
&lt;p&gt;In this article we will use four packages:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;readr&lt;/code&gt; to quickly read in the pizza patent dataset as an easy to use data table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dplyr&lt;/code&gt; for quick addition and operations on the data to make it easier to graph.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt; or Grammar of Graphics 2 as the tool we will use for graphing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggthemes&lt;/code&gt; provides very useful additional themes including Tufte range plots, the Economist and Tableau and can be accessed through &lt;a href=&#34;http://cran.r-project.org/web/packages/ggthemes/index.html&#34;&gt;CRAN&lt;/a&gt; or &lt;a href=&#34;https://github.com/jrnold/ggthemes&#34;&gt;Github&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;If you don’t have these packages already then install each of them below by pressing command and Enter at the end of each line. As an alternative select &lt;strong&gt;&lt;em&gt;Packages &amp;gt; Install&lt;/em&gt;&lt;/strong&gt; in the pane displaying a tab called Packages. Then enter the names of the packages one at a time without the quotation marks.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;readr&amp;quot;)
install.packages(&amp;quot;dplyr&amp;quot;)
install.packages(&amp;quot;ggplot2&amp;quot;)
install.packages(&amp;quot;ggthemes&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then make sure the packages have loaded to make them available. Press command and enter at the end of each line below (or, if you are feeling brave, select them all and then click the icon marked Run).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(dplyr)
library(ggplot2)
library(ggthemes)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are now good to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;about-the-pizza-patent-dataset&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;About the pizza patent dataset&lt;/h2&gt;
&lt;p&gt;The pizza patents dataset is a set of 9,996 patent documents from the WIPO Patentscope database that make reference somewhere in the text to the term &lt;code&gt;pizza&lt;/code&gt;. Almost everybody likes pizza and this is simply a working dataset that we can use to learn how to work with different open source tools. This will also allow us over time to refine our understanding of patent activity involving the term pizza and hone in on actual pizza related technology. In previous walkthroughs we divided the &lt;code&gt;pizza&lt;/code&gt; dataset into a set of distinct data tables to enable analysis and visualisation using Tableau Public. You can download that dataset in .csv format &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/pizza_medium_clean/pizza_medium_clean.zip?raw=true&#34;&gt;here&lt;/a&gt;. These data tables are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;pizza (the core set)&lt;/li&gt;
&lt;li&gt;applicants (a subdataset divided and cleaned on applicant names)&lt;/li&gt;
&lt;li&gt;inventors (a subdataset divided and cleaned on inventor names)&lt;/li&gt;
&lt;li&gt;ipc_class (a subdataset divided on ipc class names names)&lt;/li&gt;
&lt;li&gt;applicants_ipc (a child dataset of applicants listing the IPC codes)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this article we will focus on the &lt;code&gt;pizza&lt;/code&gt; table as the core set. However, you may want to experiment with other sets.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in the Data&lt;/h2&gt;
&lt;p&gt;We will use the &lt;code&gt;readr&lt;/code&gt; package to rapidly read in the pizza set to R (for other options see the in depth articles on reading in &lt;a href=&#34;&#34;&gt;.csv&lt;/a&gt; and &lt;a href=&#34;&#34;&gt;Excel&lt;/a&gt; files and the recent Getting your Data into R RStudio &lt;a href=&#34;http://www.rstudio.com/resources/webinars/&#34;&gt;webinar&lt;/a&gt;). &lt;code&gt;readr&lt;/code&gt; is nice and easy to use and creates a data table that we can easily view.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
library(dplyr)
pizza &amp;lt;- read_csv(&amp;quot;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/pizza_medium_clean/pizza.csv?raw=true&amp;quot;) %&amp;gt;% 
    select(-applicants_cleaned, -applicants_cleaned_type, -applicants_original, -inventors_cleaned, 
        -inventors_original)  # drop cols with a multibyte string
head(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 26
##   applicants_organ… ipc_class ipc_codes ipc_names ipc_original ipc_subclass_co…
##   &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           
## 1 &amp;lt;NA&amp;gt;              A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 2 &amp;lt;NA&amp;gt;              A21: Bak… A21B 3/13 A21B 3/1… A21B 3/13    A21B            
## 3 &amp;lt;NA&amp;gt;              A21: Bak… A21C 15/… A21C 15/… A21C 15/04   A21C            
## 4 Lazarillo De Tor… A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 5 &amp;lt;NA&amp;gt;              B65: Con… B65D 21/… B65D 21/… B65D 21/032… B65D            
## 6 &amp;lt;NA&amp;gt;              B65: Con… B65D 85/… B65D 85/… B65D 85/36   B65D            
## # ... with 20 more variables: ipc_subclass_detail &amp;lt;chr&amp;gt;,
## #   ipc_subclass_names &amp;lt;chr&amp;gt;, priority_country_code &amp;lt;chr&amp;gt;,
## #   priority_country_code_names &amp;lt;chr&amp;gt;, priority_data_original &amp;lt;chr&amp;gt;,
## #   priority_date &amp;lt;chr&amp;gt;, publication_country_code &amp;lt;chr&amp;gt;,
## #   publication_country_name &amp;lt;chr&amp;gt;, publication_date &amp;lt;chr&amp;gt;,
## #   publication_date_original &amp;lt;chr&amp;gt;, publication_day &amp;lt;int&amp;gt;,
## #   publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, publication_year &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have a data table with the data. We can inspect this data in a variety of ways:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. View&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See a separate table in a new tab. This is useful if you want to get a sense of the data or look for column numbers.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;View(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2. head (for the bottom use &lt;code&gt;tail&lt;/code&gt;)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;head&lt;/code&gt; allows you to see the top few rows or using &lt;code&gt;tail&lt;/code&gt; the bottom few rows.If you would like to see more rows add a number after the dataset name e.g. `head(pizza, 20).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 26
##   applicants_organ… ipc_class ipc_codes ipc_names ipc_original ipc_subclass_co…
##   &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           
## 1 &amp;lt;NA&amp;gt;              A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 2 &amp;lt;NA&amp;gt;              A21: Bak… A21B 3/13 A21B 3/1… A21B 3/13    A21B            
## 3 &amp;lt;NA&amp;gt;              A21: Bak… A21C 15/… A21C 15/… A21C 15/04   A21C            
## 4 Lazarillo De Tor… A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 5 &amp;lt;NA&amp;gt;              B65: Con… B65D 21/… B65D 21/… B65D 21/032… B65D            
## 6 &amp;lt;NA&amp;gt;              B65: Con… B65D 85/… B65D 85/… B65D 85/36   B65D            
## # ... with 20 more variables: ipc_subclass_detail &amp;lt;chr&amp;gt;,
## #   ipc_subclass_names &amp;lt;chr&amp;gt;, priority_country_code &amp;lt;chr&amp;gt;,
## #   priority_country_code_names &amp;lt;chr&amp;gt;, priority_data_original &amp;lt;chr&amp;gt;,
## #   priority_date &amp;lt;chr&amp;gt;, publication_country_code &amp;lt;chr&amp;gt;,
## #   publication_country_name &amp;lt;chr&amp;gt;, publication_date &amp;lt;chr&amp;gt;,
## #   publication_date_original &amp;lt;chr&amp;gt;, publication_day &amp;lt;int&amp;gt;,
## #   publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, publication_year &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3. dimensions&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This allows us to see how many rows there are (9996) and how many columns(31)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9996   26&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;4. Summary&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provides a summary of the dataset columns including quick calculations on numeric fields and the class of vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  applicants_organisations  ipc_class          ipc_codes        
##  Length:9996              Length:9996        Length:9996       
##  Class :character         Class :character   Class :character  
##  Mode  :character         Mode  :character   Mode  :character  
##                                                                
##                                                                
##                                                                
##                                                                
##   ipc_names         ipc_original       ipc_subclass_codes ipc_subclass_detail
##  Length:9996        Length:9996        Length:9996        Length:9996        
##  Class :character   Class :character   Class :character   Class :character   
##  Mode  :character   Mode  :character   Mode  :character   Mode  :character   
##                                                                              
##                                                                              
##                                                                              
##                                                                              
##  ipc_subclass_names priority_country_code priority_country_code_names
##  Length:9996        Length:9996           Length:9996                
##  Class :character   Class :character      Class :character           
##  Mode  :character   Mode  :character      Mode  :character           
##                                                                      
##                                                                      
##                                                                      
##                                                                      
##  priority_data_original priority_date      publication_country_code
##  Length:9996            Length:9996        Length:9996             
##  Class :character       Class :character   Class :character        
##  Mode  :character       Mode  :character   Mode  :character        
##                                                                    
##                                                                    
##                                                                    
##                                                                    
##  publication_country_name publication_date   publication_date_original
##  Length:9996              Length:9996        Length:9996              
##  Class :character         Class :character   Class :character         
##  Mode  :character         Mode  :character   Mode  :character         
##                                                                       
##                                                                       
##                                                                       
##                                                                       
##  publication_day publication_month publication_number
##  Min.   : 1.00   Min.   : 1.000    Length:9996       
##  1st Qu.: 8.00   1st Qu.: 4.000    Class :character  
##  Median :16.00   Median : 7.000    Mode  :character  
##  Mean   :15.68   Mean   : 6.608                      
##  3rd Qu.:23.00   3rd Qu.:10.000                      
##  Max.   :31.00   Max.   :12.000                      
##  NA&amp;#39;s   :30      NA&amp;#39;s   :30                          
##  publication_number_espacenet_links publication_year title_cleaned     
##  Length:9996                        Min.   :1940     Length:9996       
##  Class :character                   1st Qu.:1999     Class :character  
##  Mode  :character                   Median :2005     Mode  :character  
##                                     Mean   :2003                       
##                                     3rd Qu.:2009                       
##                                     Max.   :2015                       
##                                     NA&amp;#39;s   :30                         
##  title_nlp_cleaned  title_nlp_multiword_phrases title_nlp_raw     
##  Length:9996        Length:9996                 Length:9996       
##  Class :character   Class :character            Class :character  
##  Mode  :character   Mode  :character            Mode  :character  
##                                                                   
##                                                                   
##                                                                   
##                                                                   
##  title_original    
##  Length:9996       
##  Class :character  
##  Mode  :character  
##                    
##                    
##                    
## &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;5.The class of R object&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class()&lt;/code&gt; is one of the most useful functions in R because it tells you what kind of object or vectors you are dealing with. R vectors are normally either character, numeric, or logical (TRUE, FALSE) but classes also include integers and factors. Most of the time patent data is of either the character type or a date.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;tbl_df&amp;quot;     &amp;quot;tbl&amp;quot;        &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;4. &lt;code&gt;str&lt;/code&gt; - See the structure&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As you become more familiar with R the function &lt;code&gt;str()&lt;/code&gt; becomes one of the most useful for examining the structure of your data. For example, using str we can see whether an object we are working with is a simple vector, a list of objects or a list that contains a set of data frames (e.g.) tables. If things don’t seem to be working then &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;str&lt;/code&gt; will often help you to understand why not.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(pizza, max.level = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These options illustrate the range of ways that you can view the data before and during graphing. Mainly what will be needed is the column names but we also need to think about the column types.&lt;/p&gt;
&lt;p&gt;If we inspect this data using &lt;code&gt;str(pizza)&lt;/code&gt; we will see that the bulk of the fields are character fields. One feature of patent data is that it rarely includes actual numeric fields (such as counts). Most fields are character fields such as names or alphanumeric values (such as publication numbers e.g. US20151234A1). Sometimes we see counts such as citing documents or family members but most of the time our fields are character fields or dates. A second common feature of patent data is that some fields are concatenated. That is the cells in a column contain more than one value (e.g. multiple inventor or applicant names etc.).&lt;/p&gt;
&lt;p&gt;We will walk through how to deal with these common patent data issues in R in other articles. For now, we don’t need to worry about the form of data except that it is normally best to select a column (variable) that is not concatenated with multiple values to develop our counts. So as a first step we will quickly create a numeric field from the &lt;code&gt;publication_number&lt;/code&gt; field in &lt;code&gt;pizza&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-numeric-field&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a numeric field&lt;/h2&gt;
&lt;p&gt;To create a numeric field for graphing we will need to do two things&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;add a column&lt;/li&gt;
&lt;li&gt;assign each cell in that column a value that we can then count.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The most obvious field to use as the basis for counting in the pizza data is the &lt;code&gt;publication_number&lt;/code&gt; field because typically this contains unique alphanumeric identifiers.&lt;/p&gt;
&lt;p&gt;To create a numeric field we will use the &lt;code&gt;dplyr&lt;/code&gt; package. &lt;code&gt;dplyr&lt;/code&gt; and its sister package &lt;code&gt;tidyr&lt;/code&gt; are some of the most useful packages available for working in R and come with a handy &lt;a href=&#34;http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&#34;&gt;RStudio Cheatsheet&lt;/a&gt; and &lt;a href=&#34;http://www.rstudio.com/resources/webinars/archives/#&#34;&gt;webinar&lt;/a&gt;. To see what the functions in &lt;code&gt;dplyr&lt;/code&gt; are then click on its name in the packages pane.&lt;/p&gt;
&lt;p&gt;Just for future reference the main functions are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;filter (to select rows in a data)&lt;/li&gt;
&lt;li&gt;select (to select the columns you want to work with)&lt;/li&gt;
&lt;li&gt;mutate (to add columns based on other columns)&lt;/li&gt;
&lt;li&gt;arrange (to sort)&lt;/li&gt;
&lt;li&gt;group_by( to group data)&lt;/li&gt;
&lt;li&gt;count (to easily summarise data on a value)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;dplyr&#39;s&lt;/code&gt; &lt;code&gt;mutate&lt;/code&gt; function allows us to add a new column based on the values contained in one or more of the other columns in the dataset. We will call this new variable &lt;code&gt;n&lt;/code&gt; and we could always rename it in the graphs later on. There are quite a variety of ways of creating counts in R but this is one of the easiest. The mutate function is really very useful and worth learning.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza &amp;lt;- mutate(pizza, record_count = sum(publication_number = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we have done here is to tell R that we want to use the &lt;code&gt;mutate()&lt;/code&gt; function. We have then passed it a series of arguments consisting of:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;our dataset = pizza&lt;/li&gt;
&lt;li&gt;record_count = the result of the function sum() which is the sum of publication_number giving the value 1 to each number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pizza &amp;lt;-&lt;/code&gt; this tells R to create an object (a data frame) called &lt;code&gt;pizza&lt;/code&gt; containing the results. If you take a look in the Environment pane you will now see that pizza has 32 variables. Note that we have now modified the data we imported into R although the original data in the file remains the same.
If we now use &lt;code&gt;View(pizza)&lt;/code&gt; we will see a new column called &lt;code&gt;record_count&lt;/code&gt; with a value of 1 for each entry.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;renaming-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Renaming Columns&lt;/h3&gt;
&lt;p&gt;We will be doing quite a lot of work with the &lt;code&gt;publication_country_name&lt;/code&gt; field, so let’s make our lives a bit easier by renaming it with the &lt;code&gt;dplyr&lt;/code&gt; function &lt;code&gt;rename()&lt;/code&gt;. We will also do the same for the &lt;code&gt;publication_country_code&lt;/code&gt; and publication_year. Note that it is easy to create labels for graphs with ggplot so we don’t need to worry about renaming column names too much. We can rename them again later if saving the file to a new &lt;code&gt;.csv&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
pizza &amp;lt;- rename(pizza, pubcountry = publication_country_name, pubcode = publication_country_code, 
    pubyear = publication_year)
head(pizza)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 27
##   applicants_organ… ipc_class ipc_codes ipc_names ipc_original ipc_subclass_co…
##   &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;           
## 1 &amp;lt;NA&amp;gt;              A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 2 &amp;lt;NA&amp;gt;              A21: Bak… A21B 3/13 A21B 3/1… A21B 3/13    A21B            
## 3 &amp;lt;NA&amp;gt;              A21: Bak… A21C 15/… A21C 15/… A21C 15/04   A21C            
## 4 Lazarillo De Tor… A21: Bak… A21D 13/… A21D 13/… A21D 13/00;… A21D; A23L      
## 5 &amp;lt;NA&amp;gt;              B65: Con… B65D 21/… B65D 21/… B65D 21/032… B65D            
## 6 &amp;lt;NA&amp;gt;              B65: Con… B65D 85/… B65D 85/… B65D 85/36   B65D            
## # ... with 21 more variables: ipc_subclass_detail &amp;lt;chr&amp;gt;,
## #   ipc_subclass_names &amp;lt;chr&amp;gt;, priority_country_code &amp;lt;chr&amp;gt;,
## #   priority_country_code_names &amp;lt;chr&amp;gt;, priority_data_original &amp;lt;chr&amp;gt;,
## #   priority_date &amp;lt;chr&amp;gt;, pubcode &amp;lt;chr&amp;gt;, pubcountry &amp;lt;chr&amp;gt;,
## #   publication_date &amp;lt;chr&amp;gt;, publication_date_original &amp;lt;chr&amp;gt;,
## #   publication_day &amp;lt;int&amp;gt;, publication_month &amp;lt;int&amp;gt;, publication_number &amp;lt;chr&amp;gt;,
## #   publication_number_espacenet_links &amp;lt;chr&amp;gt;, pubyear &amp;lt;int&amp;gt;,
## #   title_cleaned &amp;lt;chr&amp;gt;, title_nlp_cleaned &amp;lt;chr&amp;gt;,
## #   title_nlp_multiword_phrases &amp;lt;chr&amp;gt;, title_nlp_raw &amp;lt;chr&amp;gt;,
## #   title_original &amp;lt;chr&amp;gt;, record_count &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;selecting-columns-for-plotting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Selecting Columns for plotting&lt;/h3&gt;
&lt;p&gt;We could now simply go ahead and work with pizza. However, for datasets with many columns or requiring different kinds of counts it can be much easier to simply select the columns we want to work with to reduce clutter. We can use the &lt;code&gt;select()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt; to do this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
p1 &amp;lt;- pizza %&amp;gt;% select(., pubcountry, pubcode, pubyear, record_count)
head(p1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   pubcountry                 pubcode pubyear record_count
##   &amp;lt;chr&amp;gt;                      &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;        &amp;lt;dbl&amp;gt;
## 1 United States of America   US         2009           1.
## 2 United States of America   US         2014           1.
## 3 United States of America   US         2013           1.
## 4 European Patent Office     EP         2007           1.
## 5 United States of America   US         2003           1.
## 6 Patent Co-operation Treaty WO         2002           1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;dplyr&lt;/code&gt; will exclude columns that are not mentioned when using select. This is one of the purposes of &lt;code&gt;select&lt;/code&gt; as a function. For that reason you will probably want to rename the object (in this case as p1). If we used the name &lt;code&gt;pizza&lt;/code&gt; for the object our original table would be reduced to the 4 columns specified by &lt;code&gt;select&lt;/code&gt;. Type &lt;code&gt;?select&lt;/code&gt; in the console for further details.&lt;/p&gt;
&lt;p&gt;We now have a data frame with 9,996 rows and 4 variables (columns). Use &lt;code&gt;View(p1)&lt;/code&gt; or simply enter &lt;code&gt;p1&lt;/code&gt; into the console to take a look.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-counts&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating Counts&lt;/h2&gt;
&lt;p&gt;To make life even easier for ourselves we can use function &lt;code&gt;count()&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; to group the data onto counts by different variables for graphing. Note that we could defer counting until later, however, this is a good opportunity to learn more about &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s go ahead and construct some counts using &lt;code&gt;p1&lt;/code&gt;. At the same time we will use quick plot (&lt;code&gt;qplot&lt;/code&gt;) for some exploratory plotting of the results. In the course of this R will show error warnings in red for missing values. We will be ignoring the warning because they are often R telling us things it things we need to know.&lt;/p&gt;
&lt;div id=&#34;total-by-year&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Total by Year&lt;/h3&gt;
&lt;p&gt;What if we wanted to know the overall total for our sample data by publication year. Try the following.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pt &amp;lt;- count(p1, pubyear, wt = record_count)
head(pt)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   pubyear     n
##     &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1    1940    1.
## 2    1954    1.
## 3    1956    1.
## 4    1957    1.
## 5    1959    1.
## 6    1962    1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now view &lt;code&gt;pt&lt;/code&gt; (either by using &lt;code&gt;View(pt)&lt;/code&gt;, noting the capital V, or clicking &lt;code&gt;pt&lt;/code&gt; in the Environment pane) we will see that R has dropped the country columns to present us with an overall total by year in &lt;code&gt;n&lt;/code&gt;. We now have a general overview of the data for graphing.&lt;/p&gt;
&lt;p&gt;Let’s go ahead and quickly plot that using the &lt;code&gt;qplot()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;qplot(x = pubyear, y = n, data = pt, geom = &amp;quot;line&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2015-06-25-wrangling-pizza-patents-in-R_files/figure-html/fig1_ggplot1-1.png&#34; width=&#34;800px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Round Up&lt;/h3&gt;
&lt;p&gt;That’s it. You may feel at the end of this post that this was a lot of work to get to a very simple graph. But, in reality, it is the data preparation that takes the time. In the next post we will focus in on creating different kinds of graph in ggplot2 and some of the challenges that we encounter along the way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reading and Writing an Excel File in R</title>
      <link>/reading-writing-excel-files-r/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/reading-writing-excel-files-r/</guid>
      <description>&lt;p&gt;This post was updated in 2018 and you can read it &lt;a href=&#34;http://www.pauloldham.net/importing-excel-data-into-r-updated/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://cran.r-project.org/doc/manuals/r-release/R-data.html#Reading-Excel-spreadsheets&#34;&gt;CRAN Project&lt;/a&gt; has the following to say about importing Excel files into R.&lt;/p&gt;
&lt;p&gt;“The first piece of advice is to avoid doing so if possible! If you have access to Excel, export the data you want from Excel in tab-delimited or comma-separated form, and use read.delim or read.csv to import it into R. (You may need to use read.delim2 or read.csv2 in a locale that uses comma as the decimal point.).”&lt;/p&gt;
&lt;p&gt;This is very sound advice. The best option when dealing with Excel is generally to use &lt;code&gt;save as&lt;/code&gt; to save the file as a .csv and then import it into R. However, there are a number of ways of reading an Excel file into R. We will deal with two of them in this walk through focusing on the patent datasets in our &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDNThTWU1QQVYyRnM&amp;amp;authuser=0&#34;&gt;open access patent datasets folder&lt;/a&gt;. Download the GitHub .zip file &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/datasets.zip?raw=true&#34;&gt;here&lt;/a&gt;. Feel free to use your own dataset.&lt;/p&gt;
&lt;p&gt;One challenge with R and Excel files is that no one package seems to do everything that you want. In particular, reading from URLs is a bit of a minefield particularly on secure connections (&lt;code&gt;https:&lt;/code&gt;). If this walk through doesn’t meet your needs then try this R-bloggers &lt;a href=&#34;http://www.r-bloggers.com/read-excel-files-from-r/&#34;&gt;overview&lt;/a&gt; on the range of available packages. The &lt;a href=&#34;http://www.r-bloggers.com/search/excel&#34;&gt;R-bloggers excel topic listing&lt;/a&gt; also has lots of useful articles covering working with Excel in more depth than this short article. To find additional help try &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;stackoverflow&lt;/a&gt;.
We will focus on:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Using the &lt;a href=&#34;http://www.r-bloggers.com/importexport-data-to-and-from-xlsx-files/&#34;&gt;xlsx&lt;/a&gt; package&lt;/li&gt;
&lt;li&gt;Testing the new &lt;a href=&#34;http://blog.rstudio.org/2015/04/15/readxl-0-1-0/&#34;&gt;readxl&lt;/a&gt; package&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To read an Excel file into R first install the package or tick the box in the Packages list to load it or load the library.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;xlsx&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Load the library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(xlsx)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: rJava&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: xlsxjars&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use your own local excel file but we will use the file &lt;a href=&#34;https://drive.google.com/file/d/0B4piiKOCkRPDNWhrdGxXc0YwTk0/view?usp=sharing&#34;&gt;wipotrends&lt;/a&gt; in the &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDNWhrdGxXc0YwTk0&amp;amp;authuser=0&#34;&gt;patent dataset folder&lt;/a&gt; for this example. Other test Excel datasets in the folder are &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDZGZ4dlJsVEN4TEk&amp;amp;authuser=0&#34;&gt;ewaste&lt;/a&gt; and &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDMUVSaFJtdXlOX28&amp;amp;authuser=0&#34;&gt;solarcooking&lt;/a&gt;. Download the file and save it to your computer. Then copy the local file path.&lt;/p&gt;
&lt;div id=&#34;reading-a-local-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading a local file&lt;/h2&gt;
&lt;p&gt;We will use a file called &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDNWhrdGxXc0YwTk0&amp;amp;authuser=0&#34;&gt;wipotrends&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s open the file up to inspect it briefly. We will see that it contains one worksheet and that the column headings begin at row 5. To load it into R we will use the &lt;code&gt;read.xlxs&lt;/code&gt; function and specify arguments to tell R where to look for and handle the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wipotrends &amp;lt;- read.xlsx(&amp;quot;/Users/pauloldham17inch/Desktop/open_source_master/2_datasets/wipo/wipotrends.xlsx&amp;quot;, sheetIndex = 1, startRow = 5, endRow = 23, as.data.frame = TRUE, header=TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sheetIndex = n&lt;/code&gt; tells R to import the first worksheet (working numerically). &lt;code&gt;startRow = n&lt;/code&gt; tells R where to start reading the data (if not the first row).
&lt;code&gt;endRow = n&lt;/code&gt; tells R where to stop reading the data. Note that in this case the data stops at row 23 from the first row. You do not need to specify this value but in some cases R will read in NA values for extra rows below the actual data (try excluding &lt;code&gt;endRow =&lt;/code&gt; and reimport the data to test this)
&lt;code&gt;as.data.frame =&lt;/code&gt; tells R whether to convert the data into a data frame. Generally this is a good thing. The default will import the data as a list.
&lt;code&gt;header = TRUE&lt;/code&gt; tells R whether or not there are column headings in the start row.&lt;/p&gt;
&lt;p&gt;In general it is good practice in your work to create Excel workbooks with 1 sheet and headings in the first row. However, as we can see from the WIPO example, reality tends to be different. That means that it is important to inspect and clean the data before hand. Keep a copy of the original file for reference by creating a .zip file. Other things to consider are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Checking for corrupted characters and correcting them using find and replace in Excel or Open Office (see this &lt;a href=&#34;https://youtu.be/YYaMEbJW7Qw?list=PLsZOGmKUMi54n8R06U1HmxNywt0bAFays&#34;&gt;video&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Tidy up column names by removing characters such as ‘&#39; or brackets that could cause problems (for example R will generally import &lt;code&gt;inventor(s)&lt;/code&gt; as &lt;code&gt;inventor.s&lt;/code&gt;). Consider removing blank spaces in column titles or replacing with’_’ and regularising the case (e.g. all lower case ). This will make life easier later.&lt;/li&gt;
&lt;li&gt;Dealing with any leading or trailing spaces using TRIM() in Excel or Open Office.&lt;/li&gt;
&lt;li&gt;Filling blank cells with NA (see this quick &lt;a href=&#34;https://youtu.be/40isuia2w3w?list=PLsZOGmKUMi54n8R06U1HmxNywt0bAFays&#34;&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Any formulas, such as column or row sum functions, may not be wanted and could cause confusion when you run your own calculations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above preparation steps will generally take a few minutes but can save a lot of work later on. Jeff Leek provides a very good guide to preparatory steps in &lt;a href=&#34;https://leanpub.com/datastyle&#34;&gt;The Elements of Data Analytic Style&lt;/a&gt; and we will be following these steps in our patent analysis work.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the other available arguments by calling up the description.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;?read.xlsx()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The range of arguments is below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;read.xlsx(file, sheetIndex, sheetName=NULL, rowIndex=NULL,   startRow=NULL, endRow=NULL, colIndex=NULL,   as.data.frame=TRUE, header=TRUE, colClasses=NA,   keepFormulas=FALSE, encoding=&amp;quot;unknown&amp;quot;, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because Excel workbooks often contain more than one sheet, R needs to know where to find the right sheet. This is generally easy to do by number rather than name using &lt;code&gt;sheetName =&lt;/code&gt;. &lt;code&gt;Row index =&lt;/code&gt; will indicate the rows that you want to extract (if there are specific rows).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;startRow =&lt;/code&gt; will indicate whether to start reading into R from the first row or from a later row. Quite often there are spaces or explanatory text in the top row or rows. It pays to examine the dataset first and count the rows. As a matter of good practice use the first rows for column headings only and put other material elsewhere (a readme text file or a new worksheet called readme).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;endRow =&lt;/code&gt; argument specifies where to stop reading the data.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;colIndex&lt;/code&gt; - indicates the columns that you want to extract. NULL is the default and will import all columns.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;as.data.frame = TRUE&lt;/code&gt; helpfully tells R to create a data frame. If not then a List will be created.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;header = TRUE or FALSE&lt;/code&gt; specifies whether the columns have names. In this case if we had not started at &lt;code&gt;startRow = 5&lt;/code&gt;, the header would have appeared as “Figure.A.1.1.1.Trend.in.patent.applications.worldwide” followed by more text. To try this for yourself change the startRow to 1 and reimport the data giving wipotrends a different name.&lt;/p&gt;
&lt;p&gt;Let’s take a look at &lt;code&gt;wipotrends&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wipotrends&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Year Applications Growth.rate....
## 1  1995      1047700              NA
## 2  1996      1088800             3.9
## 3  1997      1163400             6.9
## 4  1998      1214900             4.4
## 5  1999      1269000             4.5
## 6  2000      1377800             8.6
## 7  2001      1456500             5.7
## 8  2002      1443300            -0.9
## 9  2003      1485800             2.9
## 10 2004      1570100             5.7
## 11 2005      1703600             8.5
## 12 2006      1794300             5.3
## 13 2007      1866000             4.0
## 14 2008      1914800             2.6
## 15 2009      1846800            -3.6
## 16 2010      1987600             7.6
## 17 2011      2149000             8.1
## 18 2012      2347700             9.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In reviewing &lt;code&gt;wipotrends&lt;/code&gt; note that the row numbers refer to data rows (we have excluded the padding in rows 1 -4). If we were spending time with this data we might also want to turn the columns to lowercase and &lt;code&gt;growth rate&lt;/code&gt; to &lt;code&gt;growth_rate&lt;/code&gt; (but see below on &lt;code&gt;readxl&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-excel-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing Excel Files&lt;/h2&gt;
&lt;p&gt;It is generally better to write a .csv file rather than an Excel file because the results can be used in a wider range of tools (including Excel) and will be cleaner (see below). However, to write an Excel file with the new data frame use the &lt;code&gt;write.xlsx()&lt;/code&gt; function. Before running the command it is generally a good idea to use the command &lt;code&gt;getwd()&lt;/code&gt; to display the working directory you are in so that you know where the file will be saved. To change the directory to a new location use &lt;code&gt;setwd(&amp;quot;yourpathtofile&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.xlsx(wipotrends, &amp;quot;yourfilenamepath_new.xlsx&amp;quot;, sheetName=&amp;quot;Sheet1&amp;quot;, col.names = TRUE, row.names = TRUE, append = FALSE, showNA = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a new file called wipotrends_new. Note three points here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Give your file a &lt;strong&gt;new name&lt;/strong&gt; if writing into the same directory. Otherwise R will overwrite your existing file. Assuming you don’t want to overwrite the original give the new file a sensible name.&lt;/li&gt;
&lt;li&gt;If you select &lt;code&gt;row.names = FALSE&lt;/code&gt; R will write a new column with row numbers (in this case)&lt;/li&gt;
&lt;li&gt;Selecting &lt;code&gt;showNA = TRUE&lt;/code&gt; will fill any blank cells with NA. That is useful when coming back into R to tidy up and select data. Blank cells are the enemy of calculations and it is better to fill the cells with a value where possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-excel-to-csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing Excel to CSV&lt;/h2&gt;
&lt;p&gt;While Excel is popular in reality it is better to use .csv when using or sharing data across a range of software tools. To write results into .csv use &lt;code&gt;write.csv()&lt;/code&gt;. Call up the description for write.csv with ?write.csv in console. See the .csv walk through for further details.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(wipotrends, file = &amp;quot;yourfilenamepath_new.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-readxl-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the Readxl package&lt;/h2&gt;
&lt;p&gt;readxl is a new package from RStudio and is still a work in progress. We will cover it here because as the package develops it will become more popular and you are more likely to use it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;readxl&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the moment readxl version 0.1.0 has two functions.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;excel_sheets(path)&lt;/code&gt; where path is the path to the xls/xlsx file. This function will list all the sheets in an excel spreadsheet to help you select the sheet that you want to import.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, if we add a couple of random sheets to wipotrends and then use &lt;code&gt;excel_sheets(&amp;quot;myfilenamepath&amp;quot;)&lt;/code&gt; will provide names that look something like this:&lt;/p&gt;
&lt;p&gt;[1] “Sheet1” “my sheet” “another sheet”&lt;/p&gt;
&lt;p&gt;This is very helpful if you don’t know how many sheets are in a workbook or you want to call them by name.
2. &lt;code&gt;read_excel()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readxl)
read_wipo &amp;lt;- read_excel(&amp;quot;/Users/pauloldham17inch/Desktop/WIPO_Training/training_datasets/wipo/wipotrends.xlsx&amp;quot;, col_names = TRUE, na = &amp;quot;&amp;quot;,  skip = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we read in this file and print it to the console we will notice something unusual.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read_wipo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 17 x 3
##    `1995` `1047700`   X__1
##     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1  1996.  1088800.  3.90 
##  2  1997.  1163400.  6.90 
##  3  1998.  1214900.  4.40 
##  4  1999.  1269000.  4.50 
##  5  2000.  1377800.  8.60 
##  6  2001.  1456500.  5.70 
##  7  2002.  1443300. -0.900
##  8  2003.  1485800.  2.90 
##  9  2004.  1570100.  5.70 
## 10  2005.  1703600.  8.50 
## 11  2006.  1794300.  5.30 
## 12  2007.  1866000.  4.00 
## 13  2008.  1914800.  2.60 
## 14  2009.  1846800. -3.60 
## 15  2010.  1987600.  7.60 
## 16  2011.  2149000.  8.10 
## 17  2012.  2347700.  9.20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is while we have specified that &lt;code&gt;col_names = TRUE&lt;/code&gt; and &lt;code&gt;skip = 5&lt;/code&gt; the function has not returned the column names in the dataset. While this is a bit puzzling ( the package was released less than a month ago), it suggests that it is still a work in progress. Unless this is a glitch with our data then one option would be to specify &lt;code&gt;col_names = FALSE&lt;/code&gt; and then rename the &lt;code&gt;X0   X1   X2&lt;/code&gt; column names that are generated. readr is under active development and you can follow its progress &lt;a href=&#34;%22https://github.com/hadley/readxl%22&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a useful reminder of one of the important principles of clean and tidy data. The first row should contain the column names.&lt;/p&gt;
&lt;p&gt;Bear in mind that readxl may struggle with reading dates correctly, but expect that to also change in the future.&lt;/p&gt;
&lt;p&gt;At the time of writing there is no &lt;code&gt;write_excel&lt;/code&gt; function but expect that to change.&lt;/p&gt;
&lt;p&gt;The main advantage of &lt;code&gt;read_excel&lt;/code&gt; (as with &lt;code&gt;read_csv&lt;/code&gt; in the &lt;code&gt;readr&lt;/code&gt; package) is that the data imports into an easy to print object with three attributes a &lt;code&gt;tbl_df&lt;/code&gt; a &lt;code&gt;tbl&lt;/code&gt; and a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are using &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; (and we assume that you will be) then the creation of a tbl_df makes life much easier.&lt;/p&gt;
&lt;p&gt;In summary, readxl is a welcome development for those who prefer using Excel (or are forced too), but it is very recent. It’s main strength is the ability to easily see what worksheets are in a workbook and also the automatic creation of a data frame or data frame table at the time of import. The absence of a write function will hopefully encourage hardened Excel uses to adopt comma separated or tab delimited files as their standard and to take advantage of the fuller functionality of the &lt;code&gt;readr&lt;/code&gt; package. You know it makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-excel-files-from-url-locations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading Excel files from URL locations&lt;/h2&gt;
&lt;p&gt;It is faster to simply download the file to your drive, or swim the Atlantic ocean, than to successfully download an excel file on http: or, in particular https:. So maybe ask yourself what is the path of least resistance and run with that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-help-and-further-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Help and Further Resources&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;For additional functionality experiment with the very useful &lt;strong&gt;XLConnect&lt;/strong&gt; package in Packages. Read the documentation on &lt;a href=&#34;http://cran.r-project.org/web/packages/XLConnect/index.html&#34;&gt;CRAN&lt;/a&gt;. This adds a lot of functionality in working with Excel files in R.&lt;/li&gt;
&lt;li&gt;See the R-bloggers &lt;a href=&#34;http://www.r-bloggers.com/read-excel-files-from-r/&#34;&gt;overview&lt;/a&gt; article on the range of packages for working with Excel files.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Paul Oldham&lt;/li&gt;
&lt;li&gt;Updated 13/05/2015&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Importing CSV files into R</title>
      <link>/importing-csv-files-into-r/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/importing-csv-files-into-r/</guid>
      <description>&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a-quick-2018-update&#34;&gt;A Quick 2018 Update&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-in-a-file-using-read.table-utils-package&#34;&gt;Reading in a file using read.table (&lt;code&gt;utils&lt;/code&gt; package)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-a-.csv-from-the-web&#34;&gt;Reading a .csv from the web&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#downloading-from-google-drive&#34;&gt;Downloading From Google Drive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#downloading-from-github&#34;&gt;Downloading from GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-a-.csv-file&#34;&gt;Writing a .csv file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reading-in-multiple-.csv-files&#34;&gt;Reading in multiple .csv files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#using-the-new-readr-package.&#34;&gt;Using the new &lt;code&gt;readr&lt;/code&gt; package.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#writing-a-.csv-file-using-write_csv&#34;&gt;Writing a .csv file using &lt;code&gt;write_csv()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#round-up&#34;&gt;Round Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;a-quick-2018-update&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A Quick 2018 Update&lt;/h2&gt;
&lt;p&gt;This post is now showing its age and was the first thing I wrote about R. Everything still works but readr, which was brand new at the time, has made a big difference. I now suggest the importing local csv files into RStudio using &lt;code&gt;File &amp;gt; Import &amp;gt; From Text (readr)&lt;/code&gt; as it is by far the easiest way to import files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If that fails consult the &lt;code&gt;readr&lt;/code&gt; documentation and review the arguments.&lt;/li&gt;
&lt;li&gt;If that fails try the base R &lt;code&gt;read.csv()&lt;/code&gt; making sure to set &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; unless you really want factors.&lt;/li&gt;
&lt;li&gt;When working with very large datasets use &lt;code&gt;fread()&lt;/code&gt; from the &lt;code&gt;data.table&lt;/code&gt; package… it rocks… but study the arguments.&lt;/li&gt;
&lt;li&gt;If looking at importing from online sources such as GitHub or Google Drive the approach below normally works fine.&lt;/li&gt;
&lt;li&gt;If you are working with Googlesheets the go to package is &lt;code&gt;googlesheets&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If looking to import multiple files at the same time the approach below will work well (but the steps could be joined together)… e.g. if you are doing the Coursera R course.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will update the post properly when time permits.&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;As part of the &lt;a href=&#34;https://github.com/wipo-analytics&#34;&gt;WIPO Manual on Open Source Patent Analytics project&lt;/a&gt; we will be working with patent data in R using &lt;a href=&#34;http://www.rstudio.com&#34;&gt;RStudio&lt;/a&gt;. If you do not have a copy of RStudio follow the simple instructions for installing on your platform &lt;a href=&#34;http://www.rstudio.com/products/rstudio/download/&#34;&gt;here&lt;/a&gt;. There are lots of resources on the site to help you get started including &lt;a href=&#34;http://www.rstudio.com/resources/training/online-learning/&#34;&gt;online learning&lt;/a&gt;, &lt;a href=&#34;http://www.rstudio.com/resources/webinars/&#34;&gt;videos&lt;/a&gt;, and &lt;a href=&#34;http://www.rstudio.com/resources/cheatsheets/&#34;&gt;cheatsheets&lt;/a&gt;. The excellent &lt;a href=&#34;http://www.r-bloggers.com&#34;&gt;R-Bloggers site&lt;/a&gt; will demonstrate why it is worth investing time in R when working with patent data.&lt;/p&gt;
&lt;p&gt;Comma separated value files (or .csv) files are one of the most common and useful ways for sharing data. This includes patent data.&lt;/p&gt;
&lt;p&gt;This walk through covers the basics of importing .csv files into R and writing .csv files. We will use the freely available &lt;a href=&#34;https://drive.google.com/open?id=0B4piiKOCkRPDRlBlcGpxR0tMTms&amp;amp;authuser=0&#34;&gt;ritonavir&lt;/a&gt; patent dataset as the example. You can grab the datasets by either forking or downloading the &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics&#34;&gt;GitHub repository&lt;/a&gt; or downloading the &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/blob/master/2_datasets/datasets.zip?raw=true&#34;&gt;zip file&lt;/a&gt;. While we use patent data as the example, this will work for other types of .csv data.&lt;/p&gt;
&lt;p&gt;We will cover the following approaches to importing and writing .csv files here:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Importing .csv files from local directories using the standard read.table in the utils package.&lt;/li&gt;
&lt;li&gt;Writing .csv files using &lt;code&gt;write.csv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Importing multiple .csv files using &lt;code&gt;lapply()&lt;/code&gt; and &lt;code&gt;ldply()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Importing and writing .csv files using the new &lt;a href=&#34;http://blog.rstudio.org/2015/04/09/readr-0-1-0/&#34;&gt;readr&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;Downloading a .csv file from a URL, focusing on https: connections, using &lt;code&gt;Rcurl&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That should cover most needs. If you find that you are stuck with a function try calling the description for a particular function (?read.csv) or try &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;stackoverflow.com&lt;/a&gt; results tagged R or from a Google search (often the quickest route).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-a-file-using-read.table-utils-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in a file using read.table (&lt;code&gt;utils&lt;/code&gt; package)&lt;/h2&gt;
&lt;p&gt;Reading in a .csv file is easy and is part of &lt;code&gt;read.table&lt;/code&gt; in the R &lt;code&gt;utils&lt;/code&gt; package (installed by default). We can simply read in a .csv by creating an object linked to the function &lt;code&gt;read.csv()&lt;/code&gt; followed by the path to the local file as follows. You will need to download the file from the link above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir &amp;lt;- read.csv(&amp;quot;yourfilenamepath.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some European countries the delimiter in a .csv is a semicolon “;” and not a comma. In the unlikely event you come across these files use &lt;code&gt;read.csv2()&lt;/code&gt; as above instead of &lt;code&gt;read.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You now have a dataset called ritonavir in R. That is how easy it is. You can take a look at the data by simply typing ritonavir into the console. What you will see is a mass of data.
We can improve on that by using &lt;code&gt;head(ritonavir)&lt;/code&gt; but it is still a little difficult to view. We will come back to this in turning the data into a table data frame (&lt;code&gt;tbl_df()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;First, let’s look at the function read.csv. R functions have settings called arguments that can be used to control what is going on.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`?`(read.csv)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;read.csv(file, header = TRUE, sep = &amp;quot;,&amp;quot;, quote = &amp;quot;\&amp;quot;&amp;quot;, dec = &amp;quot;.&amp;quot;, fill = TRUE, comment.char = &amp;quot;&amp;quot;, ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The arguments for this function can be very useful, for example,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;header = TRUE or FALSE&lt;/code&gt;. Determines whether or not to import column headings from the first row.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sep = &amp;quot;,&amp;quot;&lt;/code&gt; . The separator for the values in each row.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;...&lt;/code&gt; refers to additional arguments that might be applied. Among the most important of these using this function are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;. To prevent character columns being converted to factors. This is actually a lot more important than it sounds, and will generally be your default.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na.strings = &amp;quot;NA&amp;quot;&lt;/code&gt;. NA refers to not available. In some cases this needs to be expanded to cover blank cells in the source data. for example &lt;code&gt;c(&amp;quot;NA&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;&amp;quot;)&lt;/code&gt; captures cells containing “NA”, cells with only a space &amp;quot; &amp;quot; or empty cells &amp;quot;&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip.white = TRUE&lt;/code&gt;. This will strip leading and trailing white space. Note that this will only work if you have specified sep = in the arguments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip = n&lt;/code&gt;. Specify the number of lines to skip before the data starts. Very useful for data tables with blank rows or text padding at the top of files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This means that we would often want a &lt;code&gt;read.csv()&lt;/code&gt; function with the following additional arguments for our file. In this case we are reading the data in directly from the datasets repository &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/tree/master/2_datasets&#34;&gt;here&lt;/a&gt;. Where the file is located on your computer you will need to enter the file path. If you are a Windows user your file path will contain back slashes. These need to be changed to forward slashes as back slashes are an escape character on every other system (yes it really is a pain).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir &amp;lt;- read.csv(&amp;quot;https://github.com/poldham/opensource-patent-analytics/raw/master/2_datasets/ritonavir/ritonavir.csv&amp;quot;, 
    sep = &amp;quot;,&amp;quot;, na.strings = &amp;quot;NA&amp;quot;, strip.white = TRUE, stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note here that the use of &lt;code&gt;sep = &amp;quot;,&amp;quot;&lt;/code&gt; is the condition for stripping leading and trailing white space on import using &lt;code&gt;strip.white = TRUE&lt;/code&gt;. &lt;code&gt;strip.white&lt;/code&gt; won’t work without the &lt;code&gt;sep&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you intend to split the inventor and applicant data following import you may want to wait because the process will generate white space. It is always possible to write a .csv file after the cleaning process and reimport it with &lt;code&gt;strip.white&lt;/code&gt; set to TRUE along with &lt;code&gt;sep= &amp;quot;,&amp;quot;&lt;/code&gt;. We will write a .csv file below.&lt;/p&gt;
&lt;p&gt;We have not specified &lt;code&gt;skip = n&lt;/code&gt; in the above as the column headers are in the first row in the original data. But, there are lots of occasions when skip can be useful.&lt;/p&gt;
&lt;p&gt;Lets look at the type or class of object that has been created from our latest import.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(ritonavir)  ##class is &amp;#39;data.frame&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we print the ritonavir R object we will get the first 500 rows of data. Try entering ritonavir in your console.&lt;/p&gt;
&lt;p&gt;That is not terribly helpful because we are overwhelmed with information and can’t see everything as a snap shot. The solution to this is to install and load &lt;code&gt;dplyr&lt;/code&gt; package. We will be using this package a lot in the patent analysis tutorials so, if you don’t have it already, now is a good time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;load the package&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now use the &lt;code&gt;tbl_df()&lt;/code&gt; function to create an easy to read dataframe table (&lt;code&gt;tbl_df()&lt;/code&gt;) using our ritonavir dataset that lists columns as characters.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavirtbl &amp;lt;- tbl_df(ritonavir)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates an easy to read table dataframe.&lt;/p&gt;
&lt;p&gt;If we print the frame we will now have readable content.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavirtbl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 804 x 20
##    row.no publication.numb… kind.code title   priority.docume… priority.country
##     &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;           
##  1      1 AU2007202956      B2        Polymo… AU19990050037    Australia       
##  2      2 CA2425495         A1        ANTI-R… CA2425495        Canada          
##  3      3 CN101440091       A         Ritona… CN20081072486    China           
##  4      4 CN101613325       A         Proces… CN20081031608    China           
##  5      5 CN1247554         C         Proces… CN20031121091    China           
##  6      6 DE10131036        A1        Medici… DE20011031036    Germany         
##  7      7 DE10145361        A1        Steril… DE20011045361    Germany         
##  8      8 DE102005012681    A1        New 1,… DE200510012681   Germany         
##  9      9 DE102007030695    A1        Co-cry… DE200710063623   Germany         
## 10     10 EP0490667         B1        HIV pr… JP19900409673    Japan           
## # ... with 794 more rows, and 14 more variables: earliest.priority.date &amp;lt;chr&amp;gt;,
## #   earliest.priority.year &amp;lt;int&amp;gt;, application.date &amp;lt;chr&amp;gt;,
## #   publication.date &amp;lt;chr&amp;gt;, publication.year &amp;lt;int&amp;gt;, applicant &amp;lt;chr&amp;gt;,
## #   inventors &amp;lt;chr&amp;gt;, ipc.classes &amp;lt;chr&amp;gt;, family.members &amp;lt;chr&amp;gt;,
## #   family.size &amp;lt;int&amp;gt;, family.size.1 &amp;lt;int&amp;gt;, wo.in.family &amp;lt;chr&amp;gt;,
## #   grant.or.application.type.families &amp;lt;chr&amp;gt;, granted.patent &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is a lot easier to read than our original (try typing ritonavir into the console to take a look, then try ritonavirtbl).&lt;/p&gt;
&lt;p&gt;There are two points to note here.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Spaces in column names such as publication number are filled with full stops. Use the new &lt;code&gt;janitor&lt;/code&gt; package &lt;code&gt;clean_names()&lt;/code&gt; function to deal with this.&lt;/li&gt;
&lt;li&gt;More importantly, by default character vectors are converted to factors (characters backed by a hidden number). It therefore makes sense to always use &lt;code&gt;StringsAsFactors = FALSE&lt;/code&gt; unless you actually want columns to import as factors.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-a-.csv-from-the-web&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading a .csv from the web&lt;/h2&gt;
&lt;p&gt;Reading a .csv file from the web is also easy as we have seen above but it can involve some complications. We will cover a couple of cases here. If the URL begins with &lt;code&gt;http:&lt;/code&gt; then it is as simple as entering the URL inside quotes. However, if it is the secure &lt;code&gt;https:&lt;/code&gt; then it is a little bit more of a challenge.&lt;/p&gt;
&lt;div id=&#34;downloading-from-google-drive&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Downloading From Google Drive&lt;/h3&gt;
&lt;p&gt;For example if we try the following it will generally work with &lt;code&gt;http:&lt;/code&gt; but not with &lt;code&gt;https:&lt;/code&gt;. This will simply return an empty object with nothing in it and throw an error &lt;code&gt;Error in read.table(file = file, header = header, sep = sep, quote = quote, : more columns than column names&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir_url &amp;lt;- read.csv(&amp;quot;https://drive.google.com/drive/folders/0B4piiKOCkRPDTGdSQmRMa1BOUEE&amp;quot;, 
    sep = &amp;quot;,&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To deal with this we need to install and load the package RCurl.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;RCurl&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;load the library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(RCurl)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s try again and add a couple of arguments to make it work.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir_url &amp;lt;- download.file(&amp;quot;https://drive.google.com/drive/folders/0B4piiKOCkRPDTGdSQmRMa1BOUEE&amp;quot;, 
    &amp;quot;ritonavir_url.csv&amp;quot;, method = &amp;quot;curl&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case we use &lt;code&gt;download.file&lt;/code&gt; and the URL in quotes, followed by the destination filename (which will download into the current working directory). For this to work without an error we need finally to specify &lt;code&gt;method = &amp;quot;curl&amp;quot;&lt;/code&gt; or an error reading &lt;code&gt;unsupported URL scheme&lt;/code&gt; will appear.&lt;/p&gt;
&lt;p&gt;You now need to navigate to where the file is and import it&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;downloading-from-github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Downloading from GitHub&lt;/h3&gt;
&lt;p&gt;In downloading from GitHub (where the project Google Drive datasets are also located), we have to go a step further. The URL that you see on the page in Github is basically a marker for the data location… not the actual dataset location. To access the actual dataset navigate to the relevant page &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics/blob/master/datasets/ritonavir/ritonavir.csv&#34;&gt;here&lt;/a&gt;. However, then select the Raw button and copy that &lt;em&gt;URL&lt;/em&gt;. The URL should begin with &lt;a href=&#34;https:raw&#34; class=&#34;uri&#34;&gt;https:raw&lt;/a&gt;. as below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir_urlg &amp;lt;- download.file(&amp;quot;https://raw.githubusercontent.com/poldham/opensource-patent-analytics/master/datasets/ritonavir/ritonavir.csv&amp;quot;, 
    &amp;quot;ritonavir_urlg.csv&amp;quot;, method = &amp;quot;curl&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you need to navigate to the file location and import as before.&lt;/p&gt;
&lt;p&gt;As an alternative to this approach in Github it can be easier to simply navigate to the repository (such as &lt;a href=&#34;https://github.com/poldham/opensource-patent-analytics&#34; class=&#34;uri&#34;&gt;https://github.com/poldham/opensource-patent-analytics&lt;/a&gt;) and then select &lt;code&gt;Clone in Desktop&lt;/code&gt; (if you are using GitHub on your local machine) or ‘Download ZIP’. That will download the repository including the relevant datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-.csv-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing a .csv file&lt;/h2&gt;
&lt;p&gt;If we wanted to write this data table to a new .csv file we would use the ‘write.csv()’ command.&lt;/p&gt;
&lt;p&gt;Before we do that a critical point to remember is to give the file a new filename or it will overwrite your original data. It is also worth checking your working directory so that you know where it will be saved.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;getwd()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this is the wrong directory, locate and copy the path for the directory you want and then use &lt;code&gt;setwd()&lt;/code&gt; to set the directory to save the file in.&lt;/p&gt;
&lt;p&gt;To write the file with a new file name we will use &lt;code&gt;write.csv()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(ritonavirtbl, &amp;quot;ritonavirtbl.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will write a file called ritonavirtbl.csv to your working directory. If you take a look at the file note that an extra column will have been added at the beginning (we will come back to that) and column names will now contain full stops instead of spaces.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the options for writing .csv files by calling help.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`?`(write.csv)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;write.csv is a function in &lt;code&gt;write.table&lt;/code&gt;. Let’s take a look at the arguments.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write.table(x, file = &amp;quot;&amp;quot;, append = FALSE, quote = TRUE, sep = &amp;quot; &amp;quot;,             eol = &amp;quot;\n&amp;quot;, na = &amp;quot;NA&amp;quot;, dec = &amp;quot;.&amp;quot;, row.names = TRUE,             col.names = TRUE, qmethod = c(&amp;quot;escape&amp;quot;, &amp;quot;double&amp;quot;),             fileEncoding = &amp;quot;&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A couple of these settings may be useful.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;append = TRUE or FALSE&lt;/code&gt;. Do we want to append the data to an existing file of that name or not? If false and the same filename is used then it will overwrite the existing file. If TRUE it will append the data to the file of the same name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na = &amp;quot;NA&amp;quot;&lt;/code&gt; the string that you want to use for missing data. This may need further definition depending on your data (e.g. &lt;code&gt;na = c(&amp;quot;NA&amp;quot;, &amp;quot; &amp;quot;, &amp;quot;&amp;quot;)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;row.names&lt;/code&gt; and &lt;code&gt;col.names&lt;/code&gt; may be useful depending on your dataset or needs. Note that the default is TRUE. This is generally correct for columns with patent data but not for rows.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;row.names = FALSE&lt;/code&gt; argument is more important than it appears. As Garrett Grolemund points out in &lt;a href=&#34;http://shop.oreilly.com/product/0636920028574.do&#34;&gt;Hands-On Programming with R&lt;/a&gt; every time that you write a .csv file in R it will add a row names column and keep on writing a new column each time you write the file. No one seems to quite understand why that happens but you will not be wanting that to happen. So the suggested default for &lt;code&gt;write.csv()&lt;/code&gt; is&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(ritonavirtbl, &amp;quot;ritonavirtbl.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will prevent R from writing an additional row names column.&lt;/p&gt;
&lt;p&gt;We will now take a look at a somewhat unusual import case. That is importing multiple files. I have left this until after we have worked on writing .csv files because realising that we can import, export and then reimport files into R is an important part of creating effective workflows in future work. Otherwise, we may spend hours in R to achieve something that can be done easily outside R. This particular example provides a good illustration of this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-multiple-.csv-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in multiple .csv files&lt;/h2&gt;
&lt;p&gt;On some occasions we might want to read in multiple .csv files at the same time. Typically this will be where a patent dataset has been split into multiple files. If you would like to follow this discussion then download the &lt;a href=&#34;https://drive.google.com/folderview?id=0B4piiKOCkRPDVUxhVVhkbGtQLVU&amp;amp;usp=sharing&#34;&gt;pizza_sliced dataset&lt;/a&gt; which contains five .csv files plus a ReadMe file.&lt;/p&gt;
&lt;p&gt;Reading in multiple files is a task that is a little trickier than it should be. However, the approach below will work (assuming you have the files in a local folder). My suggestion would be to remove the Read Me file from the downloaded set for this exercise.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizzasliced &amp;lt;- list.files(&amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced&amp;quot;, 
    full.names = TRUE)  ##create a vector of file names to read in
pizzasliced&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_20002002_319.csv&amp;quot;
## [2] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_20032005_366.csv&amp;quot;
## [3] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_20062008_439.csv&amp;quot;
## [4] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_20092012_428.csv&amp;quot;
## [5] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_20132014_274.csv&amp;quot;
## [6] &amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/pizza_sliced/pizza_sliced_codebook.txt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we print pizza sliced we will now see a list of the full name of files including the full path.&lt;/p&gt;
&lt;p&gt;If we check the class of this object using &lt;code&gt;class(pizzasliced)&lt;/code&gt; it will be a character type&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pizzasliced)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we now need to do is to transform this into a list. To do that we will use the function &lt;code&gt;lapply()&lt;/code&gt; for list apply. In this case we are saying “apply list apply to the R character object pizzasliced and then apply the function &lt;code&gt;read.csv&lt;/code&gt; ensuring that headings are included from column names” as below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizzasliced1 &amp;lt;- lapply(pizzasliced, read.csv, header = TRUE, stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lapply will then iterate through and read in the five files to create a new object that we call pizzasliced1. Note that if doing this normally you would probably retain the same name and allow R to overwrite the object as you go along. Here we are showing the steps. If we now investigate the class of R object the answer will be a list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pizzasliced1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;list&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A list is an object that groups together R objects (in this case the data from our files). To demonstrate this if we now try and print pizzasliced1 then we will see an overwhelming amount of information rush by as R prints the five objects in the list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(pizzasliced1)  # try this in your console&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we now need to do is to convert the list into a data.frame. To do that however we need to turn to the &lt;code&gt;dplyr&lt;/code&gt; package and the &lt;code&gt;bind_rows()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Load the library&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now simply apply &lt;code&gt;bind_rows()&lt;/code&gt; to pizzasliced1 to turn the list of objects into a data.frame. We will call that pizzasliced2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizzasliced2 &amp;lt;- bind_rows(pizzasliced1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we print pizzasliced2 into the console we will see another set of data rushing by. However, if we check the class we will see that we now have a data.frame object. A data.frame is actually a list of the class data.frame. To test that try typing &lt;code&gt;typeof(pizzasliced2)&lt;/code&gt; into the console and the result will be “list”).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pizzasliced2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take a look at the top of the dataset using &lt;code&gt;head()&lt;/code&gt;. This will show rather crunched data and column headings&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(pizzasliced2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                                     Title
## 1                                                              PIZZA TRAY
## 2                                 COOKING METHOD OF GREEN-TEA ADDED PIZZA
## 3                                              METHOD FOR COOKING A PIZZA
## 4                          Pizza preparation and delivery method and unit
## 5                                  Method of making laminated pizza crust
## 6 Container for transporting heated food, particularly pizza and the like
##                  Publication.number Publication.date
## 1                       CA93181 (S)       24/08/2001
## 2                 KR20010107868 (A)       07/12/2001
## 3     CA2731260 (A1); CA2731260 (C)       14/09/2000
## 4 US2002048624 (A1); US6858243 (B2)       25/04/2002
## 5                     US6126977 (A)       03/10/2000
## 6 US2002040862 (A1); US6601758 (B2)       11/04/2002
##                                                                                                                           Inventor.s.
## 1                                                                                                                                    
## 2                                                                                                         YOU YEN SIL\x89\xdb\xe2[KR]
## 3                                                       HEDRINGTON JAMES ALAN\x89\xdb\xe2[US];  DRESSEL BRENT WILLIAM\x89\xdb\xe2[US]
## 4 BLANCHET JEAN\x89\xdb\xe2[FR];  CATHELIN HERVE\x89\xdb\xe2[FR];  HEBERT CHRISTIAN\x89\xdb\xe2[FR];  NOUYRIT OLIVIER\x89\xdb\xe2[FR]
## 5                                                                                                      BUBAR RONALD O\x89\xdb\xe2[US]
## 6                                                                                                      LIZZIO FILIPPO\x89\xdb\xe2[IT]
##                            Applicant.s.
## 1 SCHWAN S FOOD MFG INC\x89\xdb\xe2[US]
## 2           YOU YEN SIL\x89\xdb\xe2[KR]
## 3        NAT PRESTO IND\x89\xdb\xe2[US]
## 4             NESTEC SA\x89\xdb\xe2[US]
## 5       PAULUCCI JENO F\x89\xdb\xe2[US]
## 6        TERMOPIZZA SRL\x89\xdb\xe2[US]
##                                                                   International.classification
## 1                                                                                             
## 2                                                                                    A21D13/00
## 3                                                     A23L1/01; A21B1/00; A47J37/04; A47J37/06
## 4 A23L1/48; A21B1/00; A21D8/00; A21D13/00; A21D15/02; B60P3/025; B60P3/14; A23L1/00; A21D13/00
## 5                     A21C3/02; A21C11/00; A21D8/00; A21D8/02; A21D13/00; A21D13/08; A21D13/00
## 6                                         B65D77/04; B65D81/26; B65D85/36; B65D85/36; B65D5/50
##                                                        Cooperative.Patent.Classification
## 1                                                                                       
## 2                                                                                       
## 3                                                                A47J37/0611; A47J37/043
## 4                        A21D13/007; A21B1/00; A21D8/00; A21D15/02; B60P3/0257; B60P3/14
## 5                                A21D13/0061; A21C3/02; A21C11/004; A21D8/02; A21D13/007
## 6 B65D77/0433; B65D81/262; B65D81/263; B65D85/36; B65D2585/366; Y10S229/906; Y10S229/902
##   Application.number Date.of.application
## 1     CANDAT0093181F                   0
## 2      KR20010069326            20011105
## 3      CA20002731260            20000310
## 4      US20010982377            20011018
## 5      US19970968900            19971106
## 6      US20010963393            20010927
##                                Priority.number.s.
## 1                         CANDAT0093181F 00000000
## 2                          KR20010069326 20011105
## 3  US19990267981 19990312; CA20002363329 20000310
## 4                          EP20000122736 20001018
## 5  US19970968900 19971106; US19950496894 19950630
## 6 IT2000TO00900 20000928; IT2001TO00008U 20010119
atents.cited.in.the.search.report


## 3                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  

## 5 US628449 (A); US969173 (A); US1174826 (A); US1179294 (A); US1646921 (A); US2089396 (A); US2509035 (A); US2668767 (A); US3143424 (A); US3235390 (A); US3677769 (A); US3845219 (A); US3880069 (A); US4020184 (A); US4205091 (A); US4283424 (A); US4283431 (A); US4308286 (A); US4313961 (A); US4416910 (A); US4463020 (A); US4551337 (A); US4574090 (A); US4626188 (A); US4645673 (A); US4661361 (A); US4696823 (A); US4753813 (A); US4842882 (A); US4907501 (A); US5104669 (A); US5180603 (A); US5182123 (A); US5194273 (A); US5196223 (A); US5268188 (A); US5348751 (A); US5405626 (A); US5417150 (A); US5417996 (A); US5529799 (A); US5560946 (A); DE3704192 (A1); GB2241863 (A)
## 6                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               US3026209 (A); US3515331 (A); US4197940 (A); US4441626 (A); US4883195 (A); US5052559 (A); US5385292 (A); US5445286 (A); US5482724 (A); US5588587 (A); US5895698 (A); EP0989067 (A1)
##   Literature.cited.in.the.search.report Patents.cited.during.examination
## 1                                                                       
## 2                                                                       
## 3                                                                       
## 4                                                                       
## 5                                                                       
## 6                                                                       
##   Literature.cited.during.examination Other.patent.citations
## 1                                  NA                     NA
## 2                                  NA                     NA
## 3                                  NA                     NA
## 4                                  NA                     NA
## 5                                  NA                     NA
## 6                                  NA                     NA
##   Other.literature.citations Patents.used.in.opposition
## 1                         NA                       &amp;lt;NA&amp;gt;
## 2                         NA                       &amp;lt;NA&amp;gt;
## 3                         NA                       &amp;lt;NA&amp;gt;
## 4                         NA                       &amp;lt;NA&amp;gt;
## 5                         NA                       &amp;lt;NA&amp;gt;
## 6                         NA                       &amp;lt;NA&amp;gt;
##   Literature.used.in.opposition                Patents.cited.by.the.applicant
## 1                            NA                                              
## 2                            NA                                              
## 3                            NA                                              
## 4                            NA US4361227 (A); US4791861 (A); JPH09299017 (A)
## 5                            NA                                              
## 6                            NA                                              
##   Literature.cited.by.the.applicant International.search.citation
## 1                                NA                              
## 2                                NA                              
## 3                                NA                              
## 4                                NA                              
## 5                                NA                              
## 6                                NA                              
##   International.search.NPL.citation Supplementary.international.search.citation
## 1                                                                            NA
## 2                                                                            NA
## 3                                                                            NA
## 4                                                                            NA
## 5                                                                            NA
## 6                                                                            NA
##   Supplementary.international.search.NPL.citation espacenet.search.20.03.2015
## 1                                              NA                          NA
## 2                                              NA                          NA
## 3                                              NA                          NA
## 4                                              NA                          NA
## 5                                              NA                          NA
## 6                                              NA                          NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also take a look at the bottom of the dataset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(pizzasliced2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we use &lt;code&gt;summary()&lt;/code&gt; we will gain a slightly cleaner view that tries to sum up all of the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(pizzasliced2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Title           Publication.number Publication.date   Inventor.s.       
##  Length:1716        Length:1716        Length:1716        Length:1716       
##  Class :character   Class :character   Class :character   Class :character  
##  Mode  :character   Mode  :character   Mode  :character   Mode  :character  
##                                                                             
##                                                                             
##                                                                             
##                                                                             
##  Applicant.s.       International.classification
##  Length:1716        Length:1716                 
##  Class :character   Class :character            
##  Mode  :character   Mode  :character            
##                                                 
##                                                 
##                                                 
##                                                 
##  Cooperative.Patent.Classification Application.number Date.of.application
##  Length:1716                       Length:1716        Min.   :       0   
##  Class :character                  Class :character   1st Qu.:20020816   
##  Mode  :character                  Mode  :character   Median :20060413   
##                                                       Mean   :20046941   
##                                                       3rd Qu.:20100407   
##                                                       Max.   :20140724   
##                                                       NA&amp;#39;s   :9          
##  Priority.number.s. Patents.cited.in.the.search.report
##  Length:1716        Length:1716                       
##  Class :character   Class :character                  
##  Mode  :character   Mode  :character                  
##                                                       
##                                                       
##                                                       
##                                                       
##  Literature.cited.in.the.search.report Patents.cited.during.examination
##  Length:1716                           Length:1716                     
##  Class :character                      Class :character                
##  Mode  :character                      Mode  :character                
##                                                                        
##                                                                        
##                                                                        
##                                                                        
##  Literature.cited.during.examination Other.patent.citations
##  Mode:logical                        Mode:logical          
##  NA&amp;#39;s:1716                           NA&amp;#39;s:1716             
##                                                            
##                                                            
##                                                            
##                                                            
##                                                            
##  Other.literature.citations Patents.used.in.opposition
##  Mode:logical               Length:1716               
##  NA&amp;#39;s:1716                  Class :character          
##                             Mode  :character          
##                                                       
##                                                       
##                                                       
##                                                       
##  Literature.used.in.opposition Patents.cited.by.the.applicant
##  Mode:logical                  Length:1716                   
##  NA&amp;#39;s:1716                     Class :character              
##                                Mode  :character              
##                                                              
##                                                              
##                                                              
##                                                              
##  Literature.cited.by.the.applicant International.search.citation
##  Mode:logical                      Length:1716                  
##  NA&amp;#39;s:1716                         Class :character             
##                                    Mode  :character             
##                                                                 
##                                                                 
##                                                                 
##                                                                 
##  International.search.NPL.citation Supplementary.international.search.citation
##  Length:1716                       Mode:logical                               
##  Class :character                  NA&amp;#39;s:1716                                  
##  Mode  :character                                                             
##                                                                               
##                                                                               
##                                                                               
##                                                                               
##  Supplementary.international.search.NPL.citation espacenet.search.20.03.2015
##  Mode:logical                                    Min.   :238                
##  NA&amp;#39;s:1716                                       1st Qu.:238                
##                                                  Median :238                
##                                                  Mean   :238                
##                                                  3rd Qu.:238                
##                                                  Max.   :238                
##                                                  NA&amp;#39;s   :1715&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is needed is an easier to read form and that is where we can use &lt;code&gt;tbl_df&lt;/code&gt; again from the &lt;code&gt;dplyr&lt;/code&gt; package that we used earlier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pizzasliced3 &amp;lt;- tbl_df(pizzasliced2)&lt;/code&gt;&lt;/pre&gt;
&lt;!---Houston, we have a problem. That problem is that somewhere in the esp@cenet data that makes up the pizza_sliced dataset there is an issue with the character encoding that is preventing the `dplyr` function from working. Typically this will mean that the character encoding has become messed up in the underlying data. This of course is one of the reasons it is always worth checking the data first (as is suggested in this video [here](https://youtu.be/YYaMEbJW7Qw?list=PLsZOGmKUMi54n8R06U1HmxNywt0bAFays)). Clearly that is OK for small datasets but for large or multi-part datasets is a problem. So, another solution is needed. The problem as it turns out is in the inventor and the applicant fields in the space between the name and the country code entry which looks like this in Excel `BIANCHI MARCO‰Ûâ[IT]` and merely throws a `???` in Open Office Calc. 

Working out how to solve this problem in R could take a while (although string replacement is a good bet). The issue therefore is how to get to a solution as quickly as possible. That solution is to take what we learned above to write the new data.frame to a .csv file, then open the file in Open Office or Excel and use find and replace on the corrupted strings (as is suggested in this video [here](https://youtu.be/YYaMEbJW7Qw?list=PLsZOGmKUMi54n8R06U1HmxNywt0bAFays)). 

First check your working directory `getwd()` so you know where the file will go. Then `setwd(pathtoyourdirectory)` if that needs to change.---&gt;
&lt;!---Open the file in either Open Office or Excel. Copy the corrupted characters in the Inventors or Applicants columns, select those columns and then find and replace with a space as the replacement (see the video link above). Then save the file writing over the original download. Now let&#39;s reimport it. ---&gt;
&lt;!---It can be worth printing the top of the file to check that the clean up has worked.---&gt;
&lt;!---The inventors and applicant fields are now free of the encoding problem. We are now in a position to try again with the table data frame using `tbl_df()`. ---&gt;
&lt;p&gt;Let’s print pizzasliced4.&lt;/p&gt;
&lt;!---We can now see the first ten rows of a data frame that contains 1,707 rows and 24 columns. It will still be a little crunched but is much more readable. Also note that most of the columns are character fields (not factors).

Using `dplyr` we can call up a View of the dataset in a new pop up window. This can be very useful for inspecting datasets.---&gt;
&lt;p&gt;Let’s finish off here by writing pizzasliced2 out to a .csv.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write.csv(pizzasliced2, &amp;quot;pizzasliced2&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While we would probably choose more informative filenames it is good practice to output work before moving on to other tasks or at some point it will be lost.&lt;/p&gt;
&lt;p&gt;We have now covered the basics of importing a .csv file into R and then writing a file. We have also covered importing multiple .csv files and a quick work around character encoding problems before exporting a data frame.&lt;/p&gt;
&lt;p&gt;It is useful to know these steps when you get into trouble, but in day to day practice you are most likely to use the &lt;code&gt;readr&lt;/code&gt; package (or &lt;code&gt;data.table&#39;s&lt;/code&gt; &lt;code&gt;fread()&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-new-readr-package.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the new &lt;code&gt;readr&lt;/code&gt; package.&lt;/h2&gt;
&lt;p&gt;If you don’t have &lt;code&gt;readr&lt;/code&gt; use the following to install it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;readr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do, or to check it has loaded, use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have not done so already, let’s install and load &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;dplyr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s try loading our dataset again using the function &lt;code&gt;read_csv()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
ritonavir3 &amp;lt;- read_csv(&amp;quot;/Users/pauloldham17inch/opensource-patent-analytics/2_datasets/ritonavir/ritonavir.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a data frame and then display problems in red. The problems can be investigated by typing &lt;code&gt;problems()&lt;/code&gt; in the console. We will ignore these in this case. As with &lt;code&gt;read.csv2()&lt;/code&gt;, the &lt;code&gt;readr&lt;/code&gt; function &lt;code&gt;read_csv2()&lt;/code&gt; will read files with the &lt;code&gt;&amp;quot;;&amp;quot;&lt;/code&gt; as the separator.&lt;/p&gt;
&lt;p&gt;To see the read_csv arguments let’s call help&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`?`(read_csv)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;read_csv(file, col_names = TRUE, col_types = NULL, na = &amp;quot;NA&amp;quot;, skip = 0,   n_max = -1, progress = interactive())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This tells us that the function will assume that there are column names in the first row. &lt;code&gt;col_types = NULL&lt;/code&gt; tells us that the function will attempt to calculate the column type from the first thirty rows of data. You can however specify the column types as character, double, integer, logical etc.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip&lt;/code&gt; will specify the number of rows to skip as before. &lt;code&gt;n_max&lt;/code&gt; will specify the maximum number of records to read. That can be helpful if the dataset is large and you just want to take a look at some of it to get a sense of the data.&lt;/p&gt;
&lt;p&gt;The main advantages of &lt;code&gt;read_csv&lt;/code&gt; over &lt;code&gt;read.csv&lt;/code&gt; are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;read_csv&lt;/code&gt; does not automatically read in character vectors as factors. This means there is &lt;strong&gt;no need&lt;/strong&gt; to specify &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; as part of the function’s arguments. This will be a very great relief to many people as it is one less thing to remember!&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;problems()&lt;/code&gt; prompt advises you that problems may exist with reading the file. You might be able to fix or ignore them.&lt;/li&gt;
&lt;li&gt;For larger files a progress indicator will display on loading (in interactive mode) where the load is over 5 seconds.&lt;/li&gt;
&lt;li&gt;Column names are left as is. That means that publication number stays as publication number rather than becoming publication.number and requiring renaming.&lt;/li&gt;
&lt;li&gt;By default, &lt;code&gt;readr&lt;/code&gt; turns imported data into a &lt;code&gt;data.frame&lt;/code&gt;, and a &lt;code&gt;table (tbl)&lt;/code&gt; and a &lt;code&gt;table dataframe (tbl_df)&lt;/code&gt;. You can test this by typing &lt;code&gt;class(ritonavir3)&lt;/code&gt; into the console. That means if you are running &lt;code&gt;dplyr&lt;/code&gt; then it will automatically show the first ten rows and the column name. That may not sound exciting but it is a lot better than masses of data rushing past.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, as &lt;code&gt;readr&lt;/code&gt; is a new package that is being actively developed there are also some issues. You might want to check out the latest development version is available &lt;a href=&#34;https://github.com/hadley/readr/blob/master/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look now at ritonavir3 but using the &lt;code&gt;View()&lt;/code&gt; function to call up a dataset window.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;View(ritonavir3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we scroll across then we can see that the date columns in the dataset have been transformed to &lt;code&gt;NA&lt;/code&gt;. In some circumstances this is not a problem (remember that we still have the original dataset, what we see here is a data table). In other cases this could be a problem (if we wanted to use this data).&lt;/p&gt;
&lt;p&gt;At the time of writing, there does not seem to be a clear way to deal with this issue (but see the development page read.me on precisely this issue). This reflects the difficulty of dealing with dates because they can be ambiguous. We will discuss this elsewhere.&lt;/p&gt;
&lt;p&gt;For the moment, let’s call ritonavir3 into the console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ritonavir3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we see here is the data with column names left as is. We can also see that most of the columns (vectors) are character vectors and have not been transformed into factors meaning &lt;strong&gt;no more&lt;/strong&gt; &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt;. The date fields have been recognised as dates, but as we have seen have been transformed to NA (not available) because of the lack of clarity on the kind of date.&lt;/p&gt;
&lt;p&gt;We will update this part of the walkthrough as clarity on dealing with dates becomes available with &lt;code&gt;readr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-.csv-file-using-write_csv&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing a .csv file using &lt;code&gt;write_csv()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We can easily write a .csv file using the &lt;code&gt;write_csv()&lt;/code&gt; function as follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv(ritonavir3, &amp;quot;ritonavir3.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from this has the advantage of preserving the column names as is so that “publication number” stays as is and does not become “publication.number”.&lt;/p&gt;
&lt;p&gt;The full list of arguments for &lt;code&gt;write_csv()&lt;/code&gt; at the moment is&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write_csv(x, path, append = FALSE, col_names = !append)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;append = TRUE&lt;/code&gt; will append the table to the existing file. &lt;code&gt;col_names = TRUE&lt;/code&gt; will write column names at the top of the file. Expect more arguments to be added as &lt;code&gt;readr&lt;/code&gt; develops.&lt;/p&gt;
&lt;p&gt;Bear in mind that &lt;code&gt;readr&lt;/code&gt; does not possess the functionality of &lt;code&gt;read.csv&lt;/code&gt; or &lt;code&gt;write.csv&lt;/code&gt; in &lt;code&gt;read.table&lt;/code&gt;. Part of the aim of &lt;code&gt;readr&lt;/code&gt; is simplification based on the idea of doing a limited number of things well. Therefore, it is unlikely that &lt;code&gt;readr&lt;/code&gt; will ever be as comprehensive as the &lt;code&gt;read.table&lt;/code&gt; equivalents in the future. However, &lt;code&gt;readr&lt;/code&gt; is likely to become the go to package because of its simplicity for most needs and because it links with the wider family of &lt;code&gt;tidyr&lt;/code&gt;, &lt;code&gt;plyr&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; packages under development at RStudio to make data wrangling and analysis easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;round-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round Up&lt;/h2&gt;
&lt;p&gt;In this walkthrough we have covered the fundamentals of reading and writing .csv files in R. This is pretty much the easiest file format to work with for patent data and considerably better than Excel which we will cover next. I, like almost everyone else, would encourage you to start working with .csv files wherever possible for the straightforward reason that they are cleaner and better to share across platforms and programmes than Excel or other proprietary format files.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
