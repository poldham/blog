<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Paul Oldhams Analytics Blog</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Paul Oldhams Analytics Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright @ Paul Oldham 2017-2018</copyright>
    <lastBuildDate>Thu, 29 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A twitter test</title>
      <link>/2018/03/29/a-test/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/29/a-test/</guid>
      <description>This is just a test to see if twitter cards will work</description>
    </item>
    
    <item>
      <title>Escaping concatenated data hell in R...deconcatenate and trim</title>
      <link>/2018/03/10/dealing-with-concatenated-data-fields-in-r/</link>
      <pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/10/dealing-with-concatenated-data-fields-in-r/</guid>
      <description>In this post I want to talk about concateted fields… er what on earth are you talking about…. you know the spreadsheets or data frames with cells lumped together stuff, like this.
INSERT concatenated
tibble::tibble(messy = c(&amp;quot;this is not the messiest; only a man could be this messy&amp;quot;, &amp;quot;mess; in the world&amp;quot;, &amp;quot;it&amp;#39;s just; a; tribute; honestly&amp;quot;)) ## # A tibble: 3 x 1 ## messy ## &amp;lt;chr&amp;gt; ## 1 this is not the messiest; only a man could be this messy ## 2 mess; in the world ## 3 it&amp;#39;s just; a; tribute; honestly Or, if we wanted something a bit more real world we could take this list of author of scientific articles from south east asia working on marine organisms</description>
    </item>
    
    <item>
      <title>Identifying the earliest patent priority number</title>
      <link>/2018/02/09/identifying-the-earliest-patent-priority-number/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/09/identifying-the-earliest-patent-priority-number/</guid>
      <description>Introduction The challenge of multiple priority numbers A solution in R Using a grouping variable Reducing the data to the first filing    Introduction The international patent system under the 1883 Paris Convention establishes a “priority” system to identify the earliest filing of an invention. In cases where an invention is filed by different applicants the priority number and date allows for the identification of the priority applicant.</description>
    </item>
    
    <item>
      <title>Importing Excel Data in R - A 2018 Update</title>
      <link>/2018/02/06/importing-excel-data-into-r-updated/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/06/importing-excel-data-into-r-updated/</guid>
      <description>Introduction Import Directly from the RStudio Menu Reading an Excel file from a URL Tidying column names with janitor Exporting to Excel Round Up   Introduction Back in 2015 I wrote a long blog post on importing Excel tables into R. Happily for everyone this is now a lot easier than it was. This post provides an update on importing spreadsheets into R and exporting from R to Excel.</description>
    </item>
    
    <item>
      <title>tidy text mining in parallel</title>
      <link>/2018/01/10/tidy-text-mining-in-parallel/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/10/tidy-text-mining-in-parallel/</guid>
      <description>I have been involved with text mining for quite a few years and I am a big fan of tidy text mining in R as popularised by Julia Silge and Daniel Robinson in Text Mining in R: A Tidy Approach. What I really like about tidy text mining is that we can keep track of the files where a word, a sentence or paragraph come from. This really matters when we want to join the results of tidy text mining to other data such as taxonomic information on species or to maps, or both.</description>
    </item>
    
    <item>
      <title>Dr. Evil meets the robotstxt package</title>
      <link>/2018/01/08/using-robotstxt-in-r/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/08/using-robotstxt-in-r/</guid>
      <description>I am fairly new to webscraping in R using rvest and wanted to get a better understanding of the issues involved in permission to scrape websites. This information is often contained in the robots.txt file on a website. So, I’m briefly going to explore the ROpenSci robotstxt package by Peter Meissner that allows us to access the robots.txt for a domain from R.
I am working on a new R data package of underwater geographic feature names as part of a Norwegian Research Council funded project biospolar on innovation involving biodiversity in marine polar areas.</description>
    </item>
    
    <item>
      <title>Creating an Infographic with infogram</title>
      <link>/2016/04/20/infographics-tutorial/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/2016/04/20/infographics-tutorial/</guid>
      <description>In this article we will use RStudio to prepare patent data for visualisation in an infographic using the online software tool infogram.
Infographics are a popular way of presenting data in a way that is easy for a reader to understand without reading a long report. Infographics are well suited to presenting summaries of data with simple messages about key findings. A good infographic can encourage the audience to read a detailed report and is a tool for engagement with audiences during presentations of the findings of patent research.</description>
    </item>
    
    <item>
      <title>Exploring Scientific Literature with rplos</title>
      <link>/2015/10/27/rplos-tutorial/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/10/27/rplos-tutorial/</guid>
      <description>Introduction In this chapter we look at the use of the rplos package from rOpenSci to access the scientific literature from the Public Library of Science using the PLOS Search API.
The Public Library of Science (PLOS) is the main champion of open access peer reviewed scientific publications and has published somewhere in the region of 140,000 articles. These articles are a fantastic resource. PLOS includes the following titles.
 PLOS ONE PLOS Biology PLOS Medicine PLOS Computational Biology PLOS Genetics PLOS Pathogens PLOS Neglected Tropical Diseases PLOS Clinical Trials () PLOS Collections (collections of articles)  PLOS is important because it provides open access to the full text of peer reviewed research.</description>
    </item>
    
    <item>
      <title>Accessing Patent Data with the Lens</title>
      <link>/2015/07/26/lens-tutorial/</link>
      <pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/07/26/lens-tutorial/</guid>
      <description>Introduction In this article we provide a brief introduction to The Lens patent database as a free source of data for patent analytics.
The Lens is a patent database based in Australia that describes itself as “an open global cyberinfrastructure to make the innovation system more efficient and fair, more transparent and inclusive.” The main way it seeks to do this is by providing access to patent information with a particular focus on sequence information as well as analysis of issues such as DNA related patent activity.</description>
    </item>
    
    <item>
      <title>Reading and Writing an Excel File in R</title>
      <link>/2015/04/30/reading-and-writing-an-excel-file-in-r/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/04/30/reading-and-writing-an-excel-file-in-r/</guid>
      <description>This post was updated in 2018 and you can read it here
The CRAN Project has the following to say about importing Excel files into R.
“The first piece of advice is to avoid doing so if possible! If you have access to Excel, export the data you want from Excel in tab-delimited or comma-separated form, and use read.delim or read.csv to import it into R. (You may need to use read.</description>
    </item>
    
  </channel>
</rss>